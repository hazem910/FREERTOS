
story4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001060  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00001060  000010f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000064d  0080007a  0080007a  0000110e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000110e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000347b  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000109e  00000000  00000000  000048e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002d11  00000000  00000000  00005985  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007dc  00000000  00000000  00008698  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000cb1d  00000000  00000000  00008e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002c3c  00000000  00000000  00015991  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  000185cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000396e  00000000  00000000  00018875  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
       2:	00 00       	nop
       4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
       6:	00 00       	nop
       8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
       a:	00 00       	nop
       c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
       e:	00 00       	nop
      10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
      16:	00 00       	nop
      18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	75 c2       	rjmp	.+1258   	; 0x508 <__vector_7>
      1e:	00 00       	nop
      20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
      22:	00 00       	nop
      24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
      26:	00 00       	nop
      28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
      2e:	00 00       	nop
      30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
      32:	00 00       	nop
      34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
      36:	00 00       	nop
      38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
      3e:	00 00       	nop
      40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
      42:	00 00       	nop
      44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
      46:	00 00       	nop
      48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
      4e:	00 00       	nop
      50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3c       	cpi	r26, 0xC7	; 199
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	e9 d6       	rcall	.+3538   	; 0xe5a <main>
      88:	e9 c7       	rjmp	.+4050   	; 0x105c <_exit>

0000008a <__bad_interrupt>:
      8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <UserStoryThreeInit>:
	Led_Off(LED_0);
	else
	Led_On(LED_0);
	
	vTaskDelay(50);
	}
      8c:	80 e0       	ldi	r24, 0x00	; 0
      8e:	7d d6       	rcall	.+3322   	; 0xd8a <pushButtonInit>
      90:	80 e0       	ldi	r24, 0x00	; 0
      92:	f9 d5       	rcall	.+3058   	; 0xc86 <Led_Init>
      94:	81 e0       	ldi	r24, 0x01	; 1
      96:	f7 d5       	rcall	.+3054   	; 0xc86 <Led_Init>
      98:	82 e0       	ldi	r24, 0x02	; 2
      9a:	f5 d5       	rcall	.+3050   	; 0xc86 <Led_Init>
      9c:	ef d5       	rcall	.+3038   	; 0xc7c <xTaskGetCurrentTaskHandle>
      9e:	ee c3       	rjmp	.+2012   	; 0x87c <vTaskDelete>
      a0:	08 95       	ret

000000a2 <Pushbuttomtask>:




void Pushbuttomtask(void)
{
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	1f 92       	push	r1
      a8:	cd b7       	in	r28, 0x3d	; 61
      aa:	de b7       	in	r29, 0x3e	; 62
/*Variable to store the push button status in*/
	uint8_t u8_PushButtonStatus = 0;
      ac:	19 82       	std	Y+1, r1	; 0x01
    uint8_t counter=0;
	uint8_t flag=Released;
      ae:	11 e0       	ldi	r17, 0x01	; 1

void Pushbuttomtask(void)
{
/*Variable to store the push button status in*/
	uint8_t u8_PushButtonStatus = 0;
    uint8_t counter=0;
      b0:	e1 2c       	mov	r14, r1
			
			}
		}
		else
		{
			PORTA_DATA=0x40;
      b2:	68 94       	set
      b4:	ff 24       	eor	r15, r15
      b6:	f6 f8       	bld	r15, 6
	uint8_t flag=Released;
	while(1)
	{
		if(gu8_LedToggleTaskReady==0)
		{
		   PORTA_DATA=0x10;	
      b8:	00 e1       	ldi	r16, 0x10	; 16
      ba:	dd 24       	eor	r13, r13
      bc:	d3 94       	inc	r13
	uint8_t u8_PushButtonStatus = 0;
    uint8_t counter=0;
	uint8_t flag=Released;
	while(1)
	{
		if(gu8_LedToggleTaskReady==0)
      be:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <gu8_LedToggleTaskReady>
      c2:	81 11       	cpse	r24, r1
      c4:	20 c0       	rjmp	.+64     	; 0x106 <Pushbuttomtask+0x64>
		{
		   PORTA_DATA=0x10;	
      c6:	0b bb       	out	0x1b, r16	; 27
			/*Get the push button status*/
			 if(flag==RELEASED)
      c8:	11 11       	cpse	r17, r1
      ca:	0e c0       	rjmp	.+28     	; 0xe8 <Pushbuttomtask+0x46>
			{
				
					pushButtonGetStatus(BTN_0,&u8_PushButtonStatus);
      cc:	be 01       	movw	r22, r28
      ce:	6f 5f       	subi	r22, 0xFF	; 255
      d0:	7f 4f       	sbci	r23, 0xFF	; 255
      d2:	7f d6       	rcall	.+3326   	; 0xdd2 <pushButtonGetStatus>
					PORTA_DATA=u8_PushButtonStatus;
      d4:	89 81       	ldd	r24, Y+1	; 0x01
      d6:	8b bb       	out	0x1b, r24	; 27
					if(u8_PushButtonStatus==RELEASED)
      d8:	89 81       	ldd	r24, Y+1	; 0x01
      da:	81 11       	cpse	r24, r1
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <Pushbuttomtask+0x3e>
					{
						counter++;
      de:	e3 94       	inc	r14
					}
					if(counter==3)
      e0:	83 e0       	ldi	r24, 0x03	; 3
      e2:	e8 12       	cpse	r14, r24
      e4:	14 c0       	rjmp	.+40     	; 0x10e <Pushbuttomtask+0x6c>
      e6:	02 c0       	rjmp	.+4      	; 0xec <Pushbuttomtask+0x4a>
					{
						flag=PRESSED;
					}
			}
			if(flag==PRESSED)
      e8:	11 30       	cpi	r17, 0x01	; 1
      ea:	89 f4       	brne	.+34     	; 0x10e <Pushbuttomtask+0x6c>
			{
					
				counter=0;
				pushButtonGetStatus(BTN_0,&u8_PushButtonStatus);
      ec:	be 01       	movw	r22, r28
      ee:	6f 5f       	subi	r22, 0xFF	; 255
      f0:	7f 4f       	sbci	r23, 0xFF	; 255
      f2:	80 e0       	ldi	r24, 0x00	; 0
      f4:	6e d6       	rcall	.+3292   	; 0xdd2 <pushButtonGetStatus>
				//PORTA_DATA=u8_PushButtonStatus;
				if(u8_PushButtonStatus==PRESSED)
      f6:	89 81       	ldd	r24, Y+1	; 0x01
      f8:	81 30       	cpi	r24, 0x01	; 1
      fa:	39 f4       	brne	.+14     	; 0x10a <Pushbuttomtask+0x68>
				{
					
					flag=RELEASED;
					gu8_LedToggleTaskReady=1;
      fc:	d0 92 c6 06 	sts	0x06C6, r13	; 0x8006c6 <gu8_LedToggleTaskReady>
				pushButtonGetStatus(BTN_0,&u8_PushButtonStatus);
				//PORTA_DATA=u8_PushButtonStatus;
				if(u8_PushButtonStatus==PRESSED)
				{
					
					flag=RELEASED;
     100:	10 e0       	ldi	r17, 0x00	; 0
					}
			}
			if(flag==PRESSED)
			{
					
				counter=0;
     102:	e1 2c       	mov	r14, r1
     104:	04 c0       	rjmp	.+8      	; 0x10e <Pushbuttomtask+0x6c>
			
			}
		}
		else
		{
			PORTA_DATA=0x40;
     106:	fb ba       	out	0x1b, r15	; 27
     108:	02 c0       	rjmp	.+4      	; 0x10e <Pushbuttomtask+0x6c>
     10a:	1d 2d       	mov	r17, r13
					}
			}
			if(flag==PRESSED)
			{
					
				counter=0;
     10c:	e1 2c       	mov	r14, r1
		else
		{
			PORTA_DATA=0x40;
		}
		/*delay for 1 Milli second*/
		vTaskDelay(BUTTON_TASK_DELAY);
     10e:	8e e1       	ldi	r24, 0x1E	; 30
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	3e d5       	rcall	.+2684   	; 0xb90 <vTaskDelay>
	}
     114:	d4 cf       	rjmp	.-88     	; 0xbe <Pushbuttomtask+0x1c>

00000116 <ledtask>:


void ledtask(void)
{
	
uint8_t  au8_counter=0;
     116:	c0 e0       	ldi	r28, 0x00	; 0
while(1)
{
	
	if (gu8_LedToggleTaskReady)
     118:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <gu8_LedToggleTaskReady>
     11c:	88 23       	and	r24, r24
     11e:	91 f1       	breq	.+100    	; 0x184 <ledtask+0x6e>
	{
	 if(au8_counter<=15)
     120:	c0 31       	cpi	r28, 0x10	; 16
     122:	40 f4       	brcc	.+16     	; 0x134 <ledtask+0x1e>
	 {	
		Led_On(LED_1);
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	e1 d5       	rcall	.+3010   	; 0xcea <Led_On>
		Led_Off(LED_0);
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	fb d5       	rcall	.+3062   	; 0xd22 <Led_Off>
		Led_Off(LED_2);
     12c:	82 e0       	ldi	r24, 0x02	; 2
     12e:	f9 d5       	rcall	.+3058   	; 0xd22 <Led_Off>
     130:	cf 5f       	subi	r28, 0xFF	; 255
		au8_counter++;
     132:	2e c0       	rjmp	.+92     	; 0x190 <ledtask+0x7a>
     134:	80 ef       	ldi	r24, 0xF0	; 240
	 }
	 else if((au8_counter<=20)&&(au8_counter>15))
     136:	8c 0f       	add	r24, r28
     138:	85 30       	cpi	r24, 0x05	; 5
     13a:	40 f4       	brcc	.+16     	; 0x14c <ledtask+0x36>
	 {
		Led_Toggle(LED_1);
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	0d d6       	rcall	.+3098   	; 0xd5a <Led_Toggle>
		Led_Off(LED_0);
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	ef d5       	rcall	.+3038   	; 0xd22 <Led_Off>
     144:	82 e0       	ldi	r24, 0x02	; 2
		Led_Off(LED_2);
     146:	ed d5       	rcall	.+3034   	; 0xd22 <Led_Off>
     148:	cf 5f       	subi	r28, 0xFF	; 255
     14a:	22 c0       	rjmp	.+68     	; 0x190 <ledtask+0x7a>
		au8_counter++;  
     14c:	8b ee       	ldi	r24, 0xEB	; 235
	 }
	 else if((au8_counter<=60)&&(au8_counter>20))
     14e:	8c 0f       	add	r24, r28
     150:	88 32       	cpi	r24, 0x28	; 40
     152:	40 f4       	brcc	.+16     	; 0x164 <ledtask+0x4e>
	 {
		 Led_Off(LED_1);
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	e5 d5       	rcall	.+3018   	; 0xd22 <Led_Off>
     158:	80 e0       	ldi	r24, 0x00	; 0
		 Led_Off(LED_0);
     15a:	e3 d5       	rcall	.+3014   	; 0xd22 <Led_Off>
     15c:	82 e0       	ldi	r24, 0x02	; 2
     15e:	c5 d5       	rcall	.+2954   	; 0xcea <Led_On>
		 Led_On(LED_2);
     160:	cf 5f       	subi	r28, 0xFF	; 255
     162:	16 c0       	rjmp	.+44     	; 0x190 <ledtask+0x7a>
		 au8_counter++; 
     164:	83 ec       	ldi	r24, 0xC3	; 195
	 }
	 else if((au8_counter<=70)&&(au8_counter>60))
     166:	8c 0f       	add	r24, r28
     168:	8a 30       	cpi	r24, 0x0A	; 10
     16a:	40 f4       	brcc	.+16     	; 0x17c <ledtask+0x66>
	 {
		 Led_Off(LED_1);
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	d9 d5       	rcall	.+2994   	; 0xd22 <Led_Off>
     170:	80 e0       	ldi	r24, 0x00	; 0
		 Led_Off(LED_0);
     172:	d7 d5       	rcall	.+2990   	; 0xd22 <Led_Off>
     174:	82 e0       	ldi	r24, 0x02	; 2
		 Led_Toggle(LED_2);
     176:	f1 d5       	rcall	.+3042   	; 0xd5a <Led_Toggle>
     178:	cf 5f       	subi	r28, 0xFF	; 255
		 au8_counter++;
     17a:	0a c0       	rjmp	.+20     	; 0x190 <ledtask+0x7a>
     17c:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <gu8_LedToggleTaskReady>
		 
	 }
	 else
	 {
		 au8_counter=0;
     180:	c0 e0       	ldi	r28, 0x00	; 0
     182:	06 c0       	rjmp	.+12     	; 0x190 <ledtask+0x7a>
		 gu8_LedToggleTaskReady=0;
	 }
    }
	else
	{
		Led_Off(LED_1);
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	cd d5       	rcall	.+2970   	; 0xd22 <Led_Off>
     188:	80 e0       	ldi	r24, 0x00	; 0
		Led_On(LED_0);
     18a:	af d5       	rcall	.+2910   	; 0xcea <Led_On>
     18c:	82 e0       	ldi	r24, 0x02	; 2
     18e:	c9 d5       	rcall	.+2962   	; 0xd22 <Led_Off>
		Led_Off(LED_2);
     190:	88 ec       	ldi	r24, 0xC8	; 200
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	fd d4       	rcall	.+2554   	; 0xb90 <vTaskDelay>
	}
	vTaskDelay(200);	
     196:	c0 cf       	rjmp	.-128    	; 0x118 <ledtask+0x2>

00000198 <pvPortMalloc>:
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	ec 01       	movw	r28, r24
     19e:	e4 d3       	rcall	.+1992   	; 0x968 <vTaskSuspendAll>
     1a0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
     1a4:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
     1a8:	89 2b       	or	r24, r25
     1aa:	31 f4       	brne	.+12     	; 0x1b8 <pvPortMalloc+0x20>
     1ac:	8f e7       	ldi	r24, 0x7F	; 127
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
     1b4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
     1b8:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <xNextFreeByte>
     1bc:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <xNextFreeByte+0x1>
     1c0:	c9 01       	movw	r24, r18
     1c2:	8c 0f       	add	r24, r28
     1c4:	9d 1f       	adc	r25, r29
     1c6:	8b 3d       	cpi	r24, 0xDB	; 219
     1c8:	45 e0       	ldi	r20, 0x05	; 5
     1ca:	94 07       	cpc	r25, r20
     1cc:	70 f4       	brcc	.+28     	; 0x1ea <pvPortMalloc+0x52>
     1ce:	28 17       	cp	r18, r24
     1d0:	39 07       	cpc	r19, r25
     1d2:	70 f4       	brcc	.+28     	; 0x1f0 <pvPortMalloc+0x58>
     1d4:	c0 91 7a 00 	lds	r28, 0x007A	; 0x80007a <__data_end>
     1d8:	d0 91 7b 00 	lds	r29, 0x007B	; 0x80007b <__data_end+0x1>
     1dc:	c2 0f       	add	r28, r18
     1de:	d3 1f       	adc	r29, r19
     1e0:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <xNextFreeByte+0x1>
     1e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <xNextFreeByte>
     1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <pvPortMalloc+0x5c>
     1ea:	c0 e0       	ldi	r28, 0x00	; 0
     1ec:	d0 e0       	ldi	r29, 0x00	; 0
     1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <pvPortMalloc+0x5c>
     1f0:	c0 e0       	ldi	r28, 0x00	; 0
     1f2:	d0 e0       	ldi	r29, 0x00	; 0
     1f4:	5b d4       	rcall	.+2230   	; 0xaac <xTaskResumeAll>
     1f6:	ce 01       	movw	r24, r28
     1f8:	df 91       	pop	r29
     1fa:	cf 91       	pop	r28
     1fc:	08 95       	ret

000001fe <vPortFree>:
     1fe:	08 95       	ret

00000200 <vListInitialise>:
     200:	fc 01       	movw	r30, r24
     202:	03 96       	adiw	r24, 0x03	; 3
     204:	92 83       	std	Z+2, r25	; 0x02
     206:	81 83       	std	Z+1, r24	; 0x01
     208:	2f ef       	ldi	r18, 0xFF	; 255
     20a:	3f ef       	ldi	r19, 0xFF	; 255
     20c:	34 83       	std	Z+4, r19	; 0x04
     20e:	23 83       	std	Z+3, r18	; 0x03
     210:	96 83       	std	Z+6, r25	; 0x06
     212:	85 83       	std	Z+5, r24	; 0x05
     214:	90 87       	std	Z+8, r25	; 0x08
     216:	87 83       	std	Z+7, r24	; 0x07
     218:	10 82       	st	Z, r1
     21a:	08 95       	ret

0000021c <vListInitialiseItem>:
     21c:	fc 01       	movw	r30, r24
     21e:	11 86       	std	Z+9, r1	; 0x09
     220:	10 86       	std	Z+8, r1	; 0x08
     222:	08 95       	ret

00000224 <vListInsertEnd>:
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	9c 01       	movw	r18, r24
     22a:	fb 01       	movw	r30, r22
     22c:	dc 01       	movw	r26, r24
     22e:	11 96       	adiw	r26, 0x01	; 1
     230:	cd 91       	ld	r28, X+
     232:	dc 91       	ld	r29, X
     234:	12 97       	sbiw	r26, 0x02	; 2
     236:	d3 83       	std	Z+3, r29	; 0x03
     238:	c2 83       	std	Z+2, r28	; 0x02
     23a:	8c 81       	ldd	r24, Y+4	; 0x04
     23c:	9d 81       	ldd	r25, Y+5	; 0x05
     23e:	95 83       	std	Z+5, r25	; 0x05
     240:	84 83       	std	Z+4, r24	; 0x04
     242:	8c 81       	ldd	r24, Y+4	; 0x04
     244:	9d 81       	ldd	r25, Y+5	; 0x05
     246:	dc 01       	movw	r26, r24
     248:	13 96       	adiw	r26, 0x03	; 3
     24a:	7c 93       	st	X, r23
     24c:	6e 93       	st	-X, r22
     24e:	12 97       	sbiw	r26, 0x02	; 2
     250:	7d 83       	std	Y+5, r23	; 0x05
     252:	6c 83       	std	Y+4, r22	; 0x04
     254:	31 87       	std	Z+9, r19	; 0x09
     256:	20 87       	std	Z+8, r18	; 0x08
     258:	f9 01       	movw	r30, r18
     25a:	80 81       	ld	r24, Z
     25c:	8f 5f       	subi	r24, 0xFF	; 255
     25e:	80 83       	st	Z, r24
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <vListInsert>:
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
     26a:	eb 01       	movw	r28, r22
     26c:	48 81       	ld	r20, Y
     26e:	59 81       	ldd	r21, Y+1	; 0x01
     270:	4f 3f       	cpi	r20, 0xFF	; 255
     272:	2f ef       	ldi	r18, 0xFF	; 255
     274:	52 07       	cpc	r21, r18
     276:	21 f4       	brne	.+8      	; 0x280 <vListInsert+0x1a>
     278:	fc 01       	movw	r30, r24
     27a:	a7 81       	ldd	r26, Z+7	; 0x07
     27c:	b0 85       	ldd	r27, Z+8	; 0x08
     27e:	0d c0       	rjmp	.+26     	; 0x29a <vListInsert+0x34>
     280:	dc 01       	movw	r26, r24
     282:	13 96       	adiw	r26, 0x03	; 3
     284:	01 c0       	rjmp	.+2      	; 0x288 <vListInsert+0x22>
     286:	df 01       	movw	r26, r30
     288:	12 96       	adiw	r26, 0x02	; 2
     28a:	ed 91       	ld	r30, X+
     28c:	fc 91       	ld	r31, X
     28e:	13 97       	sbiw	r26, 0x03	; 3
     290:	20 81       	ld	r18, Z
     292:	31 81       	ldd	r19, Z+1	; 0x01
     294:	42 17       	cp	r20, r18
     296:	53 07       	cpc	r21, r19
     298:	b0 f7       	brcc	.-20     	; 0x286 <vListInsert+0x20>
     29a:	12 96       	adiw	r26, 0x02	; 2
     29c:	ed 91       	ld	r30, X+
     29e:	fc 91       	ld	r31, X
     2a0:	13 97       	sbiw	r26, 0x03	; 3
     2a2:	fb 83       	std	Y+3, r31	; 0x03
     2a4:	ea 83       	std	Y+2, r30	; 0x02
     2a6:	d5 83       	std	Z+5, r29	; 0x05
     2a8:	c4 83       	std	Z+4, r28	; 0x04
     2aa:	bd 83       	std	Y+5, r27	; 0x05
     2ac:	ac 83       	std	Y+4, r26	; 0x04
     2ae:	13 96       	adiw	r26, 0x03	; 3
     2b0:	dc 93       	st	X, r29
     2b2:	ce 93       	st	-X, r28
     2b4:	12 97       	sbiw	r26, 0x02	; 2
     2b6:	99 87       	std	Y+9, r25	; 0x09
     2b8:	88 87       	std	Y+8, r24	; 0x08
     2ba:	fc 01       	movw	r30, r24
     2bc:	20 81       	ld	r18, Z
     2be:	2f 5f       	subi	r18, 0xFF	; 255
     2c0:	20 83       	st	Z, r18
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <uxListRemove>:
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
     2cc:	fc 01       	movw	r30, r24
     2ce:	a0 85       	ldd	r26, Z+8	; 0x08
     2d0:	b1 85       	ldd	r27, Z+9	; 0x09
     2d2:	c2 81       	ldd	r28, Z+2	; 0x02
     2d4:	d3 81       	ldd	r29, Z+3	; 0x03
     2d6:	84 81       	ldd	r24, Z+4	; 0x04
     2d8:	95 81       	ldd	r25, Z+5	; 0x05
     2da:	9d 83       	std	Y+5, r25	; 0x05
     2dc:	8c 83       	std	Y+4, r24	; 0x04
     2de:	c4 81       	ldd	r28, Z+4	; 0x04
     2e0:	d5 81       	ldd	r29, Z+5	; 0x05
     2e2:	82 81       	ldd	r24, Z+2	; 0x02
     2e4:	93 81       	ldd	r25, Z+3	; 0x03
     2e6:	9b 83       	std	Y+3, r25	; 0x03
     2e8:	8a 83       	std	Y+2, r24	; 0x02
     2ea:	11 96       	adiw	r26, 0x01	; 1
     2ec:	8d 91       	ld	r24, X+
     2ee:	9c 91       	ld	r25, X
     2f0:	12 97       	sbiw	r26, 0x02	; 2
     2f2:	e8 17       	cp	r30, r24
     2f4:	f9 07       	cpc	r31, r25
     2f6:	31 f4       	brne	.+12     	; 0x304 <uxListRemove+0x3c>
     2f8:	84 81       	ldd	r24, Z+4	; 0x04
     2fa:	95 81       	ldd	r25, Z+5	; 0x05
     2fc:	12 96       	adiw	r26, 0x02	; 2
     2fe:	9c 93       	st	X, r25
     300:	8e 93       	st	-X, r24
     302:	11 97       	sbiw	r26, 0x01	; 1
     304:	11 86       	std	Z+9, r1	; 0x09
     306:	10 86       	std	Z+8, r1	; 0x08
     308:	8c 91       	ld	r24, X
     30a:	81 50       	subi	r24, 0x01	; 1
     30c:	8c 93       	st	X, r24
     30e:	8c 91       	ld	r24, X
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	08 95       	ret

00000316 <pxPortInitialiseStack>:
     316:	31 e1       	ldi	r19, 0x11	; 17
     318:	fc 01       	movw	r30, r24
     31a:	30 83       	st	Z, r19
     31c:	31 97       	sbiw	r30, 0x01	; 1
     31e:	22 e2       	ldi	r18, 0x22	; 34
     320:	20 83       	st	Z, r18
     322:	31 97       	sbiw	r30, 0x01	; 1
     324:	a3 e3       	ldi	r26, 0x33	; 51
     326:	a0 83       	st	Z, r26
     328:	31 97       	sbiw	r30, 0x01	; 1
     32a:	60 83       	st	Z, r22
     32c:	31 97       	sbiw	r30, 0x01	; 1
     32e:	70 83       	st	Z, r23
     330:	31 97       	sbiw	r30, 0x01	; 1
     332:	10 82       	st	Z, r1
     334:	31 97       	sbiw	r30, 0x01	; 1
     336:	60 e8       	ldi	r22, 0x80	; 128
     338:	60 83       	st	Z, r22
     33a:	31 97       	sbiw	r30, 0x01	; 1
     33c:	10 82       	st	Z, r1
     33e:	31 97       	sbiw	r30, 0x01	; 1
     340:	62 e0       	ldi	r22, 0x02	; 2
     342:	60 83       	st	Z, r22
     344:	31 97       	sbiw	r30, 0x01	; 1
     346:	63 e0       	ldi	r22, 0x03	; 3
     348:	60 83       	st	Z, r22
     34a:	31 97       	sbiw	r30, 0x01	; 1
     34c:	64 e0       	ldi	r22, 0x04	; 4
     34e:	60 83       	st	Z, r22
     350:	31 97       	sbiw	r30, 0x01	; 1
     352:	65 e0       	ldi	r22, 0x05	; 5
     354:	60 83       	st	Z, r22
     356:	31 97       	sbiw	r30, 0x01	; 1
     358:	66 e0       	ldi	r22, 0x06	; 6
     35a:	60 83       	st	Z, r22
     35c:	31 97       	sbiw	r30, 0x01	; 1
     35e:	67 e0       	ldi	r22, 0x07	; 7
     360:	60 83       	st	Z, r22
     362:	31 97       	sbiw	r30, 0x01	; 1
     364:	68 e0       	ldi	r22, 0x08	; 8
     366:	60 83       	st	Z, r22
     368:	31 97       	sbiw	r30, 0x01	; 1
     36a:	69 e0       	ldi	r22, 0x09	; 9
     36c:	60 83       	st	Z, r22
     36e:	31 97       	sbiw	r30, 0x01	; 1
     370:	60 e1       	ldi	r22, 0x10	; 16
     372:	60 83       	st	Z, r22
     374:	31 97       	sbiw	r30, 0x01	; 1
     376:	30 83       	st	Z, r19
     378:	31 97       	sbiw	r30, 0x01	; 1
     37a:	32 e1       	ldi	r19, 0x12	; 18
     37c:	30 83       	st	Z, r19
     37e:	31 97       	sbiw	r30, 0x01	; 1
     380:	33 e1       	ldi	r19, 0x13	; 19
     382:	30 83       	st	Z, r19
     384:	31 97       	sbiw	r30, 0x01	; 1
     386:	34 e1       	ldi	r19, 0x14	; 20
     388:	30 83       	st	Z, r19
     38a:	31 97       	sbiw	r30, 0x01	; 1
     38c:	35 e1       	ldi	r19, 0x15	; 21
     38e:	30 83       	st	Z, r19
     390:	31 97       	sbiw	r30, 0x01	; 1
     392:	36 e1       	ldi	r19, 0x16	; 22
     394:	30 83       	st	Z, r19
     396:	31 97       	sbiw	r30, 0x01	; 1
     398:	37 e1       	ldi	r19, 0x17	; 23
     39a:	30 83       	st	Z, r19
     39c:	31 97       	sbiw	r30, 0x01	; 1
     39e:	38 e1       	ldi	r19, 0x18	; 24
     3a0:	30 83       	st	Z, r19
     3a2:	31 97       	sbiw	r30, 0x01	; 1
     3a4:	39 e1       	ldi	r19, 0x19	; 25
     3a6:	30 83       	st	Z, r19
     3a8:	31 97       	sbiw	r30, 0x01	; 1
     3aa:	30 e2       	ldi	r19, 0x20	; 32
     3ac:	30 83       	st	Z, r19
     3ae:	31 97       	sbiw	r30, 0x01	; 1
     3b0:	31 e2       	ldi	r19, 0x21	; 33
     3b2:	30 83       	st	Z, r19
     3b4:	31 97       	sbiw	r30, 0x01	; 1
     3b6:	20 83       	st	Z, r18
     3b8:	31 97       	sbiw	r30, 0x01	; 1
     3ba:	23 e2       	ldi	r18, 0x23	; 35
     3bc:	20 83       	st	Z, r18
     3be:	31 97       	sbiw	r30, 0x01	; 1
     3c0:	40 83       	st	Z, r20
     3c2:	31 97       	sbiw	r30, 0x01	; 1
     3c4:	50 83       	st	Z, r21
     3c6:	31 97       	sbiw	r30, 0x01	; 1
     3c8:	26 e2       	ldi	r18, 0x26	; 38
     3ca:	20 83       	st	Z, r18
     3cc:	31 97       	sbiw	r30, 0x01	; 1
     3ce:	27 e2       	ldi	r18, 0x27	; 39
     3d0:	20 83       	st	Z, r18
     3d2:	31 97       	sbiw	r30, 0x01	; 1
     3d4:	28 e2       	ldi	r18, 0x28	; 40
     3d6:	20 83       	st	Z, r18
     3d8:	31 97       	sbiw	r30, 0x01	; 1
     3da:	29 e2       	ldi	r18, 0x29	; 41
     3dc:	20 83       	st	Z, r18
     3de:	31 97       	sbiw	r30, 0x01	; 1
     3e0:	20 e3       	ldi	r18, 0x30	; 48
     3e2:	20 83       	st	Z, r18
     3e4:	31 97       	sbiw	r30, 0x01	; 1
     3e6:	21 e3       	ldi	r18, 0x31	; 49
     3e8:	20 83       	st	Z, r18
     3ea:	86 97       	sbiw	r24, 0x26	; 38
     3ec:	08 95       	ret

000003ee <xPortStartScheduler>:
     3ee:	1b bc       	out	0x2b, r1	; 43
     3f0:	89 ef       	ldi	r24, 0xF9	; 249
     3f2:	8a bd       	out	0x2a, r24	; 42
     3f4:	8b e0       	ldi	r24, 0x0B	; 11
     3f6:	8e bd       	out	0x2e, r24	; 46
     3f8:	89 b7       	in	r24, 0x39	; 57
     3fa:	80 61       	ori	r24, 0x10	; 16
     3fc:	89 bf       	out	0x39, r24	; 57
     3fe:	a0 91 be 06 	lds	r26, 0x06BE	; 0x8006be <pxCurrentTCB>
     402:	b0 91 bf 06 	lds	r27, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     406:	cd 91       	ld	r28, X+
     408:	cd bf       	out	0x3d, r28	; 61
     40a:	dd 91       	ld	r29, X+
     40c:	de bf       	out	0x3e, r29	; 62
     40e:	ff 91       	pop	r31
     410:	ef 91       	pop	r30
     412:	df 91       	pop	r29
     414:	cf 91       	pop	r28
     416:	bf 91       	pop	r27
     418:	af 91       	pop	r26
     41a:	9f 91       	pop	r25
     41c:	8f 91       	pop	r24
     41e:	7f 91       	pop	r23
     420:	6f 91       	pop	r22
     422:	5f 91       	pop	r21
     424:	4f 91       	pop	r20
     426:	3f 91       	pop	r19
     428:	2f 91       	pop	r18
     42a:	1f 91       	pop	r17
     42c:	0f 91       	pop	r16
     42e:	ff 90       	pop	r15
     430:	ef 90       	pop	r14
     432:	df 90       	pop	r13
     434:	cf 90       	pop	r12
     436:	bf 90       	pop	r11
     438:	af 90       	pop	r10
     43a:	9f 90       	pop	r9
     43c:	8f 90       	pop	r8
     43e:	7f 90       	pop	r7
     440:	6f 90       	pop	r6
     442:	5f 90       	pop	r5
     444:	4f 90       	pop	r4
     446:	3f 90       	pop	r3
     448:	2f 90       	pop	r2
     44a:	1f 90       	pop	r1
     44c:	0f 90       	pop	r0
     44e:	0f be       	out	0x3f, r0	; 63
     450:	0f 90       	pop	r0
     452:	08 95       	ret
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	08 95       	ret

00000458 <vPortYield>:
     458:	0f 92       	push	r0
     45a:	0f b6       	in	r0, 0x3f	; 63
     45c:	f8 94       	cli
     45e:	0f 92       	push	r0
     460:	1f 92       	push	r1
     462:	11 24       	eor	r1, r1
     464:	2f 92       	push	r2
     466:	3f 92       	push	r3
     468:	4f 92       	push	r4
     46a:	5f 92       	push	r5
     46c:	6f 92       	push	r6
     46e:	7f 92       	push	r7
     470:	8f 92       	push	r8
     472:	9f 92       	push	r9
     474:	af 92       	push	r10
     476:	bf 92       	push	r11
     478:	cf 92       	push	r12
     47a:	df 92       	push	r13
     47c:	ef 92       	push	r14
     47e:	ff 92       	push	r15
     480:	0f 93       	push	r16
     482:	1f 93       	push	r17
     484:	2f 93       	push	r18
     486:	3f 93       	push	r19
     488:	4f 93       	push	r20
     48a:	5f 93       	push	r21
     48c:	6f 93       	push	r22
     48e:	7f 93       	push	r23
     490:	8f 93       	push	r24
     492:	9f 93       	push	r25
     494:	af 93       	push	r26
     496:	bf 93       	push	r27
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ef 93       	push	r30
     49e:	ff 93       	push	r31
     4a0:	a0 91 be 06 	lds	r26, 0x06BE	; 0x8006be <pxCurrentTCB>
     4a4:	b0 91 bf 06 	lds	r27, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     4a8:	0d b6       	in	r0, 0x3d	; 61
     4aa:	0d 92       	st	X+, r0
     4ac:	0e b6       	in	r0, 0x3e	; 62
     4ae:	0d 92       	st	X+, r0
     4b0:	7f d3       	rcall	.+1790   	; 0xbb0 <vTaskSwitchContext>
     4b2:	a0 91 be 06 	lds	r26, 0x06BE	; 0x8006be <pxCurrentTCB>
     4b6:	b0 91 bf 06 	lds	r27, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     4ba:	cd 91       	ld	r28, X+
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	dd 91       	ld	r29, X+
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	ff 91       	pop	r31
     4c4:	ef 91       	pop	r30
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	bf 91       	pop	r27
     4cc:	af 91       	pop	r26
     4ce:	9f 91       	pop	r25
     4d0:	8f 91       	pop	r24
     4d2:	7f 91       	pop	r23
     4d4:	6f 91       	pop	r22
     4d6:	5f 91       	pop	r21
     4d8:	4f 91       	pop	r20
     4da:	3f 91       	pop	r19
     4dc:	2f 91       	pop	r18
     4de:	1f 91       	pop	r17
     4e0:	0f 91       	pop	r16
     4e2:	ff 90       	pop	r15
     4e4:	ef 90       	pop	r14
     4e6:	df 90       	pop	r13
     4e8:	cf 90       	pop	r12
     4ea:	bf 90       	pop	r11
     4ec:	af 90       	pop	r10
     4ee:	9f 90       	pop	r9
     4f0:	8f 90       	pop	r8
     4f2:	7f 90       	pop	r7
     4f4:	6f 90       	pop	r6
     4f6:	5f 90       	pop	r5
     4f8:	4f 90       	pop	r4
     4fa:	3f 90       	pop	r3
     4fc:	2f 90       	pop	r2
     4fe:	1f 90       	pop	r1
     500:	0f 90       	pop	r0
     502:	0f be       	out	0x3f, r0	; 63
     504:	0f 90       	pop	r0
     506:	08 95       	ret

00000508 <__vector_7>:
     508:	1f 92       	push	r1
     50a:	0f 92       	push	r0
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	0f 92       	push	r0
     510:	11 24       	eor	r1, r1
     512:	2f 93       	push	r18
     514:	3f 93       	push	r19
     516:	4f 93       	push	r20
     518:	5f 93       	push	r21
     51a:	6f 93       	push	r22
     51c:	7f 93       	push	r23
     51e:	8f 93       	push	r24
     520:	9f 93       	push	r25
     522:	af 93       	push	r26
     524:	bf 93       	push	r27
     526:	ef 93       	push	r30
     528:	ff 93       	push	r31
     52a:	24 d2       	rcall	.+1096   	; 0x974 <xTaskIncrementTick>
     52c:	ff 91       	pop	r31
     52e:	ef 91       	pop	r30
     530:	bf 91       	pop	r27
     532:	af 91       	pop	r26
     534:	9f 91       	pop	r25
     536:	8f 91       	pop	r24
     538:	7f 91       	pop	r23
     53a:	6f 91       	pop	r22
     53c:	5f 91       	pop	r21
     53e:	4f 91       	pop	r20
     540:	3f 91       	pop	r19
     542:	2f 91       	pop	r18
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <prvResetNextTaskUnblockTime>:
     54e:	e0 91 86 06 	lds	r30, 0x0686	; 0x800686 <pxDelayedTaskList>
     552:	f0 91 87 06 	lds	r31, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
     556:	80 81       	ld	r24, Z
     558:	81 11       	cpse	r24, r1
     55a:	07 c0       	rjmp	.+14     	; 0x56a <prvResetNextTaskUnblockTime+0x1c>
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	9f ef       	ldi	r25, 0xFF	; 255
     560:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <xNextTaskUnblockTime+0x1>
     564:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xNextTaskUnblockTime>
     568:	08 95       	ret
     56a:	e0 91 86 06 	lds	r30, 0x0686	; 0x800686 <pxDelayedTaskList>
     56e:	f0 91 87 06 	lds	r31, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
     572:	05 80       	ldd	r0, Z+5	; 0x05
     574:	f6 81       	ldd	r31, Z+6	; 0x06
     576:	e0 2d       	mov	r30, r0
     578:	06 80       	ldd	r0, Z+6	; 0x06
     57a:	f7 81       	ldd	r31, Z+7	; 0x07
     57c:	e0 2d       	mov	r30, r0
     57e:	82 81       	ldd	r24, Z+2	; 0x02
     580:	93 81       	ldd	r25, Z+3	; 0x03
     582:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <xNextTaskUnblockTime+0x1>
     586:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xNextTaskUnblockTime>
     58a:	08 95       	ret

0000058c <prvIdleTask>:
     58c:	02 e7       	ldi	r16, 0x72	; 114
     58e:	16 e0       	ldi	r17, 0x06	; 6
     590:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <uxDeletedTasksWaitingCleanUp>
     594:	88 23       	and	r24, r24
     596:	11 f1       	breq	.+68     	; 0x5dc <prvIdleTask+0x50>
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	0f 92       	push	r0
     59e:	d8 01       	movw	r26, r16
     5a0:	15 96       	adiw	r26, 0x05	; 5
     5a2:	ed 91       	ld	r30, X+
     5a4:	fc 91       	ld	r31, X
     5a6:	16 97       	sbiw	r26, 0x06	; 6
     5a8:	c6 81       	ldd	r28, Z+6	; 0x06
     5aa:	d7 81       	ldd	r29, Z+7	; 0x07
     5ac:	ce 01       	movw	r24, r28
     5ae:	02 96       	adiw	r24, 0x02	; 2
     5b0:	8b de       	rcall	.-746    	; 0x2c8 <uxListRemove>
     5b2:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <uxCurrentNumberOfTasks>
     5b6:	81 50       	subi	r24, 0x01	; 1
     5b8:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <uxCurrentNumberOfTasks>
     5bc:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <uxDeletedTasksWaitingCleanUp>
     5c0:	81 50       	subi	r24, 0x01	; 1
     5c2:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <uxDeletedTasksWaitingCleanUp>
     5c6:	0f 90       	pop	r0
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	8f 89       	ldd	r24, Y+23	; 0x17
     5cc:	98 8d       	ldd	r25, Y+24	; 0x18
     5ce:	17 de       	rcall	.-978    	; 0x1fe <vPortFree>
     5d0:	ce 01       	movw	r24, r28
     5d2:	15 de       	rcall	.-982    	; 0x1fe <vPortFree>
     5d4:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <uxDeletedTasksWaitingCleanUp>
     5d8:	81 11       	cpse	r24, r1
     5da:	de cf       	rjmp	.-68     	; 0x598 <prvIdleTask+0xc>
     5dc:	3d df       	rcall	.-390    	; 0x458 <vPortYield>
     5de:	d8 cf       	rjmp	.-80     	; 0x590 <prvIdleTask+0x4>

000005e0 <prvAddCurrentTaskToDelayedList>:
     5e0:	ff 92       	push	r15
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	ec 01       	movw	r28, r24
     5ec:	f6 2e       	mov	r15, r22
     5ee:	00 91 65 06 	lds	r16, 0x0665	; 0x800665 <xTickCount>
     5f2:	10 91 66 06 	lds	r17, 0x0666	; 0x800666 <xTickCount+0x1>
     5f6:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <pxCurrentTCB>
     5fa:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     5fe:	02 96       	adiw	r24, 0x02	; 2
     600:	63 de       	rcall	.-826    	; 0x2c8 <uxListRemove>
     602:	cf 3f       	cpi	r28, 0xFF	; 255
     604:	8f ef       	ldi	r24, 0xFF	; 255
     606:	d8 07       	cpc	r29, r24
     608:	61 f4       	brne	.+24     	; 0x622 <prvAddCurrentTaskToDelayedList+0x42>
     60a:	ff 20       	and	r15, r15
     60c:	51 f0       	breq	.+20     	; 0x622 <prvAddCurrentTaskToDelayedList+0x42>
     60e:	60 91 be 06 	lds	r22, 0x06BE	; 0x8006be <pxCurrentTCB>
     612:	70 91 bf 06 	lds	r23, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     616:	6e 5f       	subi	r22, 0xFE	; 254
     618:	7f 4f       	sbci	r23, 0xFF	; 255
     61a:	88 e6       	ldi	r24, 0x68	; 104
     61c:	96 e0       	ldi	r25, 0x06	; 6
     61e:	02 de       	rcall	.-1020   	; 0x224 <vListInsertEnd>
     620:	2d c0       	rjmp	.+90     	; 0x67c <prvAddCurrentTaskToDelayedList+0x9c>
     622:	c0 0f       	add	r28, r16
     624:	d1 1f       	adc	r29, r17
     626:	e0 91 be 06 	lds	r30, 0x06BE	; 0x8006be <pxCurrentTCB>
     62a:	f0 91 bf 06 	lds	r31, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     62e:	d3 83       	std	Z+3, r29	; 0x03
     630:	c2 83       	std	Z+2, r28	; 0x02
     632:	c0 17       	cp	r28, r16
     634:	d1 07       	cpc	r29, r17
     636:	60 f4       	brcc	.+24     	; 0x650 <prvAddCurrentTaskToDelayedList+0x70>
     638:	60 91 be 06 	lds	r22, 0x06BE	; 0x8006be <pxCurrentTCB>
     63c:	70 91 bf 06 	lds	r23, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     640:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <pxOverflowDelayedTaskList>
     644:	90 91 85 06 	lds	r25, 0x0685	; 0x800685 <pxOverflowDelayedTaskList+0x1>
     648:	6e 5f       	subi	r22, 0xFE	; 254
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	0c de       	rcall	.-1000   	; 0x266 <vListInsert>
     64e:	16 c0       	rjmp	.+44     	; 0x67c <prvAddCurrentTaskToDelayedList+0x9c>
     650:	60 91 be 06 	lds	r22, 0x06BE	; 0x8006be <pxCurrentTCB>
     654:	70 91 bf 06 	lds	r23, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     658:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <pxDelayedTaskList>
     65c:	90 91 87 06 	lds	r25, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
     660:	6e 5f       	subi	r22, 0xFE	; 254
     662:	7f 4f       	sbci	r23, 0xFF	; 255
     664:	00 de       	rcall	.-1024   	; 0x266 <vListInsert>
     666:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <xNextTaskUnblockTime>
     66a:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <xNextTaskUnblockTime+0x1>
     66e:	c8 17       	cp	r28, r24
     670:	d9 07       	cpc	r29, r25
     672:	20 f4       	brcc	.+8      	; 0x67c <prvAddCurrentTaskToDelayedList+0x9c>
     674:	d0 93 5e 06 	sts	0x065E, r29	; 0x80065e <xNextTaskUnblockTime+0x1>
     678:	c0 93 5d 06 	sts	0x065D, r28	; 0x80065d <xNextTaskUnblockTime>
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	ff 90       	pop	r15
     686:	08 95       	ret

00000688 <xTaskCreate>:
     688:	4f 92       	push	r4
     68a:	5f 92       	push	r5
     68c:	6f 92       	push	r6
     68e:	7f 92       	push	r7
     690:	8f 92       	push	r8
     692:	9f 92       	push	r9
     694:	af 92       	push	r10
     696:	bf 92       	push	r11
     698:	cf 92       	push	r12
     69a:	df 92       	push	r13
     69c:	ef 92       	push	r14
     69e:	ff 92       	push	r15
     6a0:	0f 93       	push	r16
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	4c 01       	movw	r8, r24
     6a8:	6b 01       	movw	r12, r22
     6aa:	5a 01       	movw	r10, r20
     6ac:	29 01       	movw	r4, r18
     6ae:	ca 01       	movw	r24, r20
     6b0:	73 dd       	rcall	.-1306   	; 0x198 <pvPortMalloc>
     6b2:	3c 01       	movw	r6, r24
     6b4:	89 2b       	or	r24, r25
     6b6:	09 f4       	brne	.+2      	; 0x6ba <xTaskCreate+0x32>
     6b8:	d0 c0       	rjmp	.+416    	; 0x85a <xTaskCreate+0x1d2>
     6ba:	86 e2       	ldi	r24, 0x26	; 38
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	6c dd       	rcall	.-1320   	; 0x198 <pvPortMalloc>
     6c0:	ec 01       	movw	r28, r24
     6c2:	89 2b       	or	r24, r25
     6c4:	59 f0       	breq	.+22     	; 0x6dc <xTaskCreate+0x54>
     6c6:	78 8e       	std	Y+24, r7	; 0x18
     6c8:	6f 8a       	std	Y+23, r6	; 0x17
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	a8 1a       	sub	r10, r24
     6ce:	b1 08       	sbc	r11, r1
     6d0:	a6 0c       	add	r10, r6
     6d2:	b7 1c       	adc	r11, r7
     6d4:	c1 14       	cp	r12, r1
     6d6:	d1 04       	cpc	r13, r1
     6d8:	21 f4       	brne	.+8      	; 0x6e2 <xTaskCreate+0x5a>
     6da:	1f c0       	rjmp	.+62     	; 0x71a <xTaskCreate+0x92>
     6dc:	c3 01       	movw	r24, r6
     6de:	8f dd       	rcall	.-1250   	; 0x1fe <vPortFree>
     6e0:	bc c0       	rjmp	.+376    	; 0x85a <xTaskCreate+0x1d2>
     6e2:	d6 01       	movw	r26, r12
     6e4:	8c 91       	ld	r24, X
     6e6:	89 8f       	std	Y+25, r24	; 0x19
     6e8:	8c 91       	ld	r24, X
     6ea:	88 23       	and	r24, r24
     6ec:	a1 f0       	breq	.+40     	; 0x716 <xTaskCreate+0x8e>
     6ee:	ae 01       	movw	r20, r28
     6f0:	46 5e       	subi	r20, 0xE6	; 230
     6f2:	5f 4f       	sbci	r21, 0xFF	; 255
     6f4:	f6 01       	movw	r30, r12
     6f6:	31 96       	adiw	r30, 0x01	; 1
     6f8:	b8 e0       	ldi	r27, 0x08	; 8
     6fa:	cb 0e       	add	r12, r27
     6fc:	d1 1c       	adc	r13, r1
     6fe:	cf 01       	movw	r24, r30
     700:	21 91       	ld	r18, Z+
     702:	da 01       	movw	r26, r20
     704:	2d 93       	st	X+, r18
     706:	ad 01       	movw	r20, r26
     708:	dc 01       	movw	r26, r24
     70a:	8c 91       	ld	r24, X
     70c:	88 23       	and	r24, r24
     70e:	19 f0       	breq	.+6      	; 0x716 <xTaskCreate+0x8e>
     710:	ec 15       	cp	r30, r12
     712:	fd 05       	cpc	r31, r13
     714:	a1 f7       	brne	.-24     	; 0x6fe <xTaskCreate+0x76>
     716:	18 a2       	std	Y+32, r1	; 0x20
     718:	01 c0       	rjmp	.+2      	; 0x71c <xTaskCreate+0x94>
     71a:	19 8e       	std	Y+25, r1	; 0x19
     71c:	04 30       	cpi	r16, 0x04	; 4
     71e:	08 f0       	brcs	.+2      	; 0x722 <xTaskCreate+0x9a>
     720:	03 e0       	ldi	r16, 0x03	; 3
     722:	0e 8b       	std	Y+22, r16	; 0x16
     724:	6e 01       	movw	r12, r28
     726:	b2 e0       	ldi	r27, 0x02	; 2
     728:	cb 0e       	add	r12, r27
     72a:	d1 1c       	adc	r13, r1
     72c:	c6 01       	movw	r24, r12
     72e:	76 dd       	rcall	.-1300   	; 0x21c <vListInitialiseItem>
     730:	ce 01       	movw	r24, r28
     732:	0c 96       	adiw	r24, 0x0c	; 12
     734:	73 dd       	rcall	.-1306   	; 0x21c <vListInitialiseItem>
     736:	d9 87       	std	Y+9, r29	; 0x09
     738:	c8 87       	std	Y+8, r28	; 0x08
     73a:	84 e0       	ldi	r24, 0x04	; 4
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	80 1b       	sub	r24, r16
     740:	91 09       	sbc	r25, r1
     742:	9d 87       	std	Y+13, r25	; 0x0d
     744:	8c 87       	std	Y+12, r24	; 0x0c
     746:	db 8b       	std	Y+19, r29	; 0x13
     748:	ca 8b       	std	Y+18, r28	; 0x12
     74a:	19 a2       	std	Y+33, r1	; 0x21
     74c:	1a a2       	std	Y+34, r1	; 0x22
     74e:	1b a2       	std	Y+35, r1	; 0x23
     750:	1c a2       	std	Y+36, r1	; 0x24
     752:	1d a2       	std	Y+37, r1	; 0x25
     754:	a2 01       	movw	r20, r4
     756:	b4 01       	movw	r22, r8
     758:	c5 01       	movw	r24, r10
     75a:	dd dd       	rcall	.-1094   	; 0x316 <pxPortInitialiseStack>
     75c:	99 83       	std	Y+1, r25	; 0x01
     75e:	88 83       	st	Y, r24
     760:	e1 14       	cp	r14, r1
     762:	f1 04       	cpc	r15, r1
     764:	19 f0       	breq	.+6      	; 0x76c <xTaskCreate+0xe4>
     766:	f7 01       	movw	r30, r14
     768:	d1 83       	std	Z+1, r29	; 0x01
     76a:	c0 83       	st	Z, r28
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	0f 92       	push	r0
     772:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <uxCurrentNumberOfTasks>
     776:	8f 5f       	subi	r24, 0xFF	; 255
     778:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <uxCurrentNumberOfTasks>
     77c:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <pxCurrentTCB>
     780:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     784:	89 2b       	or	r24, r25
     786:	89 f5       	brne	.+98     	; 0x7ea <xTaskCreate+0x162>
     788:	d0 93 bf 06 	sts	0x06BF, r29	; 0x8006bf <pxCurrentTCB+0x1>
     78c:	c0 93 be 06 	sts	0x06BE, r28	; 0x8006be <pxCurrentTCB>
     790:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <uxCurrentNumberOfTasks>
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	09 f0       	breq	.+2      	; 0x79a <xTaskCreate+0x112>
     798:	38 c0       	rjmp	.+112    	; 0x80a <xTaskCreate+0x182>
     79a:	8a e9       	ldi	r24, 0x9A	; 154
     79c:	96 e0       	ldi	r25, 0x06	; 6
     79e:	30 dd       	rcall	.-1440   	; 0x200 <vListInitialise>
     7a0:	83 ea       	ldi	r24, 0xA3	; 163
     7a2:	96 e0       	ldi	r25, 0x06	; 6
     7a4:	2d dd       	rcall	.-1446   	; 0x200 <vListInitialise>
     7a6:	8c ea       	ldi	r24, 0xAC	; 172
     7a8:	96 e0       	ldi	r25, 0x06	; 6
     7aa:	2a dd       	rcall	.-1452   	; 0x200 <vListInitialise>
     7ac:	85 eb       	ldi	r24, 0xB5	; 181
     7ae:	96 e0       	ldi	r25, 0x06	; 6
     7b0:	27 dd       	rcall	.-1458   	; 0x200 <vListInitialise>
     7b2:	81 e9       	ldi	r24, 0x91	; 145
     7b4:	96 e0       	ldi	r25, 0x06	; 6
     7b6:	24 dd       	rcall	.-1464   	; 0x200 <vListInitialise>
     7b8:	88 e8       	ldi	r24, 0x88	; 136
     7ba:	96 e0       	ldi	r25, 0x06	; 6
     7bc:	21 dd       	rcall	.-1470   	; 0x200 <vListInitialise>
     7be:	8b e7       	ldi	r24, 0x7B	; 123
     7c0:	96 e0       	ldi	r25, 0x06	; 6
     7c2:	1e dd       	rcall	.-1476   	; 0x200 <vListInitialise>
     7c4:	82 e7       	ldi	r24, 0x72	; 114
     7c6:	96 e0       	ldi	r25, 0x06	; 6
     7c8:	1b dd       	rcall	.-1482   	; 0x200 <vListInitialise>
     7ca:	88 e6       	ldi	r24, 0x68	; 104
     7cc:	96 e0       	ldi	r25, 0x06	; 6
     7ce:	18 dd       	rcall	.-1488   	; 0x200 <vListInitialise>
     7d0:	81 e9       	ldi	r24, 0x91	; 145
     7d2:	96 e0       	ldi	r25, 0x06	; 6
     7d4:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <pxDelayedTaskList+0x1>
     7d8:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <pxDelayedTaskList>
     7dc:	88 e8       	ldi	r24, 0x88	; 136
     7de:	96 e0       	ldi	r25, 0x06	; 6
     7e0:	90 93 85 06 	sts	0x0685, r25	; 0x800685 <pxOverflowDelayedTaskList+0x1>
     7e4:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <pxOverflowDelayedTaskList>
     7e8:	10 c0       	rjmp	.+32     	; 0x80a <xTaskCreate+0x182>
     7ea:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <xSchedulerRunning>
     7ee:	81 11       	cpse	r24, r1
     7f0:	0c c0       	rjmp	.+24     	; 0x80a <xTaskCreate+0x182>
     7f2:	e0 91 be 06 	lds	r30, 0x06BE	; 0x8006be <pxCurrentTCB>
     7f6:	f0 91 bf 06 	lds	r31, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     7fa:	96 89       	ldd	r25, Z+22	; 0x16
     7fc:	8e 89       	ldd	r24, Y+22	; 0x16
     7fe:	89 17       	cp	r24, r25
     800:	20 f0       	brcs	.+8      	; 0x80a <xTaskCreate+0x182>
     802:	d0 93 bf 06 	sts	0x06BF, r29	; 0x8006bf <pxCurrentTCB+0x1>
     806:	c0 93 be 06 	sts	0x06BE, r28	; 0x8006be <pxCurrentTCB>
     80a:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <uxTaskNumber>
     80e:	8f 5f       	subi	r24, 0xFF	; 255
     810:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <uxTaskNumber>
     814:	8e 89       	ldd	r24, Y+22	; 0x16
     816:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <uxTopReadyPriority>
     81a:	98 17       	cp	r25, r24
     81c:	10 f4       	brcc	.+4      	; 0x822 <xTaskCreate+0x19a>
     81e:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <uxTopReadyPriority>
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	9c 01       	movw	r18, r24
     826:	22 0f       	add	r18, r18
     828:	33 1f       	adc	r19, r19
     82a:	22 0f       	add	r18, r18
     82c:	33 1f       	adc	r19, r19
     82e:	22 0f       	add	r18, r18
     830:	33 1f       	adc	r19, r19
     832:	82 0f       	add	r24, r18
     834:	93 1f       	adc	r25, r19
     836:	b6 01       	movw	r22, r12
     838:	86 56       	subi	r24, 0x66	; 102
     83a:	99 4f       	sbci	r25, 0xF9	; 249
     83c:	f3 dc       	rcall	.-1562   	; 0x224 <vListInsertEnd>
     83e:	0f 90       	pop	r0
     840:	0f be       	out	0x3f, r0	; 63
     842:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <xSchedulerRunning>
     846:	88 23       	and	r24, r24
     848:	31 f0       	breq	.+12     	; 0x856 <xTaskCreate+0x1ce>
     84a:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <pxCurrentTCB>
     84e:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	03 c0       	rjmp	.+6      	; 0x85c <xTaskCreate+0x1d4>
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	01 c0       	rjmp	.+2      	; 0x85c <xTaskCreate+0x1d4>
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	bf 90       	pop	r11
     86c:	af 90       	pop	r10
     86e:	9f 90       	pop	r9
     870:	8f 90       	pop	r8
     872:	7f 90       	pop	r7
     874:	6f 90       	pop	r6
     876:	5f 90       	pop	r5
     878:	4f 90       	pop	r4
     87a:	08 95       	ret

0000087c <vTaskDelete>:
     87c:	0f 93       	push	r16
     87e:	1f 93       	push	r17
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	ec 01       	movw	r28, r24
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	0f 92       	push	r0
     88c:	89 2b       	or	r24, r25
     88e:	21 f4       	brne	.+8      	; 0x898 <vTaskDelete+0x1c>
     890:	c0 91 be 06 	lds	r28, 0x06BE	; 0x8006be <pxCurrentTCB>
     894:	d0 91 bf 06 	lds	r29, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     898:	8e 01       	movw	r16, r28
     89a:	0e 5f       	subi	r16, 0xFE	; 254
     89c:	1f 4f       	sbci	r17, 0xFF	; 255
     89e:	c8 01       	movw	r24, r16
     8a0:	13 dd       	rcall	.-1498   	; 0x2c8 <uxListRemove>
     8a2:	8c 89       	ldd	r24, Y+20	; 0x14
     8a4:	9d 89       	ldd	r25, Y+21	; 0x15
     8a6:	89 2b       	or	r24, r25
     8a8:	19 f0       	breq	.+6      	; 0x8b0 <vTaskDelete+0x34>
     8aa:	ce 01       	movw	r24, r28
     8ac:	0c 96       	adiw	r24, 0x0c	; 12
     8ae:	0c dd       	rcall	.-1512   	; 0x2c8 <uxListRemove>
     8b0:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <uxTaskNumber>
     8b4:	8f 5f       	subi	r24, 0xFF	; 255
     8b6:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <uxTaskNumber>
     8ba:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <pxCurrentTCB>
     8be:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     8c2:	c8 17       	cp	r28, r24
     8c4:	d9 07       	cpc	r29, r25
     8c6:	51 f4       	brne	.+20     	; 0x8dc <vTaskDelete+0x60>
     8c8:	b8 01       	movw	r22, r16
     8ca:	82 e7       	ldi	r24, 0x72	; 114
     8cc:	96 e0       	ldi	r25, 0x06	; 6
     8ce:	aa dc       	rcall	.-1708   	; 0x224 <vListInsertEnd>
     8d0:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <uxDeletedTasksWaitingCleanUp>
     8d4:	8f 5f       	subi	r24, 0xFF	; 255
     8d6:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <uxDeletedTasksWaitingCleanUp>
     8da:	0b c0       	rjmp	.+22     	; 0x8f2 <vTaskDelete+0x76>
     8dc:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <uxCurrentNumberOfTasks>
     8e0:	81 50       	subi	r24, 0x01	; 1
     8e2:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <uxCurrentNumberOfTasks>
     8e6:	8f 89       	ldd	r24, Y+23	; 0x17
     8e8:	98 8d       	ldd	r25, Y+24	; 0x18
     8ea:	89 dc       	rcall	.-1774   	; 0x1fe <vPortFree>
     8ec:	ce 01       	movw	r24, r28
     8ee:	87 dc       	rcall	.-1778   	; 0x1fe <vPortFree>
     8f0:	2e de       	rcall	.-932    	; 0x54e <prvResetNextTaskUnblockTime>
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <xSchedulerRunning>
     8fa:	88 23       	and	r24, r24
     8fc:	41 f0       	breq	.+16     	; 0x90e <vTaskDelete+0x92>
     8fe:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <pxCurrentTCB>
     902:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     906:	c8 17       	cp	r28, r24
     908:	d9 07       	cpc	r29, r25
     90a:	09 f4       	brne	.+2      	; 0x90e <vTaskDelete+0x92>
     90c:	a5 dd       	rcall	.-1206   	; 0x458 <vPortYield>
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	0f 91       	pop	r16
     916:	08 95       	ret

00000918 <vTaskStartScheduler>:
     918:	ef 92       	push	r14
     91a:	ff 92       	push	r15
     91c:	0f 93       	push	r16
     91e:	0f 2e       	mov	r0, r31
     920:	fb e5       	ldi	r31, 0x5B	; 91
     922:	ef 2e       	mov	r14, r31
     924:	f6 e0       	ldi	r31, 0x06	; 6
     926:	ff 2e       	mov	r15, r31
     928:	f0 2d       	mov	r31, r0
     92a:	00 e0       	ldi	r16, 0x00	; 0
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	45 e5       	ldi	r20, 0x55	; 85
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	60 e6       	ldi	r22, 0x60	; 96
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	86 ec       	ldi	r24, 0xC6	; 198
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	a5 de       	rcall	.-694    	; 0x688 <xTaskCreate>
     93e:	81 30       	cpi	r24, 0x01	; 1
     940:	79 f4       	brne	.+30     	; 0x960 <vTaskStartScheduler+0x48>
     942:	f8 94       	cli
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	9f ef       	ldi	r25, 0xFF	; 255
     948:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <xNextTaskUnblockTime+0x1>
     94c:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xNextTaskUnblockTime>
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xSchedulerRunning>
     956:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <xTickCount+0x1>
     95a:	10 92 65 06 	sts	0x0665, r1	; 0x800665 <xTickCount>
     95e:	47 dd       	rcall	.-1394   	; 0x3ee <xPortStartScheduler>
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	08 95       	ret

00000968 <vTaskSuspendAll>:
     968:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
     96c:	8f 5f       	subi	r24, 0xFF	; 255
     96e:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <uxSchedulerSuspended>
     972:	08 95       	ret

00000974 <xTaskIncrementTick>:
     974:	ef 92       	push	r14
     976:	ff 92       	push	r15
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
     984:	81 11       	cpse	r24, r1
     986:	85 c0       	rjmp	.+266    	; 0xa92 <xTaskIncrementTick+0x11e>
     988:	e0 90 65 06 	lds	r14, 0x0665	; 0x800665 <xTickCount>
     98c:	f0 90 66 06 	lds	r15, 0x0666	; 0x800666 <xTickCount+0x1>
     990:	8f ef       	ldi	r24, 0xFF	; 255
     992:	e8 1a       	sub	r14, r24
     994:	f8 0a       	sbc	r15, r24
     996:	f0 92 66 06 	sts	0x0666, r15	; 0x800666 <xTickCount+0x1>
     99a:	e0 92 65 06 	sts	0x0665, r14	; 0x800665 <xTickCount>
     99e:	e1 14       	cp	r14, r1
     9a0:	f1 04       	cpc	r15, r1
     9a2:	b1 f4       	brne	.+44     	; 0x9d0 <xTaskIncrementTick+0x5c>
     9a4:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <pxDelayedTaskList>
     9a8:	90 91 87 06 	lds	r25, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
     9ac:	20 91 84 06 	lds	r18, 0x0684	; 0x800684 <pxOverflowDelayedTaskList>
     9b0:	30 91 85 06 	lds	r19, 0x0685	; 0x800685 <pxOverflowDelayedTaskList+0x1>
     9b4:	30 93 87 06 	sts	0x0687, r19	; 0x800687 <pxDelayedTaskList+0x1>
     9b8:	20 93 86 06 	sts	0x0686, r18	; 0x800686 <pxDelayedTaskList>
     9bc:	90 93 85 06 	sts	0x0685, r25	; 0x800685 <pxOverflowDelayedTaskList+0x1>
     9c0:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <pxOverflowDelayedTaskList>
     9c4:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <xNumOfOverflows>
     9c8:	8f 5f       	subi	r24, 0xFF	; 255
     9ca:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <xNumOfOverflows>
     9ce:	bf dd       	rcall	.-1154   	; 0x54e <prvResetNextTaskUnblockTime>
     9d0:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <xNextTaskUnblockTime>
     9d4:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <xNextTaskUnblockTime+0x1>
     9d8:	e8 16       	cp	r14, r24
     9da:	f9 06       	cpc	r15, r25
     9dc:	08 f4       	brcc	.+2      	; 0x9e0 <xTaskIncrementTick+0x6c>
     9de:	5e c0       	rjmp	.+188    	; 0xa9c <xTaskIncrementTick+0x128>
     9e0:	e0 91 86 06 	lds	r30, 0x0686	; 0x800686 <pxDelayedTaskList>
     9e4:	f0 91 87 06 	lds	r31, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
     9e8:	80 81       	ld	r24, Z
     9ea:	88 23       	and	r24, r24
     9ec:	79 f0       	breq	.+30     	; 0xa0c <xTaskIncrementTick+0x98>
     9ee:	e0 91 86 06 	lds	r30, 0x0686	; 0x800686 <pxDelayedTaskList>
     9f2:	f0 91 87 06 	lds	r31, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
     9f6:	05 80       	ldd	r0, Z+5	; 0x05
     9f8:	f6 81       	ldd	r31, Z+6	; 0x06
     9fa:	e0 2d       	mov	r30, r0
     9fc:	c6 81       	ldd	r28, Z+6	; 0x06
     9fe:	d7 81       	ldd	r29, Z+7	; 0x07
     a00:	8a 81       	ldd	r24, Y+2	; 0x02
     a02:	9b 81       	ldd	r25, Y+3	; 0x03
     a04:	e8 16       	cp	r14, r24
     a06:	f9 06       	cpc	r15, r25
     a08:	d8 f4       	brcc	.+54     	; 0xa40 <xTaskIncrementTick+0xcc>
     a0a:	15 c0       	rjmp	.+42     	; 0xa36 <xTaskIncrementTick+0xc2>
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	9f ef       	ldi	r25, 0xFF	; 255
     a10:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <xNextTaskUnblockTime+0x1>
     a14:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xNextTaskUnblockTime>
     a18:	41 c0       	rjmp	.+130    	; 0xa9c <xTaskIncrementTick+0x128>
     a1a:	e0 91 86 06 	lds	r30, 0x0686	; 0x800686 <pxDelayedTaskList>
     a1e:	f0 91 87 06 	lds	r31, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
     a22:	05 80       	ldd	r0, Z+5	; 0x05
     a24:	f6 81       	ldd	r31, Z+6	; 0x06
     a26:	e0 2d       	mov	r30, r0
     a28:	c6 81       	ldd	r28, Z+6	; 0x06
     a2a:	d7 81       	ldd	r29, Z+7	; 0x07
     a2c:	8a 81       	ldd	r24, Y+2	; 0x02
     a2e:	9b 81       	ldd	r25, Y+3	; 0x03
     a30:	e8 16       	cp	r14, r24
     a32:	f9 06       	cpc	r15, r25
     a34:	28 f4       	brcc	.+10     	; 0xa40 <xTaskIncrementTick+0xcc>
     a36:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <xNextTaskUnblockTime+0x1>
     a3a:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xNextTaskUnblockTime>
     a3e:	2e c0       	rjmp	.+92     	; 0xa9c <xTaskIncrementTick+0x128>
     a40:	8e 01       	movw	r16, r28
     a42:	0e 5f       	subi	r16, 0xFE	; 254
     a44:	1f 4f       	sbci	r17, 0xFF	; 255
     a46:	c8 01       	movw	r24, r16
     a48:	3f dc       	rcall	.-1922   	; 0x2c8 <uxListRemove>
     a4a:	8c 89       	ldd	r24, Y+20	; 0x14
     a4c:	9d 89       	ldd	r25, Y+21	; 0x15
     a4e:	89 2b       	or	r24, r25
     a50:	19 f0       	breq	.+6      	; 0xa58 <xTaskIncrementTick+0xe4>
     a52:	ce 01       	movw	r24, r28
     a54:	0c 96       	adiw	r24, 0x0c	; 12
     a56:	38 dc       	rcall	.-1936   	; 0x2c8 <uxListRemove>
     a58:	8e 89       	ldd	r24, Y+22	; 0x16
     a5a:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <uxTopReadyPriority>
     a5e:	98 17       	cp	r25, r24
     a60:	10 f4       	brcc	.+4      	; 0xa66 <xTaskIncrementTick+0xf2>
     a62:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <uxTopReadyPriority>
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	9c 01       	movw	r18, r24
     a6a:	22 0f       	add	r18, r18
     a6c:	33 1f       	adc	r19, r19
     a6e:	22 0f       	add	r18, r18
     a70:	33 1f       	adc	r19, r19
     a72:	22 0f       	add	r18, r18
     a74:	33 1f       	adc	r19, r19
     a76:	82 0f       	add	r24, r18
     a78:	93 1f       	adc	r25, r19
     a7a:	b8 01       	movw	r22, r16
     a7c:	86 56       	subi	r24, 0x66	; 102
     a7e:	99 4f       	sbci	r25, 0xF9	; 249
     a80:	d1 db       	rcall	.-2142   	; 0x224 <vListInsertEnd>
     a82:	e0 91 86 06 	lds	r30, 0x0686	; 0x800686 <pxDelayedTaskList>
     a86:	f0 91 87 06 	lds	r31, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
     a8a:	80 81       	ld	r24, Z
     a8c:	81 11       	cpse	r24, r1
     a8e:	c5 cf       	rjmp	.-118    	; 0xa1a <xTaskIncrementTick+0xa6>
     a90:	bd cf       	rjmp	.-134    	; 0xa0c <xTaskIncrementTick+0x98>
     a92:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxPendedTicks>
     a96:	8f 5f       	subi	r24, 0xFF	; 255
     a98:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <uxPendedTicks>
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <xTaskResumeAll>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	cf 93       	push	r28
     ab8:	df 93       	push	r29
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	f8 94       	cli
     abe:	0f 92       	push	r0
     ac0:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
     ac4:	81 50       	subi	r24, 0x01	; 1
     ac6:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <uxSchedulerSuspended>
     aca:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
     ace:	81 11       	cpse	r24, r1
     ad0:	54 c0       	rjmp	.+168    	; 0xb7a <xTaskResumeAll+0xce>
     ad2:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <uxCurrentNumberOfTasks>
     ad6:	81 11       	cpse	r24, r1
     ad8:	30 c0       	rjmp	.+96     	; 0xb3a <xTaskResumeAll+0x8e>
     ada:	4f c0       	rjmp	.+158    	; 0xb7a <xTaskResumeAll+0xce>
     adc:	d7 01       	movw	r26, r14
     ade:	15 96       	adiw	r26, 0x05	; 5
     ae0:	ed 91       	ld	r30, X+
     ae2:	fc 91       	ld	r31, X
     ae4:	16 97       	sbiw	r26, 0x06	; 6
     ae6:	c6 81       	ldd	r28, Z+6	; 0x06
     ae8:	d7 81       	ldd	r29, Z+7	; 0x07
     aea:	ce 01       	movw	r24, r28
     aec:	0c 96       	adiw	r24, 0x0c	; 12
     aee:	ec db       	rcall	.-2088   	; 0x2c8 <uxListRemove>
     af0:	8e 01       	movw	r16, r28
     af2:	0e 5f       	subi	r16, 0xFE	; 254
     af4:	1f 4f       	sbci	r17, 0xFF	; 255
     af6:	c8 01       	movw	r24, r16
     af8:	e7 db       	rcall	.-2098   	; 0x2c8 <uxListRemove>
     afa:	8e 89       	ldd	r24, Y+22	; 0x16
     afc:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <uxTopReadyPriority>
     b00:	98 17       	cp	r25, r24
     b02:	10 f4       	brcc	.+4      	; 0xb08 <xTaskResumeAll+0x5c>
     b04:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <uxTopReadyPriority>
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	9c 01       	movw	r18, r24
     b0c:	22 0f       	add	r18, r18
     b0e:	33 1f       	adc	r19, r19
     b10:	22 0f       	add	r18, r18
     b12:	33 1f       	adc	r19, r19
     b14:	22 0f       	add	r18, r18
     b16:	33 1f       	adc	r19, r19
     b18:	82 0f       	add	r24, r18
     b1a:	93 1f       	adc	r25, r19
     b1c:	b8 01       	movw	r22, r16
     b1e:	86 56       	subi	r24, 0x66	; 102
     b20:	99 4f       	sbci	r25, 0xF9	; 249
     b22:	80 db       	rcall	.-2304   	; 0x224 <vListInsertEnd>
     b24:	e0 91 be 06 	lds	r30, 0x06BE	; 0x8006be <pxCurrentTCB>
     b28:	f0 91 bf 06 	lds	r31, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     b2c:	9e 89       	ldd	r25, Y+22	; 0x16
     b2e:	86 89       	ldd	r24, Z+22	; 0x16
     b30:	98 17       	cp	r25, r24
     b32:	68 f0       	brcs	.+26     	; 0xb4e <xTaskResumeAll+0xa2>
     b34:	d0 92 61 06 	sts	0x0661, r13	; 0x800661 <xYieldPending>
     b38:	0a c0       	rjmp	.+20     	; 0xb4e <xTaskResumeAll+0xa2>
     b3a:	c0 e0       	ldi	r28, 0x00	; 0
     b3c:	d0 e0       	ldi	r29, 0x00	; 0
     b3e:	0f 2e       	mov	r0, r31
     b40:	fb e7       	ldi	r31, 0x7B	; 123
     b42:	ef 2e       	mov	r14, r31
     b44:	f6 e0       	ldi	r31, 0x06	; 6
     b46:	ff 2e       	mov	r15, r31
     b48:	f0 2d       	mov	r31, r0
     b4a:	dd 24       	eor	r13, r13
     b4c:	d3 94       	inc	r13
     b4e:	f7 01       	movw	r30, r14
     b50:	80 81       	ld	r24, Z
     b52:	81 11       	cpse	r24, r1
     b54:	c3 cf       	rjmp	.-122    	; 0xadc <xTaskResumeAll+0x30>
     b56:	cd 2b       	or	r28, r29
     b58:	09 f0       	breq	.+2      	; 0xb5c <xTaskResumeAll+0xb0>
     b5a:	f9 dc       	rcall	.-1550   	; 0x54e <prvResetNextTaskUnblockTime>
     b5c:	c0 91 62 06 	lds	r28, 0x0662	; 0x800662 <uxPendedTicks>
     b60:	cc 23       	and	r28, r28
     b62:	49 f0       	breq	.+18     	; 0xb76 <xTaskResumeAll+0xca>
     b64:	d1 e0       	ldi	r29, 0x01	; 1
     b66:	06 df       	rcall	.-500    	; 0x974 <xTaskIncrementTick>
     b68:	81 11       	cpse	r24, r1
     b6a:	d0 93 61 06 	sts	0x0661, r29	; 0x800661 <xYieldPending>
     b6e:	c1 50       	subi	r28, 0x01	; 1
     b70:	d1 f7       	brne	.-12     	; 0xb66 <xTaskResumeAll+0xba>
     b72:	10 92 62 06 	sts	0x0662, r1	; 0x800662 <uxPendedTicks>
     b76:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <xYieldPending>
     b7a:	0f 90       	pop	r0
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	df 90       	pop	r13
     b8e:	08 95       	ret

00000b90 <vTaskDelay>:
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	ec 01       	movw	r28, r24
     b96:	89 2b       	or	r24, r25
     b98:	39 f0       	breq	.+14     	; 0xba8 <vTaskDelay+0x18>
     b9a:	e6 de       	rcall	.-564    	; 0x968 <vTaskSuspendAll>
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	ce 01       	movw	r24, r28
     ba0:	1f dd       	rcall	.-1474   	; 0x5e0 <prvAddCurrentTaskToDelayedList>
     ba2:	84 df       	rcall	.-248    	; 0xaac <xTaskResumeAll>
     ba4:	81 11       	cpse	r24, r1
     ba6:	01 c0       	rjmp	.+2      	; 0xbaa <vTaskDelay+0x1a>
     ba8:	57 dc       	rcall	.-1874   	; 0x458 <vPortYield>
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <vTaskSwitchContext>:
     bb0:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
     bb4:	88 23       	and	r24, r24
     bb6:	21 f0       	breq	.+8      	; 0xbc0 <vTaskSwitchContext+0x10>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <xYieldPending>
     bbe:	08 95       	ret
     bc0:	10 92 61 06 	sts	0x0661, r1	; 0x800661 <xYieldPending>
     bc4:	20 91 64 06 	lds	r18, 0x0664	; 0x800664 <uxTopReadyPriority>
     bc8:	82 2f       	mov	r24, r18
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	fc 01       	movw	r30, r24
     bce:	ee 0f       	add	r30, r30
     bd0:	ff 1f       	adc	r31, r31
     bd2:	ee 0f       	add	r30, r30
     bd4:	ff 1f       	adc	r31, r31
     bd6:	ee 0f       	add	r30, r30
     bd8:	ff 1f       	adc	r31, r31
     bda:	e8 0f       	add	r30, r24
     bdc:	f9 1f       	adc	r31, r25
     bde:	e6 56       	subi	r30, 0x66	; 102
     be0:	f9 4f       	sbci	r31, 0xF9	; 249
     be2:	30 81       	ld	r19, Z
     be4:	31 11       	cpse	r19, r1
     be6:	11 c0       	rjmp	.+34     	; 0xc0a <vTaskSwitchContext+0x5a>
     be8:	21 50       	subi	r18, 0x01	; 1
     bea:	82 2f       	mov	r24, r18
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	fc 01       	movw	r30, r24
     bf0:	ee 0f       	add	r30, r30
     bf2:	ff 1f       	adc	r31, r31
     bf4:	ee 0f       	add	r30, r30
     bf6:	ff 1f       	adc	r31, r31
     bf8:	ee 0f       	add	r30, r30
     bfa:	ff 1f       	adc	r31, r31
     bfc:	e8 0f       	add	r30, r24
     bfe:	f9 1f       	adc	r31, r25
     c00:	e6 56       	subi	r30, 0x66	; 102
     c02:	f9 4f       	sbci	r31, 0xF9	; 249
     c04:	30 81       	ld	r19, Z
     c06:	33 23       	and	r19, r19
     c08:	79 f3       	breq	.-34     	; 0xbe8 <vTaskSwitchContext+0x38>
     c0a:	ac 01       	movw	r20, r24
     c0c:	44 0f       	add	r20, r20
     c0e:	55 1f       	adc	r21, r21
     c10:	44 0f       	add	r20, r20
     c12:	55 1f       	adc	r21, r21
     c14:	44 0f       	add	r20, r20
     c16:	55 1f       	adc	r21, r21
     c18:	48 0f       	add	r20, r24
     c1a:	59 1f       	adc	r21, r25
     c1c:	da 01       	movw	r26, r20
     c1e:	a6 56       	subi	r26, 0x66	; 102
     c20:	b9 4f       	sbci	r27, 0xF9	; 249
     c22:	11 96       	adiw	r26, 0x01	; 1
     c24:	ed 91       	ld	r30, X+
     c26:	fc 91       	ld	r31, X
     c28:	12 97       	sbiw	r26, 0x02	; 2
     c2a:	02 80       	ldd	r0, Z+2	; 0x02
     c2c:	f3 81       	ldd	r31, Z+3	; 0x03
     c2e:	e0 2d       	mov	r30, r0
     c30:	12 96       	adiw	r26, 0x02	; 2
     c32:	fc 93       	st	X, r31
     c34:	ee 93       	st	-X, r30
     c36:	11 97       	sbiw	r26, 0x01	; 1
     c38:	43 56       	subi	r20, 0x63	; 99
     c3a:	59 4f       	sbci	r21, 0xF9	; 249
     c3c:	e4 17       	cp	r30, r20
     c3e:	f5 07       	cpc	r31, r21
     c40:	29 f4       	brne	.+10     	; 0xc4c <vTaskSwitchContext+0x9c>
     c42:	42 81       	ldd	r20, Z+2	; 0x02
     c44:	53 81       	ldd	r21, Z+3	; 0x03
     c46:	fd 01       	movw	r30, r26
     c48:	52 83       	std	Z+2, r21	; 0x02
     c4a:	41 83       	std	Z+1, r20	; 0x01
     c4c:	fc 01       	movw	r30, r24
     c4e:	ee 0f       	add	r30, r30
     c50:	ff 1f       	adc	r31, r31
     c52:	ee 0f       	add	r30, r30
     c54:	ff 1f       	adc	r31, r31
     c56:	ee 0f       	add	r30, r30
     c58:	ff 1f       	adc	r31, r31
     c5a:	8e 0f       	add	r24, r30
     c5c:	9f 1f       	adc	r25, r31
     c5e:	fc 01       	movw	r30, r24
     c60:	e6 56       	subi	r30, 0x66	; 102
     c62:	f9 4f       	sbci	r31, 0xF9	; 249
     c64:	01 80       	ldd	r0, Z+1	; 0x01
     c66:	f2 81       	ldd	r31, Z+2	; 0x02
     c68:	e0 2d       	mov	r30, r0
     c6a:	86 81       	ldd	r24, Z+6	; 0x06
     c6c:	97 81       	ldd	r25, Z+7	; 0x07
     c6e:	90 93 bf 06 	sts	0x06BF, r25	; 0x8006bf <pxCurrentTCB+0x1>
     c72:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <pxCurrentTCB>
     c76:	20 93 64 06 	sts	0x0664, r18	; 0x800664 <uxTopReadyPriority>
     c7a:	08 95       	ret

00000c7c <xTaskGetCurrentTaskHandle>:
     c7c:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <pxCurrentTCB>
     c80:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
     c84:	08 95       	ret

00000c86 <Led_Init>:

/******************************global variables*****************************/

/***************************************************************************/
void Led_Init(En_LedNumber_t en_led_id)
{
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <Led_Init+0x6>
     c8c:	1f 92       	push	r1
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
	DIO_Cfg_s LED_init;
	
	

	switch(en_led_id)
     c92:	81 30       	cpi	r24, 0x01	; 1
     c94:	69 f0       	breq	.+26     	; 0xcb0 <Led_Init+0x2a>
     c96:	28 f0       	brcs	.+10     	; 0xca2 <Led_Init+0x1c>
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	89 f0       	breq	.+34     	; 0xcbe <Led_Init+0x38>
     c9c:	83 30       	cpi	r24, 0x03	; 3
     c9e:	b1 f0       	breq	.+44     	; 0xccc <Led_Init+0x46>
     ca0:	1b c0       	rjmp	.+54     	; 0xcd8 <Led_Init+0x52>
	{
	case LED_0:
		LED_init.GPIO=LED_0_GPIO;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	89 83       	std	Y+1, r24	; 0x01
		LED_init.pins=LED_0_BIT;
     ca6:	80 e1       	ldi	r24, 0x10	; 16
     ca8:	8a 83       	std	Y+2, r24	; 0x02
		LED_init.dir=OUTPUT;
     caa:	8f ef       	ldi	r24, 0xFF	; 255
     cac:	8b 83       	std	Y+3, r24	; 0x03
		break;
     cae:	14 c0       	rjmp	.+40     	; 0xcd8 <Led_Init+0x52>
	case LED_1:
		LED_init.GPIO=LED_1_GPIO;
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	89 83       	std	Y+1, r24	; 0x01
		LED_init.pins=LED_1_BIT;
     cb4:	80 e2       	ldi	r24, 0x20	; 32
     cb6:	8a 83       	std	Y+2, r24	; 0x02
		LED_init.dir=OUTPUT;
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	8b 83       	std	Y+3, r24	; 0x03
		break;
     cbc:	0d c0       	rjmp	.+26     	; 0xcd8 <Led_Init+0x52>
	case LED_2:
		LED_init.GPIO=LED_2_GPIO;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	89 83       	std	Y+1, r24	; 0x01
		LED_init.pins=LED_2_BIT;
     cc2:	80 e4       	ldi	r24, 0x40	; 64
     cc4:	8a 83       	std	Y+2, r24	; 0x02
		LED_init.dir=OUTPUT;
     cc6:	8f ef       	ldi	r24, 0xFF	; 255
     cc8:	8b 83       	std	Y+3, r24	; 0x03
		break;
     cca:	06 c0       	rjmp	.+12     	; 0xcd8 <Led_Init+0x52>
	case LED_3:
		LED_init.GPIO=LED_3_GPIO;
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	89 83       	std	Y+1, r24	; 0x01
		LED_init.pins=LED_3_BIT;
     cd0:	80 e8       	ldi	r24, 0x80	; 128
     cd2:	8a 83       	std	Y+2, r24	; 0x02
		LED_init.dir=OUTPUT;
     cd4:	8f ef       	ldi	r24, 0xFF	; 255
     cd6:	8b 83       	std	Y+3, r24	; 0x03
		break;

	}
	DIO_init(&LED_init);
     cd8:	ce 01       	movw	r24, r28
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	c1 d0       	rcall	.+386    	; 0xe60 <DIO_init>
}
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <Led_On>:

void Led_On(En_LedNumber_t en_led_id)
{
	switch(en_led_id)
     cea:	81 30       	cpi	r24, 0x01	; 1
     cec:	59 f0       	breq	.+22     	; 0xd04 <Led_On+0x1a>
     cee:	28 f0       	brcs	.+10     	; 0xcfa <Led_On+0x10>
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	69 f0       	breq	.+26     	; 0xd0e <Led_On+0x24>
     cf4:	83 30       	cpi	r24, 0x03	; 3
     cf6:	81 f0       	breq	.+32     	; 0xd18 <Led_On+0x2e>
     cf8:	08 95       	ret
	{
	case LED_0:
		DIO_Write(LED_0_GPIO, LED_0_BIT, HIGH);
     cfa:	4f ef       	ldi	r20, 0xFF	; 255
     cfc:	60 e1       	ldi	r22, 0x10	; 16
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	10 c1       	rjmp	.+544    	; 0xf22 <DIO_Write>
		break;
     d02:	08 95       	ret
	case LED_1:
		DIO_Write(LED_1_GPIO, LED_1_BIT, HIGH);
     d04:	4f ef       	ldi	r20, 0xFF	; 255
     d06:	60 e2       	ldi	r22, 0x20	; 32
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	0b c1       	rjmp	.+534    	; 0xf22 <DIO_Write>
		break;
     d0c:	08 95       	ret
	case LED_2:
		DIO_Write(LED_2_GPIO, LED_2_BIT, HIGH);
     d0e:	4f ef       	ldi	r20, 0xFF	; 255
     d10:	60 e4       	ldi	r22, 0x40	; 64
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	06 c1       	rjmp	.+524    	; 0xf22 <DIO_Write>
		break;
     d16:	08 95       	ret
	case LED_3:
		DIO_Write(LED_3_GPIO, LED_3_BIT, HIGH);
     d18:	4f ef       	ldi	r20, 0xFF	; 255
     d1a:	60 e8       	ldi	r22, 0x80	; 128
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	01 c1       	rjmp	.+514    	; 0xf22 <DIO_Write>
     d20:	08 95       	ret

00000d22 <Led_Off>:
	}
}

void Led_Off(En_LedNumber_t en_led_id)
{
	switch(en_led_id)
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	59 f0       	breq	.+22     	; 0xd3c <Led_Off+0x1a>
     d26:	28 f0       	brcs	.+10     	; 0xd32 <Led_Off+0x10>
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	69 f0       	breq	.+26     	; 0xd46 <Led_Off+0x24>
     d2c:	83 30       	cpi	r24, 0x03	; 3
     d2e:	81 f0       	breq	.+32     	; 0xd50 <Led_Off+0x2e>
     d30:	08 95       	ret
	{
	case LED_0:
		DIO_Write(LED_0_GPIO, LED_0_BIT, LOW);
     d32:	40 e0       	ldi	r20, 0x00	; 0
     d34:	60 e1       	ldi	r22, 0x10	; 16
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	f4 c0       	rjmp	.+488    	; 0xf22 <DIO_Write>
		break;
     d3a:	08 95       	ret
	case LED_1:
		DIO_Write(LED_1_GPIO, LED_1_BIT, LOW);
     d3c:	40 e0       	ldi	r20, 0x00	; 0
     d3e:	60 e2       	ldi	r22, 0x20	; 32
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	ef c0       	rjmp	.+478    	; 0xf22 <DIO_Write>
		break;
     d44:	08 95       	ret
	case LED_2:
		DIO_Write(LED_2_GPIO, LED_2_BIT, LOW);
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	60 e4       	ldi	r22, 0x40	; 64
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	ea c0       	rjmp	.+468    	; 0xf22 <DIO_Write>
		break;
     d4e:	08 95       	ret
	case LED_3:
		DIO_Write(LED_3_GPIO, LED_3_BIT, LOW);
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	60 e8       	ldi	r22, 0x80	; 128
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	e5 c0       	rjmp	.+458    	; 0xf22 <DIO_Write>
     d58:	08 95       	ret

00000d5a <Led_Toggle>:
	}
}

void Led_Toggle(En_LedNumber_t en_led_id)
{
	switch(en_led_id)
     d5a:	81 30       	cpi	r24, 0x01	; 1
     d5c:	51 f0       	breq	.+20     	; 0xd72 <Led_Toggle+0x18>
     d5e:	28 f0       	brcs	.+10     	; 0xd6a <Led_Toggle+0x10>
     d60:	82 30       	cpi	r24, 0x02	; 2
     d62:	59 f0       	breq	.+22     	; 0xd7a <Led_Toggle+0x20>
     d64:	83 30       	cpi	r24, 0x03	; 3
     d66:	69 f0       	breq	.+26     	; 0xd82 <Led_Toggle+0x28>
     d68:	08 95       	ret
	{
	case LED_0:
		DIO_Toggle(LED_0_GPIO, LED_0_BIT);
     d6a:	60 e1       	ldi	r22, 0x10	; 16
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	58 c1       	rjmp	.+688    	; 0x1020 <DIO_Toggle>
		break;
     d70:	08 95       	ret
	case LED_1:
		DIO_Toggle(LED_1_GPIO, LED_1_BIT);
     d72:	60 e2       	ldi	r22, 0x20	; 32
     d74:	81 e0       	ldi	r24, 0x01	; 1
     d76:	54 c1       	rjmp	.+680    	; 0x1020 <DIO_Toggle>
		break;
     d78:	08 95       	ret
	case LED_2:
		DIO_Toggle(LED_2_GPIO, LED_2_BIT);
     d7a:	60 e4       	ldi	r22, 0x40	; 64
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	50 c1       	rjmp	.+672    	; 0x1020 <DIO_Toggle>
		break;
	case LED_3:
		DIO_Toggle(LED_3_GPIO, LED_3_BIT);
     d80:	08 95       	ret
     d82:	60 e8       	ldi	r22, 0x80	; 128
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	4c c1       	rjmp	.+664    	; 0x1020 <DIO_Toggle>
     d88:	08 95       	ret

00000d8a <pushButtonInit>:
#include "pushButton.h"
ERROR_STATUS pushButtonInit(uint8_t en_butotn_id)
{
     d8a:	cf 93       	push	r28
     d8c:	df 93       	push	r29
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <pushButtonInit+0x6>
     d90:	1f 92       	push	r1
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATUS ERR = E_OK;
	DIO_Cfg_s btn;

	switch(en_butotn_id){
     d96:	88 23       	and	r24, r24
     d98:	19 f0       	breq	.+6      	; 0xda0 <pushButtonInit+0x16>
     d9a:	81 30       	cpi	r24, 0x01	; 1
     d9c:	39 f0       	breq	.+14     	; 0xdac <pushButtonInit+0x22>
     d9e:	0b c0       	rjmp	.+22     	; 0xdb6 <pushButtonInit+0x2c>
		case BTN_0:
		btn.GPIO = BTN_0_GPIO;
     da0:	82 e0       	ldi	r24, 0x02	; 2
     da2:	89 83       	std	Y+1, r24	; 0x01
		btn.pins = BIT4;
     da4:	80 e1       	ldi	r24, 0x10	; 16
     da6:	8a 83       	std	Y+2, r24	; 0x02
		btn.dir = INPUT;
     da8:	1b 82       	std	Y+3, r1	; 0x03
		break;
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <pushButtonInit+0x2c>
		case BTN_1:
		btn.GPIO = BTN_1_GPIO;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	89 83       	std	Y+1, r24	; 0x01
		btn.pins = BTN_1_BIT;
     db0:	84 e0       	ldi	r24, 0x04	; 4
     db2:	8a 83       	std	Y+2, r24	; 0x02
		btn.dir = INPUT;
     db4:	1b 82       	std	Y+3, r1	; 0x03
		break;
		default:
		break;
	}
	DIO_init (&btn);
     db6:	ce 01       	movw	r24, r28
     db8:	01 96       	adiw	r24, 0x01	; 1
     dba:	52 d0       	rcall	.+164    	; 0xe60 <DIO_init>
	DIO_Write(btn.GPIO,btn.pins,HIGH);
     dbc:	4f ef       	ldi	r20, 0xFF	; 255
     dbe:	6a 81       	ldd	r22, Y+2	; 0x02
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	af d0       	rcall	.+350    	; 0xf22 <DIO_Write>
	return ERR;
}
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	08 95       	ret

00000dd2 <pushButtonGetStatus>:


ERROR_STATUS pushButtonGetStatus(uint8_t BTN , uint8_t * au8_button_status)
{
	uint8_t status = E_OK;
	switch(BTN){
     dd2:	88 23       	and	r24, r24
     dd4:	19 f0       	breq	.+6      	; 0xddc <pushButtonGetStatus+0xa>
     dd6:	81 30       	cpi	r24, 0x01	; 1
     dd8:	39 f0       	breq	.+14     	; 0xde8 <pushButtonGetStatus+0x16>
     dda:	0c c0       	rjmp	.+24     	; 0xdf4 <pushButtonGetStatus+0x22>
		case BTN_0:
		DIO_Read( BTN_0_GPIO, BTN_0_BIT, au8_button_status);
     ddc:	ab 01       	movw	r20, r22
     dde:	64 e0       	ldi	r22, 0x04	; 4
     de0:	82 e0       	ldi	r24, 0x02	; 2
     de2:	ed d0       	rcall	.+474    	; 0xfbe <DIO_Read>
}


ERROR_STATUS pushButtonGetStatus(uint8_t BTN , uint8_t * au8_button_status)
{
	uint8_t status = E_OK;
     de4:	80 e0       	ldi	r24, 0x00	; 0
	switch(BTN){
		case BTN_0:
		DIO_Read( BTN_0_GPIO, BTN_0_BIT, au8_button_status);
		break;
     de6:	08 95       	ret
		case BTN_1:
		DIO_Read( BTN_1_GPIO, BTN_1_BIT, au8_button_status);
     de8:	ab 01       	movw	r20, r22
     dea:	64 e0       	ldi	r22, 0x04	; 4
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	e7 d0       	rcall	.+462    	; 0xfbe <DIO_Read>
}


ERROR_STATUS pushButtonGetStatus(uint8_t BTN , uint8_t * au8_button_status)
{
	uint8_t status = E_OK;
     df0:	80 e0       	ldi	r24, 0x00	; 0
		case BTN_0:
		DIO_Read( BTN_0_GPIO, BTN_0_BIT, au8_button_status);
		break;
		case BTN_1:
		DIO_Read( BTN_1_GPIO, BTN_1_BIT, au8_button_status);
		break;
     df2:	08 95       	ret
		default:
		status = E_NOK;
     df4:	81 e0       	ldi	r24, 0x01	; 1
	 		au8_button_status = Pressed;
	 	}else{
			au8_button_status = Released;
	 	}
	return status;
     df6:	08 95       	ret

00000df8 <vOtherFunction>:



/* Function that creates a task. */
void vOtherFunction( void )
{
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	00 d0       	rcall	.+0      	; 0xe04 <vOtherFunction+0xc>
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62

TaskHandle_t xHandle = NULL;
     e08:	1a 82       	std	Y+2, r1	; 0x02
     e0a:	19 82       	std	Y+1, r1	; 0x01

    /* Create the task, storing the handle. */
    xTaskCreate(
     e0c:	ce 01       	movw	r24, r28
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	7c 01       	movw	r14, r24
     e12:	00 e0       	ldi	r16, 0x00	; 0
     e14:	21 e0       	ldi	r18, 0x01	; 1
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	44 e6       	ldi	r20, 0x64	; 100
     e1a:	50 e0       	ldi	r21, 0x00	; 0
     e1c:	65 e6       	ldi	r22, 0x65	; 101
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	86 e4       	ldi	r24, 0x46	; 70
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	31 dc       	rcall	.-1950   	; 0x688 <xTaskCreate>
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    ( void * ) 1,    /* Parameter passed into the task. */
                    tskIDLE_PRIORITY,/* Priority at which the task is created. */
                    &xHandle );      /* Used to pass out the created task's handle. */

 xTaskCreate(
     e26:	21 e0       	ldi	r18, 0x01	; 1
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	44 e6       	ldi	r20, 0x64	; 100
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	6a e6       	ldi	r22, 0x6A	; 106
     e30:	70 e0       	ldi	r23, 0x00	; 0
     e32:	81 e5       	ldi	r24, 0x51	; 81
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	28 dc       	rcall	.-1968   	; 0x688 <xTaskCreate>
 STACK_SIZE,      /* Stack size in words, not bytes. */
 ( void * ) 1,    /* Parameter passed into the task. */
 tskIDLE_PRIORITY,/* Priority at which the task is created. */
 &xHandle );      /* Used to pass out the created task's handle. */

xTaskCreate(
     e38:	21 e0       	ldi	r18, 0x01	; 1
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	44 e6       	ldi	r20, 0x64	; 100
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	6f e6       	ldi	r22, 0x6F	; 111
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	8b e8       	ldi	r24, 0x8B	; 139
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	1f dc       	rcall	.-1986   	; 0x688 <xTaskCreate>
"toggelled",          /* Text name for the task. */
STACK_SIZE,      /* Stack size in words, not bytes. */
( void * ) 1,    /* Parameter passed into the task. */
tskIDLE_PRIORITY,/* Priority at which the task is created. */
&xHandle );
}
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	0f 91       	pop	r16
     e54:	ff 90       	pop	r15
     e56:	ef 90       	pop	r14
     e58:	08 95       	ret

00000e5a <main>:
void vOtherFunction(void);
void vTaskCode( void * pvParameters );
int main(void)
{
     /*create tasks*/
	 vOtherFunction();
     e5a:	ce df       	rcall	.-100    	; 0xdf8 <vOtherFunction>
	/*start scheduler*/
	vTaskStartScheduler();
     e5c:	5d dd       	rcall	.-1350   	; 0x918 <vTaskStartScheduler>
     e5e:	ff cf       	rjmp	.-2      	; 0xe5e <main+0x4>

00000e60 <DIO_init>:
     e60:	fc 01       	movw	r30, r24
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 /*check if the pointer is not null*/  
   if(DIO_info!=NULL)
     e62:	89 2b       	or	r24, r25
     e64:	09 f4       	brne	.+2      	; 0xe68 <DIO_init+0x8>
     e66:	51 c0       	rjmp	.+162    	; 0xf0a <DIO_init+0xaa>
   {
 /*choose any PORT*/ 
      switch(DIO_info->GPIO)
     e68:	80 81       	ld	r24, Z
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	c1 f0       	breq	.+48     	; 0xe9e <DIO_init+0x3e>
     e6e:	28 f0       	brcs	.+10     	; 0xe7a <DIO_init+0x1a>
     e70:	82 30       	cpi	r24, 0x02	; 2
     e72:	39 f1       	breq	.+78     	; 0xec2 <DIO_init+0x62>
     e74:	83 30       	cpi	r24, 0x03	; 3
     e76:	b9 f1       	breq	.+110    	; 0xee6 <DIO_init+0x86>
     e78:	4a c0       	rjmp	.+148    	; 0xf0e <DIO_init+0xae>
      {
         case GPIOA:
               if(DIO_info->dir==OUTPUT)
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	8f 3f       	cpi	r24, 0xFF	; 255
     e7e:	31 f4       	brne	.+12     	; 0xe8c <DIO_init+0x2c>
               PORTA_DIR|=(DIO_info->pins);
     e80:	9a b3       	in	r25, 0x1a	; 26
     e82:	81 81       	ldd	r24, Z+1	; 0x01
     e84:	89 2b       	or	r24, r25
     e86:	8a bb       	out	0x1a, r24	; 26
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	08 95       	ret
      switch(DIO_info->GPIO)
      {
         case GPIOA:
               if(DIO_info->dir==OUTPUT)
               PORTA_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
     e8c:	81 11       	cpse	r24, r1
     e8e:	41 c0       	rjmp	.+130    	; 0xf12 <DIO_init+0xb2>
               PORTA_DIR&=~(DIO_info->pins);
     e90:	9a b3       	in	r25, 0x1a	; 26
     e92:	81 81       	ldd	r24, Z+1	; 0x01
     e94:	80 95       	com	r24
     e96:	89 23       	and	r24, r25
     e98:	8a bb       	out	0x1a, r24	; 26
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	08 95       	ret
               PORTA_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
               break;
         case GPIOB:
               if(DIO_info->dir==OUTPUT)
     e9e:	82 81       	ldd	r24, Z+2	; 0x02
     ea0:	8f 3f       	cpi	r24, 0xFF	; 255
     ea2:	31 f4       	brne	.+12     	; 0xeb0 <DIO_init+0x50>
               PORTB_DIR|=(DIO_info->pins);
     ea4:	97 b3       	in	r25, 0x17	; 23
     ea6:	81 81       	ldd	r24, Z+1	; 0x01
     ea8:	89 2b       	or	r24, r25
     eaa:	87 bb       	out	0x17, r24	; 23
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	08 95       	ret
               EROR=E_NOK;
               break;
         case GPIOB:
               if(DIO_info->dir==OUTPUT)
               PORTB_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
     eb0:	81 11       	cpse	r24, r1
     eb2:	31 c0       	rjmp	.+98     	; 0xf16 <DIO_init+0xb6>
               PORTB_DIR&=~(DIO_info->pins);
     eb4:	97 b3       	in	r25, 0x17	; 23
     eb6:	81 81       	ldd	r24, Z+1	; 0x01
     eb8:	80 95       	com	r24
     eba:	89 23       	and	r24, r25
     ebc:	87 bb       	out	0x17, r24	; 23
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	08 95       	ret
               PORTB_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
               break;
         case GPIOC:
               if(DIO_info->dir==OUTPUT)
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	8f 3f       	cpi	r24, 0xFF	; 255
     ec6:	31 f4       	brne	.+12     	; 0xed4 <DIO_init+0x74>
               PORTC_DIR|=(DIO_info->pins);
     ec8:	94 b3       	in	r25, 0x14	; 20
     eca:	81 81       	ldd	r24, Z+1	; 0x01
     ecc:	89 2b       	or	r24, r25
     ece:	84 bb       	out	0x14, r24	; 20
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	08 95       	ret
               EROR=E_NOK;
               break;
         case GPIOC:
               if(DIO_info->dir==OUTPUT)
               PORTC_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
     ed4:	81 11       	cpse	r24, r1
     ed6:	21 c0       	rjmp	.+66     	; 0xf1a <DIO_init+0xba>
               PORTC_DIR&=~(DIO_info->pins);
     ed8:	94 b3       	in	r25, 0x14	; 20
     eda:	81 81       	ldd	r24, Z+1	; 0x01
     edc:	80 95       	com	r24
     ede:	89 23       	and	r24, r25
     ee0:	84 bb       	out	0x14, r24	; 20
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
     ee2:	80 e0       	ldi	r24, 0x00	; 0
     ee4:	08 95       	ret
               PORTC_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
               break;
         case GPIOD:
               if(DIO_info->dir==OUTPUT)
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	8f 3f       	cpi	r24, 0xFF	; 255
     eea:	31 f4       	brne	.+12     	; 0xef8 <DIO_init+0x98>
               PORTD_DIR|=(DIO_info->pins);
     eec:	91 b3       	in	r25, 0x11	; 17
     eee:	81 81       	ldd	r24, Z+1	; 0x01
     ef0:	89 2b       	or	r24, r25
     ef2:	81 bb       	out	0x11, r24	; 17
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	08 95       	ret
               EROR=E_NOK;
               break;
         case GPIOD:
               if(DIO_info->dir==OUTPUT)
               PORTD_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
     ef8:	81 11       	cpse	r24, r1
     efa:	11 c0       	rjmp	.+34     	; 0xf1e <DIO_init+0xbe>
               PORTD_DIR&=~(DIO_info->pins);
     efc:	91 b3       	in	r25, 0x11	; 17
     efe:	81 81       	ldd	r24, Z+1	; 0x01
     f00:	80 95       	com	r24
     f02:	89 23       	and	r24, r25
     f04:	81 bb       	out	0x11, r24	; 17
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	08 95       	ret
         
      }   
   }
   else
   {
      EROR=E_NOK;
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	08 95       	ret
               PORTD_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
               break;
         default:
               EROR=E_NOK;
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	08 95       	ret
               if(DIO_info->dir==OUTPUT)
               PORTA_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
               PORTA_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	08 95       	ret
               if(DIO_info->dir==OUTPUT)
               PORTB_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
               PORTB_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	08 95       	ret
               if(DIO_info->dir==OUTPUT)
               PORTC_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
               PORTC_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	08 95       	ret
               if(DIO_info->dir==OUTPUT)
               PORTD_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
               PORTD_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
      EROR=E_NOK;
   }
   
   
   return EROR;
}
     f20:	08 95       	ret

00000f22 <DIO_Write>:
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
  /*choose any PORT*/  
   switch (GPIO)
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	a9 f0       	breq	.+42     	; 0xf50 <DIO_Write+0x2e>
     f26:	28 f0       	brcs	.+10     	; 0xf32 <DIO_Write+0x10>
     f28:	82 30       	cpi	r24, 0x02	; 2
     f2a:	09 f1       	breq	.+66     	; 0xf6e <DIO_Write+0x4c>
     f2c:	83 30       	cpi	r24, 0x03	; 3
     f2e:	71 f1       	breq	.+92     	; 0xf8c <DIO_Write+0x6a>
     f30:	3c c0       	rjmp	.+120    	; 0xfaa <DIO_Write+0x88>
   {
      case GPIOA:
            if(value==HIGH)
     f32:	4f 3f       	cpi	r20, 0xFF	; 255
     f34:	29 f4       	brne	.+10     	; 0xf40 <DIO_Write+0x1e>
            PORTA_DATA|=pins;
     f36:	8b b3       	in	r24, 0x1b	; 27
     f38:	68 2b       	or	r22, r24
     f3a:	6b bb       	out	0x1b, r22	; 27
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	08 95       	ret
   switch (GPIO)
   {
      case GPIOA:
            if(value==HIGH)
            PORTA_DATA|=pins;
            else if(value==LOW)
     f40:	41 11       	cpse	r20, r1
     f42:	35 c0       	rjmp	.+106    	; 0xfae <DIO_Write+0x8c>
            PORTA_DATA&=~(pins);
     f44:	8b b3       	in	r24, 0x1b	; 27
     f46:	60 95       	com	r22
     f48:	68 23       	and	r22, r24
     f4a:	6b bb       	out	0x1b, r22	; 27
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	08 95       	ret
            PORTA_DATA&=~(pins);
            else
            EROR=E_NOK;
            break;
      case GPIOB:
            if(value==HIGH)
     f50:	4f 3f       	cpi	r20, 0xFF	; 255
     f52:	29 f4       	brne	.+10     	; 0xf5e <DIO_Write+0x3c>
            PORTB_DATA|=pins;
     f54:	88 b3       	in	r24, 0x18	; 24
     f56:	68 2b       	or	r22, r24
     f58:	68 bb       	out	0x18, r22	; 24
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	08 95       	ret
            EROR=E_NOK;
            break;
      case GPIOB:
            if(value==HIGH)
            PORTB_DATA|=pins;
            else if(value==LOW)
     f5e:	41 11       	cpse	r20, r1
     f60:	28 c0       	rjmp	.+80     	; 0xfb2 <DIO_Write+0x90>
            PORTB_DATA&=~(pins);
     f62:	88 b3       	in	r24, 0x18	; 24
     f64:	60 95       	com	r22
     f66:	68 23       	and	r22, r24
     f68:	68 bb       	out	0x18, r22	; 24
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	08 95       	ret
            PORTB_DATA&=~(pins);
            else
            EROR=E_NOK;
            break;
      case GPIOC:
            if(value==HIGH)
     f6e:	4f 3f       	cpi	r20, 0xFF	; 255
     f70:	29 f4       	brne	.+10     	; 0xf7c <DIO_Write+0x5a>
            PORTC_DATA|=pins;
     f72:	85 b3       	in	r24, 0x15	; 21
     f74:	68 2b       	or	r22, r24
     f76:	65 bb       	out	0x15, r22	; 21
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	08 95       	ret
            EROR=E_NOK;
            break;
      case GPIOC:
            if(value==HIGH)
            PORTC_DATA|=pins;
            else if(value==LOW)
     f7c:	41 11       	cpse	r20, r1
     f7e:	1b c0       	rjmp	.+54     	; 0xfb6 <DIO_Write+0x94>
            PORTC_DATA&=~(pins);
     f80:	85 b3       	in	r24, 0x15	; 21
     f82:	60 95       	com	r22
     f84:	68 23       	and	r22, r24
     f86:	65 bb       	out	0x15, r22	; 21
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	08 95       	ret
            PORTC_DATA&=~(pins);
            else
            EROR=E_NOK;
            break;
      case GPIOD:
            if(value==HIGH)
     f8c:	4f 3f       	cpi	r20, 0xFF	; 255
     f8e:	29 f4       	brne	.+10     	; 0xf9a <DIO_Write+0x78>
            PORTD_DATA|=pins;
     f90:	82 b3       	in	r24, 0x12	; 18
     f92:	68 2b       	or	r22, r24
     f94:	62 bb       	out	0x12, r22	; 18
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	08 95       	ret
            EROR=E_NOK;
            break;
      case GPIOD:
            if(value==HIGH)
            PORTD_DATA|=pins;
            else if(value==LOW)
     f9a:	41 11       	cpse	r20, r1
     f9c:	0e c0       	rjmp	.+28     	; 0xfba <DIO_Write+0x98>
            PORTD_DATA&=~(pins);
     f9e:	82 b3       	in	r24, 0x12	; 18
     fa0:	60 95       	com	r22
     fa2:	68 23       	and	r22, r24
     fa4:	62 bb       	out	0x12, r22	; 18
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	08 95       	ret
            else
            EROR=E_NOK;
            break;
     /*if the channel is wrong */          
      default:
            EROR=E_NOK;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	08 95       	ret
            if(value==HIGH)
            PORTA_DATA|=pins;
            else if(value==LOW)
            PORTA_DATA&=~(pins);
            else
            EROR=E_NOK;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	08 95       	ret
            if(value==HIGH)
            PORTB_DATA|=pins;
            else if(value==LOW)
            PORTB_DATA&=~(pins);
            else
            EROR=E_NOK;
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	08 95       	ret
            if(value==HIGH)
            PORTC_DATA|=pins;
            else if(value==LOW)
            PORTC_DATA&=~(pins);
            else
            EROR=E_NOK;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	08 95       	ret
            if(value==HIGH)
            PORTD_DATA|=pins;
            else if(value==LOW)
            PORTD_DATA&=~(pins);
            else
            EROR=E_NOK;
     fba:	81 e0       	ldi	r24, 0x01	; 1
            break;
   }


   return EROR;
}
     fbc:	08 95       	ret

00000fbe <DIO_Read>:

ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{  
	ERROR_STATUS aenum_status =   E_OK;
	
		switch(GPIO){
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	81 f0       	breq	.+32     	; 0xfe2 <DIO_Read+0x24>
     fc2:	28 f0       	brcs	.+10     	; 0xfce <DIO_Read+0x10>
     fc4:	82 30       	cpi	r24, 0x02	; 2
     fc6:	b9 f0       	breq	.+46     	; 0xff6 <DIO_Read+0x38>
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	f9 f0       	breq	.+62     	; 0x100a <DIO_Read+0x4c>
     fcc:	27 c0       	rjmp	.+78     	; 0x101c <DIO_Read+0x5e>
			case GPIOA:
			*data = ((PORTA_PIN>>pins)*0x01);
     fce:	89 b3       	in	r24, 0x19	; 25
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <DIO_Read+0x1a>
     fd4:	95 95       	asr	r25
     fd6:	87 95       	ror	r24
     fd8:	6a 95       	dec	r22
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <DIO_Read+0x16>
     fdc:	fa 01       	movw	r30, r20
     fde:	80 83       	st	Z, r24
			break;
     fe0:	1d c0       	rjmp	.+58     	; 0x101c <DIO_Read+0x5e>
			case GPIOB:
			*data = ((PORTB_PIN>>pins)*0x01);
     fe2:	86 b3       	in	r24, 0x16	; 22
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <DIO_Read+0x2e>
     fe8:	95 95       	asr	r25
     fea:	87 95       	ror	r24
     fec:	6a 95       	dec	r22
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <DIO_Read+0x2a>
     ff0:	fa 01       	movw	r30, r20
     ff2:	80 83       	st	Z, r24
			break;
     ff4:	13 c0       	rjmp	.+38     	; 0x101c <DIO_Read+0x5e>
			case GPIOC:
			*data = ((PORTC_PIN>>pins)*0x01);
     ff6:	83 b3       	in	r24, 0x13	; 19
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <DIO_Read+0x42>
     ffc:	95 95       	asr	r25
     ffe:	87 95       	ror	r24
    1000:	6a 95       	dec	r22
    1002:	e2 f7       	brpl	.-8      	; 0xffc <DIO_Read+0x3e>
    1004:	fa 01       	movw	r30, r20
    1006:	80 83       	st	Z, r24
			break;
    1008:	09 c0       	rjmp	.+18     	; 0x101c <DIO_Read+0x5e>
			case GPIOD:
			*data = ((PORTD_PIN>>pins)*0x01);
    100a:	80 b3       	in	r24, 0x10	; 16
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_Read+0x56>
    1010:	95 95       	asr	r25
    1012:	87 95       	ror	r24
    1014:	6a 95       	dec	r22
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_Read+0x52>
    1018:	fa 01       	movw	r30, r20
    101a:	80 83       	st	Z, r24
			default:
			break;
		}
	
	return aenum_status;
}
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	08 95       	ret

00001020 <DIO_Toggle>:
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
   
   switch (GPIO)
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	59 f0       	breq	.+22     	; 0x103a <DIO_Toggle+0x1a>
    1024:	28 f0       	brcs	.+10     	; 0x1030 <DIO_Toggle+0x10>
    1026:	82 30       	cpi	r24, 0x02	; 2
    1028:	69 f0       	breq	.+26     	; 0x1044 <DIO_Toggle+0x24>
    102a:	83 30       	cpi	r24, 0x03	; 3
    102c:	81 f0       	breq	.+32     	; 0x104e <DIO_Toggle+0x2e>
    102e:	14 c0       	rjmp	.+40     	; 0x1058 <DIO_Toggle+0x38>
   {
      case GPIOA:
            PORTA_DATA^=pins;
    1030:	8b b3       	in	r24, 0x1b	; 27
    1032:	68 27       	eor	r22, r24
    1034:	6b bb       	out	0x1b, r22	; 27
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
    1036:	80 e0       	ldi	r24, 0x00	; 0
   
   switch (GPIO)
   {
      case GPIOA:
            PORTA_DATA^=pins;
            break;
    1038:	08 95       	ret
      case GPIOB:
            PORTB_DATA^=pins;
    103a:	88 b3       	in	r24, 0x18	; 24
    103c:	68 27       	eor	r22, r24
    103e:	68 bb       	out	0x18, r22	; 24
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
    1040:	80 e0       	ldi	r24, 0x00	; 0
      case GPIOA:
            PORTA_DATA^=pins;
            break;
      case GPIOB:
            PORTB_DATA^=pins;
            break;
    1042:	08 95       	ret
      case GPIOC:
           PORTC_DATA^=pins;
    1044:	85 b3       	in	r24, 0x15	; 21
    1046:	68 27       	eor	r22, r24
    1048:	65 bb       	out	0x15, r22	; 21
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
    104a:	80 e0       	ldi	r24, 0x00	; 0
      case GPIOB:
            PORTB_DATA^=pins;
            break;
      case GPIOC:
           PORTC_DATA^=pins;
           break;
    104c:	08 95       	ret
      case GPIOD:
          PORTD_DATA^=pins;
    104e:	82 b3       	in	r24, 0x12	; 18
    1050:	68 27       	eor	r22, r24
    1052:	62 bb       	out	0x12, r22	; 18
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
    1054:	80 e0       	ldi	r24, 0x00	; 0
      case GPIOC:
           PORTC_DATA^=pins;
           break;
      case GPIOD:
          PORTD_DATA^=pins;
          break;
    1056:	08 95       	ret
      default:
          EROR=E_NOK;
    1058:	81 e0       	ldi	r24, 0x01	; 1
   }


   return EROR;
   
    105a:	08 95       	ret

0000105c <_exit>:
    105c:	f8 94       	cli

0000105e <__stop_program>:
    105e:	ff cf       	rjmp	.-2      	; 0x105e <__stop_program>
