
story3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ffc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000ffc  00001090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000064d  0080007a  0080007a  000010aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001118  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003318  00000000  00000000  00001408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001090  00000000  00000000  00004720  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c5b  00000000  00000000  000057b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007dc  00000000  00000000  0000840c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000cb1c  00000000  00000000  00008be8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002be3  00000000  00000000  00015704  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  000182e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000393e  00000000  00000000  0001858f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	77 c2       	rjmp	.+1262   	; 0x50c <__vector_7>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	26 e0       	ldi	r18, 0x06	; 6
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3c       	cpi	r26, 0xC7	; 199
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	cb d6       	rcall	.+3478   	; 0xe1e <main>
  88:	b7 c7       	rjmp	.+3950   	; 0xff8 <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <UserStoryThreeInit>:
	Led_Off(LED_0);
	else
	Led_On(LED_0);
	
	vTaskDelay(50);
	}
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	63 d6       	rcall	.+3270   	; 0xd56 <pushButtonInit>
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	fb d5       	rcall	.+3062   	; 0xc8a <Led_Init>
  94:	f5 d5       	rcall	.+3050   	; 0xc80 <xTaskGetCurrentTaskHandle>
  96:	f4 c3       	rjmp	.+2024   	; 0x880 <vTaskDelete>
  98:	08 95       	ret

0000009a <Pushbuttomtask>:




void Pushbuttomtask(void)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	1f 92       	push	r1
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
/*Variable to store the push button status in*/
	uint8_t u8_PushButtonStatus = Released;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	89 83       	std	Y+1, r24	; 0x01
		}

		/*if the button is released after being pressed set the "ready flag" for the led toggle task*/
		if ((u8_PushButtonStatus) && (su32_Counter > INITIAL_COUNT))
		{
			gu8_LedToggleTaskReady = TRUE;
  a8:	11 e0       	ldi	r17, 0x01	; 1
		}

		/*If the button is pressed again reset the counter to count the pressing time again*/
		if (u8_PushButtonStatus == Pressed && gu8_LedToggleTaskReady)
		{
			su32_Counter = INITIAL_COUNT;
  aa:	cc 24       	eor	r12, r12
  ac:	ca 94       	dec	r12
  ae:	dc 2c       	mov	r13, r12
  b0:	76 01       	movw	r14, r12
	uint8_t u8_PushButtonStatus = Released;

	while(1)
	{
		/*Get the push button status*/
		pushButtonGetStatus(BTN_0,&u8_PushButtonStatus);
  b2:	be 01       	movw	r22, r28
  b4:	6f 5f       	subi	r22, 0xFF	; 255
  b6:	7f 4f       	sbci	r23, 0xFF	; 255
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	70 d6       	rcall	.+3296   	; 0xd9c <pushButtonGetStatus>

		/*Check the push button status if it is pressed increment the counter by 1
		and since this task's periodicity is 1 ms so each counter incrementation represents
		1 Milli second press on the button*/
		if (u8_PushButtonStatus == Pressed )
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	81 11       	cpse	r24, r1
  c0:	22 c0       	rjmp	.+68     	; 0x106 <Pushbuttomtask+0x6c>
		{
			su32_Counter++;
  c2:	80 91 c1 06 	lds	r24, 0x06C1	; 0x8006c1 <su32_Counter>
  c6:	90 91 c2 06 	lds	r25, 0x06C2	; 0x8006c2 <su32_Counter+0x1>
  ca:	a0 91 c3 06 	lds	r26, 0x06C3	; 0x8006c3 <su32_Counter+0x2>
  ce:	b0 91 c4 06 	lds	r27, 0x06C4	; 0x8006c4 <su32_Counter+0x3>
  d2:	01 96       	adiw	r24, 0x01	; 1
  d4:	a1 1d       	adc	r26, r1
  d6:	b1 1d       	adc	r27, r1
  d8:	80 93 c1 06 	sts	0x06C1, r24	; 0x8006c1 <su32_Counter>
  dc:	90 93 c2 06 	sts	0x06C2, r25	; 0x8006c2 <su32_Counter+0x1>
  e0:	a0 93 c3 06 	sts	0x06C3, r26	; 0x8006c3 <su32_Counter+0x2>
  e4:	b0 93 c4 06 	sts	0x06C4, r27	; 0x8006c4 <su32_Counter+0x3>
		}

		/*If the button is pressed again reset the counter to count the pressing time again*/
		if (u8_PushButtonStatus == Pressed && gu8_LedToggleTaskReady)
  e8:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <gu8_LedToggleTaskReady>
  ec:	88 23       	and	r24, r24
  ee:	b9 f0       	breq	.+46     	; 0x11e <Pushbuttomtask+0x84>
		{
			su32_Counter = INITIAL_COUNT;
  f0:	c0 92 c1 06 	sts	0x06C1, r12	; 0x8006c1 <su32_Counter>
  f4:	d0 92 c2 06 	sts	0x06C2, r13	; 0x8006c2 <su32_Counter+0x1>
  f8:	e0 92 c3 06 	sts	0x06C3, r14	; 0x8006c3 <su32_Counter+0x2>
  fc:	f0 92 c4 06 	sts	0x06C4, r15	; 0x8006c4 <su32_Counter+0x3>
			gu8_LedToggleTaskReady = FALSE;
 100:	10 92 c6 06 	sts	0x06C6, r1	; 0x8006c6 <gu8_LedToggleTaskReady>
 104:	0c c0       	rjmp	.+24     	; 0x11e <Pushbuttomtask+0x84>
		}

		/*if the button is released after being pressed set the "ready flag" for the led toggle task*/
		if ((u8_PushButtonStatus) && (su32_Counter > INITIAL_COUNT))
 106:	80 91 c1 06 	lds	r24, 0x06C1	; 0x8006c1 <su32_Counter>
 10a:	90 91 c2 06 	lds	r25, 0x06C2	; 0x8006c2 <su32_Counter+0x1>
 10e:	a0 91 c3 06 	lds	r26, 0x06C3	; 0x8006c3 <su32_Counter+0x2>
 112:	b0 91 c4 06 	lds	r27, 0x06C4	; 0x8006c4 <su32_Counter+0x3>
 116:	bb 23       	and	r27, r27
 118:	14 f0       	brlt	.+4      	; 0x11e <Pushbuttomtask+0x84>
		{
			gu8_LedToggleTaskReady = TRUE;
 11a:	10 93 c6 06 	sts	0x06C6, r17	; 0x8006c6 <gu8_LedToggleTaskReady>
		}

		/*delay for 1 Milli second*/
		vTaskDelay(BUTTON_TASK_DELAY);
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	38 d5       	rcall	.+2672   	; 0xb94 <vTaskDelay>
	}
 124:	c6 cf       	rjmp	.-116    	; 0xb2 <Pushbuttomtask+0x18>

00000126 <ledtask>:


void ledtask(void)
{
	
uint16_t u16_LedTaskDelay = LED_TOG_TASK_NO_DELAY;
 126:	d1 e0       	ldi	r29, 0x01	; 1
 128:	c0 e0       	ldi	r28, 0x00	; 0

		/*if the button is pressed more than 4000 Milli seconds toggle the led with 100ms periodicity*/
		else if (su32_Counter>MAXIMUM_BUTTON_PRESS)
		{
			Led_Toggle(LED_0);
			u16_LedTaskDelay = LED_TOG_TASK_100ms_DELAY;
 12a:	0f 2e       	mov	r0, r31
 12c:	f4 e6       	ldi	r31, 0x64	; 100
 12e:	ef 2e       	mov	r14, r31
 130:	f0 2d       	mov	r31, r0
 132:	f1 2c       	mov	r15, r1

		/*if the button is pressed more than 2000 and less than 4000 Milli seconds toggle the led with 400ms periodicity*/
		else if (su32_Counter>MINIMUM_BUTTON_PRESS && su32_Counter<=MAXIMUM_BUTTON_PRESS)
		{
			Led_Toggle(LED_0);
			u16_LedTaskDelay = LED_TOG_TASK_400ms_DELAY;
 134:	00 e9       	ldi	r16, 0x90	; 144
 136:	11 e0       	ldi	r17, 0x01	; 1
	
uint16_t u16_LedTaskDelay = LED_TOG_TASK_NO_DELAY;
while(1)
{
	/*check the "ready flag"*/
	if (gu8_LedToggleTaskReady)
 138:	80 91 c6 06 	lds	r24, 0x06C6	; 0x8006c6 <gu8_LedToggleTaskReady>
 13c:	88 23       	and	r24, r24
 13e:	51 f1       	breq	.+84     	; 0x194 <ledtask+0x6e>
	{
		/*if the button is pressed less than 2000 Milli seconds switch the LED off*/
		if (su32_Counter<=MINIMUM_BUTTON_PRESS)
 140:	80 91 c1 06 	lds	r24, 0x06C1	; 0x8006c1 <su32_Counter>
 144:	90 91 c2 06 	lds	r25, 0x06C2	; 0x8006c2 <su32_Counter+0x1>
 148:	a0 91 c3 06 	lds	r26, 0x06C3	; 0x8006c3 <su32_Counter+0x2>
 14c:	b0 91 c4 06 	lds	r27, 0x06C4	; 0x8006c4 <su32_Counter+0x3>
 150:	81 3d       	cpi	r24, 0xD1	; 209
 152:	27 e0       	ldi	r18, 0x07	; 7
 154:	92 07       	cpc	r25, r18
 156:	a1 05       	cpc	r26, r1
 158:	b1 05       	cpc	r27, r1
 15a:	1c f4       	brge	.+6      	; 0x162 <ledtask+0x3c>
		{
			Led_Off(LED_0);
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	c7 d5       	rcall	.+2958   	; 0xcee <Led_Off>
 160:	19 c0       	rjmp	.+50     	; 0x194 <ledtask+0x6e>
		}

		/*if the button is pressed more than 2000 and less than 4000 Milli seconds toggle the led with 400ms periodicity*/
		else if (su32_Counter>MINIMUM_BUTTON_PRESS && su32_Counter<=MAXIMUM_BUTTON_PRESS)
 162:	ac 01       	movw	r20, r24
 164:	bd 01       	movw	r22, r26
 166:	41 5d       	subi	r20, 0xD1	; 209
 168:	57 40       	sbci	r21, 0x07	; 7
 16a:	61 09       	sbc	r22, r1
 16c:	71 09       	sbc	r23, r1
 16e:	40 3d       	cpi	r20, 0xD0	; 208
 170:	57 40       	sbci	r21, 0x07	; 7
 172:	61 05       	cpc	r22, r1
 174:	71 05       	cpc	r23, r1
 176:	28 f4       	brcc	.+10     	; 0x182 <ledtask+0x5c>
		{
			Led_Toggle(LED_0);
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	d5 d5       	rcall	.+2986   	; 0xd26 <Led_Toggle>
			u16_LedTaskDelay = LED_TOG_TASK_400ms_DELAY;
 17c:	d0 2f       	mov	r29, r16
 17e:	c1 2f       	mov	r28, r17
 180:	09 c0       	rjmp	.+18     	; 0x194 <ledtask+0x6e>
		}

		/*if the button is pressed more than 4000 Milli seconds toggle the led with 100ms periodicity*/
		else if (su32_Counter>MAXIMUM_BUTTON_PRESS)
 182:	81 3a       	cpi	r24, 0xA1	; 161
 184:	9f 40       	sbci	r25, 0x0F	; 15
 186:	a1 05       	cpc	r26, r1
 188:	b1 05       	cpc	r27, r1
		{
			Led_Toggle(LED_0);
 18a:	24 f0       	brlt	.+8      	; 0x194 <ledtask+0x6e>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	cb d5       	rcall	.+2966   	; 0xd26 <Led_Toggle>
			u16_LedTaskDelay = LED_TOG_TASK_100ms_DELAY;
 190:	de 2d       	mov	r29, r14
		}

	}

	vTaskDelay(u16_LedTaskDelay);
 192:	cf 2d       	mov	r28, r15
 194:	8d 2f       	mov	r24, r29
 196:	9c 2f       	mov	r25, r28
 198:	fd d4       	rcall	.+2554   	; 0xb94 <vTaskDelay>
}
 19a:	ce cf       	rjmp	.-100    	; 0x138 <ledtask+0x12>

0000019c <pvPortMalloc>:
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	ec 01       	movw	r28, r24
 1a2:	e4 d3       	rcall	.+1992   	; 0x96c <vTaskSuspendAll>
 1a4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 1a8:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 1ac:	89 2b       	or	r24, r25
 1ae:	31 f4       	brne	.+12     	; 0x1bc <pvPortMalloc+0x20>
 1b0:	8f e7       	ldi	r24, 0x7F	; 127
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 1b8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
 1bc:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <xNextFreeByte>
 1c0:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <xNextFreeByte+0x1>
 1c4:	c9 01       	movw	r24, r18
 1c6:	8c 0f       	add	r24, r28
 1c8:	9d 1f       	adc	r25, r29
 1ca:	8b 3d       	cpi	r24, 0xDB	; 219
 1cc:	45 e0       	ldi	r20, 0x05	; 5
 1ce:	94 07       	cpc	r25, r20
 1d0:	70 f4       	brcc	.+28     	; 0x1ee <pvPortMalloc+0x52>
 1d2:	28 17       	cp	r18, r24
 1d4:	39 07       	cpc	r19, r25
 1d6:	70 f4       	brcc	.+28     	; 0x1f4 <pvPortMalloc+0x58>
 1d8:	c0 91 7a 00 	lds	r28, 0x007A	; 0x80007a <__data_end>
 1dc:	d0 91 7b 00 	lds	r29, 0x007B	; 0x80007b <__data_end+0x1>
 1e0:	c2 0f       	add	r28, r18
 1e2:	d3 1f       	adc	r29, r19
 1e4:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <xNextFreeByte+0x1>
 1e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <xNextFreeByte>
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <pvPortMalloc+0x5c>
 1ee:	c0 e0       	ldi	r28, 0x00	; 0
 1f0:	d0 e0       	ldi	r29, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <pvPortMalloc+0x5c>
 1f4:	c0 e0       	ldi	r28, 0x00	; 0
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
 1f8:	5b d4       	rcall	.+2230   	; 0xab0 <xTaskResumeAll>
 1fa:	ce 01       	movw	r24, r28
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <vPortFree>:
 202:	08 95       	ret

00000204 <vListInitialise>:
 204:	fc 01       	movw	r30, r24
 206:	03 96       	adiw	r24, 0x03	; 3
 208:	92 83       	std	Z+2, r25	; 0x02
 20a:	81 83       	std	Z+1, r24	; 0x01
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	3f ef       	ldi	r19, 0xFF	; 255
 210:	34 83       	std	Z+4, r19	; 0x04
 212:	23 83       	std	Z+3, r18	; 0x03
 214:	96 83       	std	Z+6, r25	; 0x06
 216:	85 83       	std	Z+5, r24	; 0x05
 218:	90 87       	std	Z+8, r25	; 0x08
 21a:	87 83       	std	Z+7, r24	; 0x07
 21c:	10 82       	st	Z, r1
 21e:	08 95       	ret

00000220 <vListInitialiseItem>:
 220:	fc 01       	movw	r30, r24
 222:	11 86       	std	Z+9, r1	; 0x09
 224:	10 86       	std	Z+8, r1	; 0x08
 226:	08 95       	ret

00000228 <vListInsertEnd>:
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	9c 01       	movw	r18, r24
 22e:	fb 01       	movw	r30, r22
 230:	dc 01       	movw	r26, r24
 232:	11 96       	adiw	r26, 0x01	; 1
 234:	cd 91       	ld	r28, X+
 236:	dc 91       	ld	r29, X
 238:	12 97       	sbiw	r26, 0x02	; 2
 23a:	d3 83       	std	Z+3, r29	; 0x03
 23c:	c2 83       	std	Z+2, r28	; 0x02
 23e:	8c 81       	ldd	r24, Y+4	; 0x04
 240:	9d 81       	ldd	r25, Y+5	; 0x05
 242:	95 83       	std	Z+5, r25	; 0x05
 244:	84 83       	std	Z+4, r24	; 0x04
 246:	8c 81       	ldd	r24, Y+4	; 0x04
 248:	9d 81       	ldd	r25, Y+5	; 0x05
 24a:	dc 01       	movw	r26, r24
 24c:	13 96       	adiw	r26, 0x03	; 3
 24e:	7c 93       	st	X, r23
 250:	6e 93       	st	-X, r22
 252:	12 97       	sbiw	r26, 0x02	; 2
 254:	7d 83       	std	Y+5, r23	; 0x05
 256:	6c 83       	std	Y+4, r22	; 0x04
 258:	31 87       	std	Z+9, r19	; 0x09
 25a:	20 87       	std	Z+8, r18	; 0x08
 25c:	f9 01       	movw	r30, r18
 25e:	80 81       	ld	r24, Z
 260:	8f 5f       	subi	r24, 0xFF	; 255
 262:	80 83       	st	Z, r24
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	08 95       	ret

0000026a <vListInsert>:
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	eb 01       	movw	r28, r22
 270:	48 81       	ld	r20, Y
 272:	59 81       	ldd	r21, Y+1	; 0x01
 274:	4f 3f       	cpi	r20, 0xFF	; 255
 276:	2f ef       	ldi	r18, 0xFF	; 255
 278:	52 07       	cpc	r21, r18
 27a:	21 f4       	brne	.+8      	; 0x284 <vListInsert+0x1a>
 27c:	fc 01       	movw	r30, r24
 27e:	a7 81       	ldd	r26, Z+7	; 0x07
 280:	b0 85       	ldd	r27, Z+8	; 0x08
 282:	0d c0       	rjmp	.+26     	; 0x29e <vListInsert+0x34>
 284:	dc 01       	movw	r26, r24
 286:	13 96       	adiw	r26, 0x03	; 3
 288:	01 c0       	rjmp	.+2      	; 0x28c <vListInsert+0x22>
 28a:	df 01       	movw	r26, r30
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	ed 91       	ld	r30, X+
 290:	fc 91       	ld	r31, X
 292:	13 97       	sbiw	r26, 0x03	; 3
 294:	20 81       	ld	r18, Z
 296:	31 81       	ldd	r19, Z+1	; 0x01
 298:	42 17       	cp	r20, r18
 29a:	53 07       	cpc	r21, r19
 29c:	b0 f7       	brcc	.-20     	; 0x28a <vListInsert+0x20>
 29e:	12 96       	adiw	r26, 0x02	; 2
 2a0:	ed 91       	ld	r30, X+
 2a2:	fc 91       	ld	r31, X
 2a4:	13 97       	sbiw	r26, 0x03	; 3
 2a6:	fb 83       	std	Y+3, r31	; 0x03
 2a8:	ea 83       	std	Y+2, r30	; 0x02
 2aa:	d5 83       	std	Z+5, r29	; 0x05
 2ac:	c4 83       	std	Z+4, r28	; 0x04
 2ae:	bd 83       	std	Y+5, r27	; 0x05
 2b0:	ac 83       	std	Y+4, r26	; 0x04
 2b2:	13 96       	adiw	r26, 0x03	; 3
 2b4:	dc 93       	st	X, r29
 2b6:	ce 93       	st	-X, r28
 2b8:	12 97       	sbiw	r26, 0x02	; 2
 2ba:	99 87       	std	Y+9, r25	; 0x09
 2bc:	88 87       	std	Y+8, r24	; 0x08
 2be:	fc 01       	movw	r30, r24
 2c0:	20 81       	ld	r18, Z
 2c2:	2f 5f       	subi	r18, 0xFF	; 255
 2c4:	20 83       	st	Z, r18
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <uxListRemove>:
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	fc 01       	movw	r30, r24
 2d2:	a0 85       	ldd	r26, Z+8	; 0x08
 2d4:	b1 85       	ldd	r27, Z+9	; 0x09
 2d6:	c2 81       	ldd	r28, Z+2	; 0x02
 2d8:	d3 81       	ldd	r29, Z+3	; 0x03
 2da:	84 81       	ldd	r24, Z+4	; 0x04
 2dc:	95 81       	ldd	r25, Z+5	; 0x05
 2de:	9d 83       	std	Y+5, r25	; 0x05
 2e0:	8c 83       	std	Y+4, r24	; 0x04
 2e2:	c4 81       	ldd	r28, Z+4	; 0x04
 2e4:	d5 81       	ldd	r29, Z+5	; 0x05
 2e6:	82 81       	ldd	r24, Z+2	; 0x02
 2e8:	93 81       	ldd	r25, Z+3	; 0x03
 2ea:	9b 83       	std	Y+3, r25	; 0x03
 2ec:	8a 83       	std	Y+2, r24	; 0x02
 2ee:	11 96       	adiw	r26, 0x01	; 1
 2f0:	8d 91       	ld	r24, X+
 2f2:	9c 91       	ld	r25, X
 2f4:	12 97       	sbiw	r26, 0x02	; 2
 2f6:	e8 17       	cp	r30, r24
 2f8:	f9 07       	cpc	r31, r25
 2fa:	31 f4       	brne	.+12     	; 0x308 <uxListRemove+0x3c>
 2fc:	84 81       	ldd	r24, Z+4	; 0x04
 2fe:	95 81       	ldd	r25, Z+5	; 0x05
 300:	12 96       	adiw	r26, 0x02	; 2
 302:	9c 93       	st	X, r25
 304:	8e 93       	st	-X, r24
 306:	11 97       	sbiw	r26, 0x01	; 1
 308:	11 86       	std	Z+9, r1	; 0x09
 30a:	10 86       	std	Z+8, r1	; 0x08
 30c:	8c 91       	ld	r24, X
 30e:	81 50       	subi	r24, 0x01	; 1
 310:	8c 93       	st	X, r24
 312:	8c 91       	ld	r24, X
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <pxPortInitialiseStack>:
 31a:	31 e1       	ldi	r19, 0x11	; 17
 31c:	fc 01       	movw	r30, r24
 31e:	30 83       	st	Z, r19
 320:	31 97       	sbiw	r30, 0x01	; 1
 322:	22 e2       	ldi	r18, 0x22	; 34
 324:	20 83       	st	Z, r18
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	a3 e3       	ldi	r26, 0x33	; 51
 32a:	a0 83       	st	Z, r26
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	60 83       	st	Z, r22
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	70 83       	st	Z, r23
 334:	31 97       	sbiw	r30, 0x01	; 1
 336:	10 82       	st	Z, r1
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	60 e8       	ldi	r22, 0x80	; 128
 33c:	60 83       	st	Z, r22
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	10 82       	st	Z, r1
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	62 e0       	ldi	r22, 0x02	; 2
 346:	60 83       	st	Z, r22
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	63 e0       	ldi	r22, 0x03	; 3
 34c:	60 83       	st	Z, r22
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	64 e0       	ldi	r22, 0x04	; 4
 352:	60 83       	st	Z, r22
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	65 e0       	ldi	r22, 0x05	; 5
 358:	60 83       	st	Z, r22
 35a:	31 97       	sbiw	r30, 0x01	; 1
 35c:	66 e0       	ldi	r22, 0x06	; 6
 35e:	60 83       	st	Z, r22
 360:	31 97       	sbiw	r30, 0x01	; 1
 362:	67 e0       	ldi	r22, 0x07	; 7
 364:	60 83       	st	Z, r22
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	68 e0       	ldi	r22, 0x08	; 8
 36a:	60 83       	st	Z, r22
 36c:	31 97       	sbiw	r30, 0x01	; 1
 36e:	69 e0       	ldi	r22, 0x09	; 9
 370:	60 83       	st	Z, r22
 372:	31 97       	sbiw	r30, 0x01	; 1
 374:	60 e1       	ldi	r22, 0x10	; 16
 376:	60 83       	st	Z, r22
 378:	31 97       	sbiw	r30, 0x01	; 1
 37a:	30 83       	st	Z, r19
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	32 e1       	ldi	r19, 0x12	; 18
 380:	30 83       	st	Z, r19
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	33 e1       	ldi	r19, 0x13	; 19
 386:	30 83       	st	Z, r19
 388:	31 97       	sbiw	r30, 0x01	; 1
 38a:	34 e1       	ldi	r19, 0x14	; 20
 38c:	30 83       	st	Z, r19
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	35 e1       	ldi	r19, 0x15	; 21
 392:	30 83       	st	Z, r19
 394:	31 97       	sbiw	r30, 0x01	; 1
 396:	36 e1       	ldi	r19, 0x16	; 22
 398:	30 83       	st	Z, r19
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	37 e1       	ldi	r19, 0x17	; 23
 39e:	30 83       	st	Z, r19
 3a0:	31 97       	sbiw	r30, 0x01	; 1
 3a2:	38 e1       	ldi	r19, 0x18	; 24
 3a4:	30 83       	st	Z, r19
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	39 e1       	ldi	r19, 0x19	; 25
 3aa:	30 83       	st	Z, r19
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	30 e2       	ldi	r19, 0x20	; 32
 3b0:	30 83       	st	Z, r19
 3b2:	31 97       	sbiw	r30, 0x01	; 1
 3b4:	31 e2       	ldi	r19, 0x21	; 33
 3b6:	30 83       	st	Z, r19
 3b8:	31 97       	sbiw	r30, 0x01	; 1
 3ba:	20 83       	st	Z, r18
 3bc:	31 97       	sbiw	r30, 0x01	; 1
 3be:	23 e2       	ldi	r18, 0x23	; 35
 3c0:	20 83       	st	Z, r18
 3c2:	31 97       	sbiw	r30, 0x01	; 1
 3c4:	40 83       	st	Z, r20
 3c6:	31 97       	sbiw	r30, 0x01	; 1
 3c8:	50 83       	st	Z, r21
 3ca:	31 97       	sbiw	r30, 0x01	; 1
 3cc:	26 e2       	ldi	r18, 0x26	; 38
 3ce:	20 83       	st	Z, r18
 3d0:	31 97       	sbiw	r30, 0x01	; 1
 3d2:	27 e2       	ldi	r18, 0x27	; 39
 3d4:	20 83       	st	Z, r18
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	28 e2       	ldi	r18, 0x28	; 40
 3da:	20 83       	st	Z, r18
 3dc:	31 97       	sbiw	r30, 0x01	; 1
 3de:	29 e2       	ldi	r18, 0x29	; 41
 3e0:	20 83       	st	Z, r18
 3e2:	31 97       	sbiw	r30, 0x01	; 1
 3e4:	20 e3       	ldi	r18, 0x30	; 48
 3e6:	20 83       	st	Z, r18
 3e8:	31 97       	sbiw	r30, 0x01	; 1
 3ea:	21 e3       	ldi	r18, 0x31	; 49
 3ec:	20 83       	st	Z, r18
 3ee:	86 97       	sbiw	r24, 0x26	; 38
 3f0:	08 95       	ret

000003f2 <xPortStartScheduler>:
 3f2:	1b bc       	out	0x2b, r1	; 43
 3f4:	89 ef       	ldi	r24, 0xF9	; 249
 3f6:	8a bd       	out	0x2a, r24	; 42
 3f8:	8b e0       	ldi	r24, 0x0B	; 11
 3fa:	8e bd       	out	0x2e, r24	; 46
 3fc:	89 b7       	in	r24, 0x39	; 57
 3fe:	80 61       	ori	r24, 0x10	; 16
 400:	89 bf       	out	0x39, r24	; 57
 402:	a0 91 be 06 	lds	r26, 0x06BE	; 0x8006be <pxCurrentTCB>
 406:	b0 91 bf 06 	lds	r27, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 40a:	cd 91       	ld	r28, X+
 40c:	cd bf       	out	0x3d, r28	; 61
 40e:	dd 91       	ld	r29, X+
 410:	de bf       	out	0x3e, r29	; 62
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	df 91       	pop	r29
 418:	cf 91       	pop	r28
 41a:	bf 91       	pop	r27
 41c:	af 91       	pop	r26
 41e:	9f 91       	pop	r25
 420:	8f 91       	pop	r24
 422:	7f 91       	pop	r23
 424:	6f 91       	pop	r22
 426:	5f 91       	pop	r21
 428:	4f 91       	pop	r20
 42a:	3f 91       	pop	r19
 42c:	2f 91       	pop	r18
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	df 90       	pop	r13
 438:	cf 90       	pop	r12
 43a:	bf 90       	pop	r11
 43c:	af 90       	pop	r10
 43e:	9f 90       	pop	r9
 440:	8f 90       	pop	r8
 442:	7f 90       	pop	r7
 444:	6f 90       	pop	r6
 446:	5f 90       	pop	r5
 448:	4f 90       	pop	r4
 44a:	3f 90       	pop	r3
 44c:	2f 90       	pop	r2
 44e:	1f 90       	pop	r1
 450:	0f 90       	pop	r0
 452:	0f be       	out	0x3f, r0	; 63
 454:	0f 90       	pop	r0
 456:	08 95       	ret
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	08 95       	ret

0000045c <vPortYield>:
 45c:	0f 92       	push	r0
 45e:	0f b6       	in	r0, 0x3f	; 63
 460:	f8 94       	cli
 462:	0f 92       	push	r0
 464:	1f 92       	push	r1
 466:	11 24       	eor	r1, r1
 468:	2f 92       	push	r2
 46a:	3f 92       	push	r3
 46c:	4f 92       	push	r4
 46e:	5f 92       	push	r5
 470:	6f 92       	push	r6
 472:	7f 92       	push	r7
 474:	8f 92       	push	r8
 476:	9f 92       	push	r9
 478:	af 92       	push	r10
 47a:	bf 92       	push	r11
 47c:	cf 92       	push	r12
 47e:	df 92       	push	r13
 480:	ef 92       	push	r14
 482:	ff 92       	push	r15
 484:	0f 93       	push	r16
 486:	1f 93       	push	r17
 488:	2f 93       	push	r18
 48a:	3f 93       	push	r19
 48c:	4f 93       	push	r20
 48e:	5f 93       	push	r21
 490:	6f 93       	push	r22
 492:	7f 93       	push	r23
 494:	8f 93       	push	r24
 496:	9f 93       	push	r25
 498:	af 93       	push	r26
 49a:	bf 93       	push	r27
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	ef 93       	push	r30
 4a2:	ff 93       	push	r31
 4a4:	a0 91 be 06 	lds	r26, 0x06BE	; 0x8006be <pxCurrentTCB>
 4a8:	b0 91 bf 06 	lds	r27, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 4ac:	0d b6       	in	r0, 0x3d	; 61
 4ae:	0d 92       	st	X+, r0
 4b0:	0e b6       	in	r0, 0x3e	; 62
 4b2:	0d 92       	st	X+, r0
 4b4:	7f d3       	rcall	.+1790   	; 0xbb4 <vTaskSwitchContext>
 4b6:	a0 91 be 06 	lds	r26, 0x06BE	; 0x8006be <pxCurrentTCB>
 4ba:	b0 91 bf 06 	lds	r27, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 4be:	cd 91       	ld	r28, X+
 4c0:	cd bf       	out	0x3d, r28	; 61
 4c2:	dd 91       	ld	r29, X+
 4c4:	de bf       	out	0x3e, r29	; 62
 4c6:	ff 91       	pop	r31
 4c8:	ef 91       	pop	r30
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	bf 91       	pop	r27
 4d0:	af 91       	pop	r26
 4d2:	9f 91       	pop	r25
 4d4:	8f 91       	pop	r24
 4d6:	7f 91       	pop	r23
 4d8:	6f 91       	pop	r22
 4da:	5f 91       	pop	r21
 4dc:	4f 91       	pop	r20
 4de:	3f 91       	pop	r19
 4e0:	2f 91       	pop	r18
 4e2:	1f 91       	pop	r17
 4e4:	0f 91       	pop	r16
 4e6:	ff 90       	pop	r15
 4e8:	ef 90       	pop	r14
 4ea:	df 90       	pop	r13
 4ec:	cf 90       	pop	r12
 4ee:	bf 90       	pop	r11
 4f0:	af 90       	pop	r10
 4f2:	9f 90       	pop	r9
 4f4:	8f 90       	pop	r8
 4f6:	7f 90       	pop	r7
 4f8:	6f 90       	pop	r6
 4fa:	5f 90       	pop	r5
 4fc:	4f 90       	pop	r4
 4fe:	3f 90       	pop	r3
 500:	2f 90       	pop	r2
 502:	1f 90       	pop	r1
 504:	0f 90       	pop	r0
 506:	0f be       	out	0x3f, r0	; 63
 508:	0f 90       	pop	r0
 50a:	08 95       	ret

0000050c <__vector_7>:
 50c:	1f 92       	push	r1
 50e:	0f 92       	push	r0
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	0f 92       	push	r0
 514:	11 24       	eor	r1, r1
 516:	2f 93       	push	r18
 518:	3f 93       	push	r19
 51a:	4f 93       	push	r20
 51c:	5f 93       	push	r21
 51e:	6f 93       	push	r22
 520:	7f 93       	push	r23
 522:	8f 93       	push	r24
 524:	9f 93       	push	r25
 526:	af 93       	push	r26
 528:	bf 93       	push	r27
 52a:	ef 93       	push	r30
 52c:	ff 93       	push	r31
 52e:	24 d2       	rcall	.+1096   	; 0x978 <xTaskIncrementTick>
 530:	ff 91       	pop	r31
 532:	ef 91       	pop	r30
 534:	bf 91       	pop	r27
 536:	af 91       	pop	r26
 538:	9f 91       	pop	r25
 53a:	8f 91       	pop	r24
 53c:	7f 91       	pop	r23
 53e:	6f 91       	pop	r22
 540:	5f 91       	pop	r21
 542:	4f 91       	pop	r20
 544:	3f 91       	pop	r19
 546:	2f 91       	pop	r18
 548:	0f 90       	pop	r0
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	0f 90       	pop	r0
 54e:	1f 90       	pop	r1
 550:	18 95       	reti

00000552 <prvResetNextTaskUnblockTime>:
 552:	e0 91 86 06 	lds	r30, 0x0686	; 0x800686 <pxDelayedTaskList>
 556:	f0 91 87 06 	lds	r31, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
 55a:	80 81       	ld	r24, Z
 55c:	81 11       	cpse	r24, r1
 55e:	07 c0       	rjmp	.+14     	; 0x56e <prvResetNextTaskUnblockTime+0x1c>
 560:	8f ef       	ldi	r24, 0xFF	; 255
 562:	9f ef       	ldi	r25, 0xFF	; 255
 564:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <xNextTaskUnblockTime+0x1>
 568:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xNextTaskUnblockTime>
 56c:	08 95       	ret
 56e:	e0 91 86 06 	lds	r30, 0x0686	; 0x800686 <pxDelayedTaskList>
 572:	f0 91 87 06 	lds	r31, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
 576:	05 80       	ldd	r0, Z+5	; 0x05
 578:	f6 81       	ldd	r31, Z+6	; 0x06
 57a:	e0 2d       	mov	r30, r0
 57c:	06 80       	ldd	r0, Z+6	; 0x06
 57e:	f7 81       	ldd	r31, Z+7	; 0x07
 580:	e0 2d       	mov	r30, r0
 582:	82 81       	ldd	r24, Z+2	; 0x02
 584:	93 81       	ldd	r25, Z+3	; 0x03
 586:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <xNextTaskUnblockTime+0x1>
 58a:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xNextTaskUnblockTime>
 58e:	08 95       	ret

00000590 <prvIdleTask>:
 590:	02 e7       	ldi	r16, 0x72	; 114
 592:	16 e0       	ldi	r17, 0x06	; 6
 594:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <uxDeletedTasksWaitingCleanUp>
 598:	88 23       	and	r24, r24
 59a:	11 f1       	breq	.+68     	; 0x5e0 <prvIdleTask+0x50>
 59c:	0f b6       	in	r0, 0x3f	; 63
 59e:	f8 94       	cli
 5a0:	0f 92       	push	r0
 5a2:	d8 01       	movw	r26, r16
 5a4:	15 96       	adiw	r26, 0x05	; 5
 5a6:	ed 91       	ld	r30, X+
 5a8:	fc 91       	ld	r31, X
 5aa:	16 97       	sbiw	r26, 0x06	; 6
 5ac:	c6 81       	ldd	r28, Z+6	; 0x06
 5ae:	d7 81       	ldd	r29, Z+7	; 0x07
 5b0:	ce 01       	movw	r24, r28
 5b2:	02 96       	adiw	r24, 0x02	; 2
 5b4:	8b de       	rcall	.-746    	; 0x2cc <uxListRemove>
 5b6:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <uxCurrentNumberOfTasks>
 5ba:	81 50       	subi	r24, 0x01	; 1
 5bc:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <uxCurrentNumberOfTasks>
 5c0:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <uxDeletedTasksWaitingCleanUp>
 5c4:	81 50       	subi	r24, 0x01	; 1
 5c6:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <uxDeletedTasksWaitingCleanUp>
 5ca:	0f 90       	pop	r0
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	8f 89       	ldd	r24, Y+23	; 0x17
 5d0:	98 8d       	ldd	r25, Y+24	; 0x18
 5d2:	17 de       	rcall	.-978    	; 0x202 <vPortFree>
 5d4:	ce 01       	movw	r24, r28
 5d6:	15 de       	rcall	.-982    	; 0x202 <vPortFree>
 5d8:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <uxDeletedTasksWaitingCleanUp>
 5dc:	81 11       	cpse	r24, r1
 5de:	de cf       	rjmp	.-68     	; 0x59c <prvIdleTask+0xc>
 5e0:	3d df       	rcall	.-390    	; 0x45c <vPortYield>
 5e2:	d8 cf       	rjmp	.-80     	; 0x594 <prvIdleTask+0x4>

000005e4 <prvAddCurrentTaskToDelayedList>:
 5e4:	ff 92       	push	r15
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	ec 01       	movw	r28, r24
 5f0:	f6 2e       	mov	r15, r22
 5f2:	00 91 65 06 	lds	r16, 0x0665	; 0x800665 <xTickCount>
 5f6:	10 91 66 06 	lds	r17, 0x0666	; 0x800666 <xTickCount+0x1>
 5fa:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <pxCurrentTCB>
 5fe:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 602:	02 96       	adiw	r24, 0x02	; 2
 604:	63 de       	rcall	.-826    	; 0x2cc <uxListRemove>
 606:	cf 3f       	cpi	r28, 0xFF	; 255
 608:	8f ef       	ldi	r24, 0xFF	; 255
 60a:	d8 07       	cpc	r29, r24
 60c:	61 f4       	brne	.+24     	; 0x626 <prvAddCurrentTaskToDelayedList+0x42>
 60e:	ff 20       	and	r15, r15
 610:	51 f0       	breq	.+20     	; 0x626 <prvAddCurrentTaskToDelayedList+0x42>
 612:	60 91 be 06 	lds	r22, 0x06BE	; 0x8006be <pxCurrentTCB>
 616:	70 91 bf 06 	lds	r23, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 61a:	6e 5f       	subi	r22, 0xFE	; 254
 61c:	7f 4f       	sbci	r23, 0xFF	; 255
 61e:	88 e6       	ldi	r24, 0x68	; 104
 620:	96 e0       	ldi	r25, 0x06	; 6
 622:	02 de       	rcall	.-1020   	; 0x228 <vListInsertEnd>
 624:	2d c0       	rjmp	.+90     	; 0x680 <prvAddCurrentTaskToDelayedList+0x9c>
 626:	c0 0f       	add	r28, r16
 628:	d1 1f       	adc	r29, r17
 62a:	e0 91 be 06 	lds	r30, 0x06BE	; 0x8006be <pxCurrentTCB>
 62e:	f0 91 bf 06 	lds	r31, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 632:	d3 83       	std	Z+3, r29	; 0x03
 634:	c2 83       	std	Z+2, r28	; 0x02
 636:	c0 17       	cp	r28, r16
 638:	d1 07       	cpc	r29, r17
 63a:	60 f4       	brcc	.+24     	; 0x654 <prvAddCurrentTaskToDelayedList+0x70>
 63c:	60 91 be 06 	lds	r22, 0x06BE	; 0x8006be <pxCurrentTCB>
 640:	70 91 bf 06 	lds	r23, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 644:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <pxOverflowDelayedTaskList>
 648:	90 91 85 06 	lds	r25, 0x0685	; 0x800685 <pxOverflowDelayedTaskList+0x1>
 64c:	6e 5f       	subi	r22, 0xFE	; 254
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	0c de       	rcall	.-1000   	; 0x26a <vListInsert>
 652:	16 c0       	rjmp	.+44     	; 0x680 <prvAddCurrentTaskToDelayedList+0x9c>
 654:	60 91 be 06 	lds	r22, 0x06BE	; 0x8006be <pxCurrentTCB>
 658:	70 91 bf 06 	lds	r23, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 65c:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <pxDelayedTaskList>
 660:	90 91 87 06 	lds	r25, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
 664:	6e 5f       	subi	r22, 0xFE	; 254
 666:	7f 4f       	sbci	r23, 0xFF	; 255
 668:	00 de       	rcall	.-1024   	; 0x26a <vListInsert>
 66a:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <xNextTaskUnblockTime>
 66e:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <xNextTaskUnblockTime+0x1>
 672:	c8 17       	cp	r28, r24
 674:	d9 07       	cpc	r29, r25
 676:	20 f4       	brcc	.+8      	; 0x680 <prvAddCurrentTaskToDelayedList+0x9c>
 678:	d0 93 5e 06 	sts	0x065E, r29	; 0x80065e <xNextTaskUnblockTime+0x1>
 67c:	c0 93 5d 06 	sts	0x065D, r28	; 0x80065d <xNextTaskUnblockTime>
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	1f 91       	pop	r17
 686:	0f 91       	pop	r16
 688:	ff 90       	pop	r15
 68a:	08 95       	ret

0000068c <xTaskCreate>:
 68c:	4f 92       	push	r4
 68e:	5f 92       	push	r5
 690:	6f 92       	push	r6
 692:	7f 92       	push	r7
 694:	8f 92       	push	r8
 696:	9f 92       	push	r9
 698:	af 92       	push	r10
 69a:	bf 92       	push	r11
 69c:	cf 92       	push	r12
 69e:	df 92       	push	r13
 6a0:	ef 92       	push	r14
 6a2:	ff 92       	push	r15
 6a4:	0f 93       	push	r16
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
 6aa:	4c 01       	movw	r8, r24
 6ac:	6b 01       	movw	r12, r22
 6ae:	5a 01       	movw	r10, r20
 6b0:	29 01       	movw	r4, r18
 6b2:	ca 01       	movw	r24, r20
 6b4:	73 dd       	rcall	.-1306   	; 0x19c <pvPortMalloc>
 6b6:	3c 01       	movw	r6, r24
 6b8:	89 2b       	or	r24, r25
 6ba:	09 f4       	brne	.+2      	; 0x6be <xTaskCreate+0x32>
 6bc:	d0 c0       	rjmp	.+416    	; 0x85e <xTaskCreate+0x1d2>
 6be:	86 e2       	ldi	r24, 0x26	; 38
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	6c dd       	rcall	.-1320   	; 0x19c <pvPortMalloc>
 6c4:	ec 01       	movw	r28, r24
 6c6:	89 2b       	or	r24, r25
 6c8:	59 f0       	breq	.+22     	; 0x6e0 <xTaskCreate+0x54>
 6ca:	78 8e       	std	Y+24, r7	; 0x18
 6cc:	6f 8a       	std	Y+23, r6	; 0x17
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	a8 1a       	sub	r10, r24
 6d2:	b1 08       	sbc	r11, r1
 6d4:	a6 0c       	add	r10, r6
 6d6:	b7 1c       	adc	r11, r7
 6d8:	c1 14       	cp	r12, r1
 6da:	d1 04       	cpc	r13, r1
 6dc:	21 f4       	brne	.+8      	; 0x6e6 <xTaskCreate+0x5a>
 6de:	1f c0       	rjmp	.+62     	; 0x71e <xTaskCreate+0x92>
 6e0:	c3 01       	movw	r24, r6
 6e2:	8f dd       	rcall	.-1250   	; 0x202 <vPortFree>
 6e4:	bc c0       	rjmp	.+376    	; 0x85e <xTaskCreate+0x1d2>
 6e6:	d6 01       	movw	r26, r12
 6e8:	8c 91       	ld	r24, X
 6ea:	89 8f       	std	Y+25, r24	; 0x19
 6ec:	8c 91       	ld	r24, X
 6ee:	88 23       	and	r24, r24
 6f0:	a1 f0       	breq	.+40     	; 0x71a <xTaskCreate+0x8e>
 6f2:	ae 01       	movw	r20, r28
 6f4:	46 5e       	subi	r20, 0xE6	; 230
 6f6:	5f 4f       	sbci	r21, 0xFF	; 255
 6f8:	f6 01       	movw	r30, r12
 6fa:	31 96       	adiw	r30, 0x01	; 1
 6fc:	b8 e0       	ldi	r27, 0x08	; 8
 6fe:	cb 0e       	add	r12, r27
 700:	d1 1c       	adc	r13, r1
 702:	cf 01       	movw	r24, r30
 704:	21 91       	ld	r18, Z+
 706:	da 01       	movw	r26, r20
 708:	2d 93       	st	X+, r18
 70a:	ad 01       	movw	r20, r26
 70c:	dc 01       	movw	r26, r24
 70e:	8c 91       	ld	r24, X
 710:	88 23       	and	r24, r24
 712:	19 f0       	breq	.+6      	; 0x71a <xTaskCreate+0x8e>
 714:	ec 15       	cp	r30, r12
 716:	fd 05       	cpc	r31, r13
 718:	a1 f7       	brne	.-24     	; 0x702 <xTaskCreate+0x76>
 71a:	18 a2       	std	Y+32, r1	; 0x20
 71c:	01 c0       	rjmp	.+2      	; 0x720 <xTaskCreate+0x94>
 71e:	19 8e       	std	Y+25, r1	; 0x19
 720:	04 30       	cpi	r16, 0x04	; 4
 722:	08 f0       	brcs	.+2      	; 0x726 <xTaskCreate+0x9a>
 724:	03 e0       	ldi	r16, 0x03	; 3
 726:	0e 8b       	std	Y+22, r16	; 0x16
 728:	6e 01       	movw	r12, r28
 72a:	b2 e0       	ldi	r27, 0x02	; 2
 72c:	cb 0e       	add	r12, r27
 72e:	d1 1c       	adc	r13, r1
 730:	c6 01       	movw	r24, r12
 732:	76 dd       	rcall	.-1300   	; 0x220 <vListInitialiseItem>
 734:	ce 01       	movw	r24, r28
 736:	0c 96       	adiw	r24, 0x0c	; 12
 738:	73 dd       	rcall	.-1306   	; 0x220 <vListInitialiseItem>
 73a:	d9 87       	std	Y+9, r29	; 0x09
 73c:	c8 87       	std	Y+8, r28	; 0x08
 73e:	84 e0       	ldi	r24, 0x04	; 4
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	80 1b       	sub	r24, r16
 744:	91 09       	sbc	r25, r1
 746:	9d 87       	std	Y+13, r25	; 0x0d
 748:	8c 87       	std	Y+12, r24	; 0x0c
 74a:	db 8b       	std	Y+19, r29	; 0x13
 74c:	ca 8b       	std	Y+18, r28	; 0x12
 74e:	19 a2       	std	Y+33, r1	; 0x21
 750:	1a a2       	std	Y+34, r1	; 0x22
 752:	1b a2       	std	Y+35, r1	; 0x23
 754:	1c a2       	std	Y+36, r1	; 0x24
 756:	1d a2       	std	Y+37, r1	; 0x25
 758:	a2 01       	movw	r20, r4
 75a:	b4 01       	movw	r22, r8
 75c:	c5 01       	movw	r24, r10
 75e:	dd dd       	rcall	.-1094   	; 0x31a <pxPortInitialiseStack>
 760:	99 83       	std	Y+1, r25	; 0x01
 762:	88 83       	st	Y, r24
 764:	e1 14       	cp	r14, r1
 766:	f1 04       	cpc	r15, r1
 768:	19 f0       	breq	.+6      	; 0x770 <xTaskCreate+0xe4>
 76a:	f7 01       	movw	r30, r14
 76c:	d1 83       	std	Z+1, r29	; 0x01
 76e:	c0 83       	st	Z, r28
 770:	0f b6       	in	r0, 0x3f	; 63
 772:	f8 94       	cli
 774:	0f 92       	push	r0
 776:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <uxCurrentNumberOfTasks>
 77a:	8f 5f       	subi	r24, 0xFF	; 255
 77c:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <uxCurrentNumberOfTasks>
 780:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <pxCurrentTCB>
 784:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 788:	89 2b       	or	r24, r25
 78a:	89 f5       	brne	.+98     	; 0x7ee <xTaskCreate+0x162>
 78c:	d0 93 bf 06 	sts	0x06BF, r29	; 0x8006bf <pxCurrentTCB+0x1>
 790:	c0 93 be 06 	sts	0x06BE, r28	; 0x8006be <pxCurrentTCB>
 794:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <uxCurrentNumberOfTasks>
 798:	81 30       	cpi	r24, 0x01	; 1
 79a:	09 f0       	breq	.+2      	; 0x79e <xTaskCreate+0x112>
 79c:	38 c0       	rjmp	.+112    	; 0x80e <xTaskCreate+0x182>
 79e:	8a e9       	ldi	r24, 0x9A	; 154
 7a0:	96 e0       	ldi	r25, 0x06	; 6
 7a2:	30 dd       	rcall	.-1440   	; 0x204 <vListInitialise>
 7a4:	83 ea       	ldi	r24, 0xA3	; 163
 7a6:	96 e0       	ldi	r25, 0x06	; 6
 7a8:	2d dd       	rcall	.-1446   	; 0x204 <vListInitialise>
 7aa:	8c ea       	ldi	r24, 0xAC	; 172
 7ac:	96 e0       	ldi	r25, 0x06	; 6
 7ae:	2a dd       	rcall	.-1452   	; 0x204 <vListInitialise>
 7b0:	85 eb       	ldi	r24, 0xB5	; 181
 7b2:	96 e0       	ldi	r25, 0x06	; 6
 7b4:	27 dd       	rcall	.-1458   	; 0x204 <vListInitialise>
 7b6:	81 e9       	ldi	r24, 0x91	; 145
 7b8:	96 e0       	ldi	r25, 0x06	; 6
 7ba:	24 dd       	rcall	.-1464   	; 0x204 <vListInitialise>
 7bc:	88 e8       	ldi	r24, 0x88	; 136
 7be:	96 e0       	ldi	r25, 0x06	; 6
 7c0:	21 dd       	rcall	.-1470   	; 0x204 <vListInitialise>
 7c2:	8b e7       	ldi	r24, 0x7B	; 123
 7c4:	96 e0       	ldi	r25, 0x06	; 6
 7c6:	1e dd       	rcall	.-1476   	; 0x204 <vListInitialise>
 7c8:	82 e7       	ldi	r24, 0x72	; 114
 7ca:	96 e0       	ldi	r25, 0x06	; 6
 7cc:	1b dd       	rcall	.-1482   	; 0x204 <vListInitialise>
 7ce:	88 e6       	ldi	r24, 0x68	; 104
 7d0:	96 e0       	ldi	r25, 0x06	; 6
 7d2:	18 dd       	rcall	.-1488   	; 0x204 <vListInitialise>
 7d4:	81 e9       	ldi	r24, 0x91	; 145
 7d6:	96 e0       	ldi	r25, 0x06	; 6
 7d8:	90 93 87 06 	sts	0x0687, r25	; 0x800687 <pxDelayedTaskList+0x1>
 7dc:	80 93 86 06 	sts	0x0686, r24	; 0x800686 <pxDelayedTaskList>
 7e0:	88 e8       	ldi	r24, 0x88	; 136
 7e2:	96 e0       	ldi	r25, 0x06	; 6
 7e4:	90 93 85 06 	sts	0x0685, r25	; 0x800685 <pxOverflowDelayedTaskList+0x1>
 7e8:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <pxOverflowDelayedTaskList>
 7ec:	10 c0       	rjmp	.+32     	; 0x80e <xTaskCreate+0x182>
 7ee:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <xSchedulerRunning>
 7f2:	81 11       	cpse	r24, r1
 7f4:	0c c0       	rjmp	.+24     	; 0x80e <xTaskCreate+0x182>
 7f6:	e0 91 be 06 	lds	r30, 0x06BE	; 0x8006be <pxCurrentTCB>
 7fa:	f0 91 bf 06 	lds	r31, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 7fe:	96 89       	ldd	r25, Z+22	; 0x16
 800:	8e 89       	ldd	r24, Y+22	; 0x16
 802:	89 17       	cp	r24, r25
 804:	20 f0       	brcs	.+8      	; 0x80e <xTaskCreate+0x182>
 806:	d0 93 bf 06 	sts	0x06BF, r29	; 0x8006bf <pxCurrentTCB+0x1>
 80a:	c0 93 be 06 	sts	0x06BE, r28	; 0x8006be <pxCurrentTCB>
 80e:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <uxTaskNumber>
 812:	8f 5f       	subi	r24, 0xFF	; 255
 814:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <uxTaskNumber>
 818:	8e 89       	ldd	r24, Y+22	; 0x16
 81a:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <uxTopReadyPriority>
 81e:	98 17       	cp	r25, r24
 820:	10 f4       	brcc	.+4      	; 0x826 <xTaskCreate+0x19a>
 822:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <uxTopReadyPriority>
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	9c 01       	movw	r18, r24
 82a:	22 0f       	add	r18, r18
 82c:	33 1f       	adc	r19, r19
 82e:	22 0f       	add	r18, r18
 830:	33 1f       	adc	r19, r19
 832:	22 0f       	add	r18, r18
 834:	33 1f       	adc	r19, r19
 836:	82 0f       	add	r24, r18
 838:	93 1f       	adc	r25, r19
 83a:	b6 01       	movw	r22, r12
 83c:	86 56       	subi	r24, 0x66	; 102
 83e:	99 4f       	sbci	r25, 0xF9	; 249
 840:	f3 dc       	rcall	.-1562   	; 0x228 <vListInsertEnd>
 842:	0f 90       	pop	r0
 844:	0f be       	out	0x3f, r0	; 63
 846:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <xSchedulerRunning>
 84a:	88 23       	and	r24, r24
 84c:	31 f0       	breq	.+12     	; 0x85a <xTaskCreate+0x1ce>
 84e:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <pxCurrentTCB>
 852:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	03 c0       	rjmp	.+6      	; 0x860 <__stack+0x1>
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	01 c0       	rjmp	.+2      	; 0x860 <__stack+0x1>
 85e:	8f ef       	ldi	r24, 0xFF	; 255
 860:	df 91       	pop	r29
 862:	cf 91       	pop	r28
 864:	0f 91       	pop	r16
 866:	ff 90       	pop	r15
 868:	ef 90       	pop	r14
 86a:	df 90       	pop	r13
 86c:	cf 90       	pop	r12
 86e:	bf 90       	pop	r11
 870:	af 90       	pop	r10
 872:	9f 90       	pop	r9
 874:	8f 90       	pop	r8
 876:	7f 90       	pop	r7
 878:	6f 90       	pop	r6
 87a:	5f 90       	pop	r5
 87c:	4f 90       	pop	r4
 87e:	08 95       	ret

00000880 <vTaskDelete>:
 880:	0f 93       	push	r16
 882:	1f 93       	push	r17
 884:	cf 93       	push	r28
 886:	df 93       	push	r29
 888:	ec 01       	movw	r28, r24
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	f8 94       	cli
 88e:	0f 92       	push	r0
 890:	89 2b       	or	r24, r25
 892:	21 f4       	brne	.+8      	; 0x89c <vTaskDelete+0x1c>
 894:	c0 91 be 06 	lds	r28, 0x06BE	; 0x8006be <pxCurrentTCB>
 898:	d0 91 bf 06 	lds	r29, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 89c:	8e 01       	movw	r16, r28
 89e:	0e 5f       	subi	r16, 0xFE	; 254
 8a0:	1f 4f       	sbci	r17, 0xFF	; 255
 8a2:	c8 01       	movw	r24, r16
 8a4:	13 dd       	rcall	.-1498   	; 0x2cc <uxListRemove>
 8a6:	8c 89       	ldd	r24, Y+20	; 0x14
 8a8:	9d 89       	ldd	r25, Y+21	; 0x15
 8aa:	89 2b       	or	r24, r25
 8ac:	19 f0       	breq	.+6      	; 0x8b4 <vTaskDelete+0x34>
 8ae:	ce 01       	movw	r24, r28
 8b0:	0c 96       	adiw	r24, 0x0c	; 12
 8b2:	0c dd       	rcall	.-1512   	; 0x2cc <uxListRemove>
 8b4:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <uxTaskNumber>
 8b8:	8f 5f       	subi	r24, 0xFF	; 255
 8ba:	80 93 5f 06 	sts	0x065F, r24	; 0x80065f <uxTaskNumber>
 8be:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <pxCurrentTCB>
 8c2:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 8c6:	c8 17       	cp	r28, r24
 8c8:	d9 07       	cpc	r29, r25
 8ca:	51 f4       	brne	.+20     	; 0x8e0 <vTaskDelete+0x60>
 8cc:	b8 01       	movw	r22, r16
 8ce:	82 e7       	ldi	r24, 0x72	; 114
 8d0:	96 e0       	ldi	r25, 0x06	; 6
 8d2:	aa dc       	rcall	.-1708   	; 0x228 <vListInsertEnd>
 8d4:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <uxDeletedTasksWaitingCleanUp>
 8d8:	8f 5f       	subi	r24, 0xFF	; 255
 8da:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <uxDeletedTasksWaitingCleanUp>
 8de:	0b c0       	rjmp	.+22     	; 0x8f6 <vTaskDelete+0x76>
 8e0:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <uxCurrentNumberOfTasks>
 8e4:	81 50       	subi	r24, 0x01	; 1
 8e6:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <uxCurrentNumberOfTasks>
 8ea:	8f 89       	ldd	r24, Y+23	; 0x17
 8ec:	98 8d       	ldd	r25, Y+24	; 0x18
 8ee:	89 dc       	rcall	.-1774   	; 0x202 <vPortFree>
 8f0:	ce 01       	movw	r24, r28
 8f2:	87 dc       	rcall	.-1778   	; 0x202 <vPortFree>
 8f4:	2e de       	rcall	.-932    	; 0x552 <prvResetNextTaskUnblockTime>
 8f6:	0f 90       	pop	r0
 8f8:	0f be       	out	0x3f, r0	; 63
 8fa:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <xSchedulerRunning>
 8fe:	88 23       	and	r24, r24
 900:	41 f0       	breq	.+16     	; 0x912 <vTaskDelete+0x92>
 902:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <pxCurrentTCB>
 906:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 90a:	c8 17       	cp	r28, r24
 90c:	d9 07       	cpc	r29, r25
 90e:	09 f4       	brne	.+2      	; 0x912 <vTaskDelete+0x92>
 910:	a5 dd       	rcall	.-1206   	; 0x45c <vPortYield>
 912:	df 91       	pop	r29
 914:	cf 91       	pop	r28
 916:	1f 91       	pop	r17
 918:	0f 91       	pop	r16
 91a:	08 95       	ret

0000091c <vTaskStartScheduler>:
 91c:	ef 92       	push	r14
 91e:	ff 92       	push	r15
 920:	0f 93       	push	r16
 922:	0f 2e       	mov	r0, r31
 924:	fb e5       	ldi	r31, 0x5B	; 91
 926:	ef 2e       	mov	r14, r31
 928:	f6 e0       	ldi	r31, 0x06	; 6
 92a:	ff 2e       	mov	r15, r31
 92c:	f0 2d       	mov	r31, r0
 92e:	00 e0       	ldi	r16, 0x00	; 0
 930:	20 e0       	ldi	r18, 0x00	; 0
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	45 e5       	ldi	r20, 0x55	; 85
 936:	50 e0       	ldi	r21, 0x00	; 0
 938:	60 e6       	ldi	r22, 0x60	; 96
 93a:	70 e0       	ldi	r23, 0x00	; 0
 93c:	88 ec       	ldi	r24, 0xC8	; 200
 93e:	92 e0       	ldi	r25, 0x02	; 2
 940:	a5 de       	rcall	.-694    	; 0x68c <xTaskCreate>
 942:	81 30       	cpi	r24, 0x01	; 1
 944:	79 f4       	brne	.+30     	; 0x964 <vTaskStartScheduler+0x48>
 946:	f8 94       	cli
 948:	8f ef       	ldi	r24, 0xFF	; 255
 94a:	9f ef       	ldi	r25, 0xFF	; 255
 94c:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <xNextTaskUnblockTime+0x1>
 950:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xNextTaskUnblockTime>
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <xSchedulerRunning>
 95a:	10 92 66 06 	sts	0x0666, r1	; 0x800666 <xTickCount+0x1>
 95e:	10 92 65 06 	sts	0x0665, r1	; 0x800665 <xTickCount>
 962:	47 dd       	rcall	.-1394   	; 0x3f2 <xPortStartScheduler>
 964:	0f 91       	pop	r16
 966:	ff 90       	pop	r15
 968:	ef 90       	pop	r14
 96a:	08 95       	ret

0000096c <vTaskSuspendAll>:
 96c:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
 970:	8f 5f       	subi	r24, 0xFF	; 255
 972:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <uxSchedulerSuspended>
 976:	08 95       	ret

00000978 <xTaskIncrementTick>:
 978:	ef 92       	push	r14
 97a:	ff 92       	push	r15
 97c:	0f 93       	push	r16
 97e:	1f 93       	push	r17
 980:	cf 93       	push	r28
 982:	df 93       	push	r29
 984:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
 988:	81 11       	cpse	r24, r1
 98a:	85 c0       	rjmp	.+266    	; 0xa96 <xTaskIncrementTick+0x11e>
 98c:	e0 90 65 06 	lds	r14, 0x0665	; 0x800665 <xTickCount>
 990:	f0 90 66 06 	lds	r15, 0x0666	; 0x800666 <xTickCount+0x1>
 994:	8f ef       	ldi	r24, 0xFF	; 255
 996:	e8 1a       	sub	r14, r24
 998:	f8 0a       	sbc	r15, r24
 99a:	f0 92 66 06 	sts	0x0666, r15	; 0x800666 <xTickCount+0x1>
 99e:	e0 92 65 06 	sts	0x0665, r14	; 0x800665 <xTickCount>
 9a2:	e1 14       	cp	r14, r1
 9a4:	f1 04       	cpc	r15, r1
 9a6:	b1 f4       	brne	.+44     	; 0x9d4 <xTaskIncrementTick+0x5c>
 9a8:	80 91 86 06 	lds	r24, 0x0686	; 0x800686 <pxDelayedTaskList>
 9ac:	90 91 87 06 	lds	r25, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
 9b0:	20 91 84 06 	lds	r18, 0x0684	; 0x800684 <pxOverflowDelayedTaskList>
 9b4:	30 91 85 06 	lds	r19, 0x0685	; 0x800685 <pxOverflowDelayedTaskList+0x1>
 9b8:	30 93 87 06 	sts	0x0687, r19	; 0x800687 <pxDelayedTaskList+0x1>
 9bc:	20 93 86 06 	sts	0x0686, r18	; 0x800686 <pxDelayedTaskList>
 9c0:	90 93 85 06 	sts	0x0685, r25	; 0x800685 <pxOverflowDelayedTaskList+0x1>
 9c4:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <pxOverflowDelayedTaskList>
 9c8:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <xNumOfOverflows>
 9cc:	8f 5f       	subi	r24, 0xFF	; 255
 9ce:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <xNumOfOverflows>
 9d2:	bf dd       	rcall	.-1154   	; 0x552 <prvResetNextTaskUnblockTime>
 9d4:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <xNextTaskUnblockTime>
 9d8:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <xNextTaskUnblockTime+0x1>
 9dc:	e8 16       	cp	r14, r24
 9de:	f9 06       	cpc	r15, r25
 9e0:	08 f4       	brcc	.+2      	; 0x9e4 <xTaskIncrementTick+0x6c>
 9e2:	5e c0       	rjmp	.+188    	; 0xaa0 <xTaskIncrementTick+0x128>
 9e4:	e0 91 86 06 	lds	r30, 0x0686	; 0x800686 <pxDelayedTaskList>
 9e8:	f0 91 87 06 	lds	r31, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
 9ec:	80 81       	ld	r24, Z
 9ee:	88 23       	and	r24, r24
 9f0:	79 f0       	breq	.+30     	; 0xa10 <xTaskIncrementTick+0x98>
 9f2:	e0 91 86 06 	lds	r30, 0x0686	; 0x800686 <pxDelayedTaskList>
 9f6:	f0 91 87 06 	lds	r31, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
 9fa:	05 80       	ldd	r0, Z+5	; 0x05
 9fc:	f6 81       	ldd	r31, Z+6	; 0x06
 9fe:	e0 2d       	mov	r30, r0
 a00:	c6 81       	ldd	r28, Z+6	; 0x06
 a02:	d7 81       	ldd	r29, Z+7	; 0x07
 a04:	8a 81       	ldd	r24, Y+2	; 0x02
 a06:	9b 81       	ldd	r25, Y+3	; 0x03
 a08:	e8 16       	cp	r14, r24
 a0a:	f9 06       	cpc	r15, r25
 a0c:	d8 f4       	brcc	.+54     	; 0xa44 <xTaskIncrementTick+0xcc>
 a0e:	15 c0       	rjmp	.+42     	; 0xa3a <xTaskIncrementTick+0xc2>
 a10:	8f ef       	ldi	r24, 0xFF	; 255
 a12:	9f ef       	ldi	r25, 0xFF	; 255
 a14:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <xNextTaskUnblockTime+0x1>
 a18:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xNextTaskUnblockTime>
 a1c:	41 c0       	rjmp	.+130    	; 0xaa0 <xTaskIncrementTick+0x128>
 a1e:	e0 91 86 06 	lds	r30, 0x0686	; 0x800686 <pxDelayedTaskList>
 a22:	f0 91 87 06 	lds	r31, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
 a26:	05 80       	ldd	r0, Z+5	; 0x05
 a28:	f6 81       	ldd	r31, Z+6	; 0x06
 a2a:	e0 2d       	mov	r30, r0
 a2c:	c6 81       	ldd	r28, Z+6	; 0x06
 a2e:	d7 81       	ldd	r29, Z+7	; 0x07
 a30:	8a 81       	ldd	r24, Y+2	; 0x02
 a32:	9b 81       	ldd	r25, Y+3	; 0x03
 a34:	e8 16       	cp	r14, r24
 a36:	f9 06       	cpc	r15, r25
 a38:	28 f4       	brcc	.+10     	; 0xa44 <xTaskIncrementTick+0xcc>
 a3a:	90 93 5e 06 	sts	0x065E, r25	; 0x80065e <xNextTaskUnblockTime+0x1>
 a3e:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <xNextTaskUnblockTime>
 a42:	2e c0       	rjmp	.+92     	; 0xaa0 <xTaskIncrementTick+0x128>
 a44:	8e 01       	movw	r16, r28
 a46:	0e 5f       	subi	r16, 0xFE	; 254
 a48:	1f 4f       	sbci	r17, 0xFF	; 255
 a4a:	c8 01       	movw	r24, r16
 a4c:	3f dc       	rcall	.-1922   	; 0x2cc <uxListRemove>
 a4e:	8c 89       	ldd	r24, Y+20	; 0x14
 a50:	9d 89       	ldd	r25, Y+21	; 0x15
 a52:	89 2b       	or	r24, r25
 a54:	19 f0       	breq	.+6      	; 0xa5c <xTaskIncrementTick+0xe4>
 a56:	ce 01       	movw	r24, r28
 a58:	0c 96       	adiw	r24, 0x0c	; 12
 a5a:	38 dc       	rcall	.-1936   	; 0x2cc <uxListRemove>
 a5c:	8e 89       	ldd	r24, Y+22	; 0x16
 a5e:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <uxTopReadyPriority>
 a62:	98 17       	cp	r25, r24
 a64:	10 f4       	brcc	.+4      	; 0xa6a <xTaskIncrementTick+0xf2>
 a66:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <uxTopReadyPriority>
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	9c 01       	movw	r18, r24
 a6e:	22 0f       	add	r18, r18
 a70:	33 1f       	adc	r19, r19
 a72:	22 0f       	add	r18, r18
 a74:	33 1f       	adc	r19, r19
 a76:	22 0f       	add	r18, r18
 a78:	33 1f       	adc	r19, r19
 a7a:	82 0f       	add	r24, r18
 a7c:	93 1f       	adc	r25, r19
 a7e:	b8 01       	movw	r22, r16
 a80:	86 56       	subi	r24, 0x66	; 102
 a82:	99 4f       	sbci	r25, 0xF9	; 249
 a84:	d1 db       	rcall	.-2142   	; 0x228 <vListInsertEnd>
 a86:	e0 91 86 06 	lds	r30, 0x0686	; 0x800686 <pxDelayedTaskList>
 a8a:	f0 91 87 06 	lds	r31, 0x0687	; 0x800687 <pxDelayedTaskList+0x1>
 a8e:	80 81       	ld	r24, Z
 a90:	81 11       	cpse	r24, r1
 a92:	c5 cf       	rjmp	.-118    	; 0xa1e <xTaskIncrementTick+0xa6>
 a94:	bd cf       	rjmp	.-134    	; 0xa10 <xTaskIncrementTick+0x98>
 a96:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <uxPendedTicks>
 a9a:	8f 5f       	subi	r24, 0xFF	; 255
 a9c:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <uxPendedTicks>
 aa0:	80 e0       	ldi	r24, 0x00	; 0
 aa2:	df 91       	pop	r29
 aa4:	cf 91       	pop	r28
 aa6:	1f 91       	pop	r17
 aa8:	0f 91       	pop	r16
 aaa:	ff 90       	pop	r15
 aac:	ef 90       	pop	r14
 aae:	08 95       	ret

00000ab0 <xTaskResumeAll>:
 ab0:	df 92       	push	r13
 ab2:	ef 92       	push	r14
 ab4:	ff 92       	push	r15
 ab6:	0f 93       	push	r16
 ab8:	1f 93       	push	r17
 aba:	cf 93       	push	r28
 abc:	df 93       	push	r29
 abe:	0f b6       	in	r0, 0x3f	; 63
 ac0:	f8 94       	cli
 ac2:	0f 92       	push	r0
 ac4:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
 ac8:	81 50       	subi	r24, 0x01	; 1
 aca:	80 93 5a 06 	sts	0x065A, r24	; 0x80065a <uxSchedulerSuspended>
 ace:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
 ad2:	81 11       	cpse	r24, r1
 ad4:	54 c0       	rjmp	.+168    	; 0xb7e <xTaskResumeAll+0xce>
 ad6:	80 91 67 06 	lds	r24, 0x0667	; 0x800667 <uxCurrentNumberOfTasks>
 ada:	81 11       	cpse	r24, r1
 adc:	30 c0       	rjmp	.+96     	; 0xb3e <xTaskResumeAll+0x8e>
 ade:	4f c0       	rjmp	.+158    	; 0xb7e <xTaskResumeAll+0xce>
 ae0:	d7 01       	movw	r26, r14
 ae2:	15 96       	adiw	r26, 0x05	; 5
 ae4:	ed 91       	ld	r30, X+
 ae6:	fc 91       	ld	r31, X
 ae8:	16 97       	sbiw	r26, 0x06	; 6
 aea:	c6 81       	ldd	r28, Z+6	; 0x06
 aec:	d7 81       	ldd	r29, Z+7	; 0x07
 aee:	ce 01       	movw	r24, r28
 af0:	0c 96       	adiw	r24, 0x0c	; 12
 af2:	ec db       	rcall	.-2088   	; 0x2cc <uxListRemove>
 af4:	8e 01       	movw	r16, r28
 af6:	0e 5f       	subi	r16, 0xFE	; 254
 af8:	1f 4f       	sbci	r17, 0xFF	; 255
 afa:	c8 01       	movw	r24, r16
 afc:	e7 db       	rcall	.-2098   	; 0x2cc <uxListRemove>
 afe:	8e 89       	ldd	r24, Y+22	; 0x16
 b00:	90 91 64 06 	lds	r25, 0x0664	; 0x800664 <uxTopReadyPriority>
 b04:	98 17       	cp	r25, r24
 b06:	10 f4       	brcc	.+4      	; 0xb0c <xTaskResumeAll+0x5c>
 b08:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <uxTopReadyPriority>
 b0c:	90 e0       	ldi	r25, 0x00	; 0
 b0e:	9c 01       	movw	r18, r24
 b10:	22 0f       	add	r18, r18
 b12:	33 1f       	adc	r19, r19
 b14:	22 0f       	add	r18, r18
 b16:	33 1f       	adc	r19, r19
 b18:	22 0f       	add	r18, r18
 b1a:	33 1f       	adc	r19, r19
 b1c:	82 0f       	add	r24, r18
 b1e:	93 1f       	adc	r25, r19
 b20:	b8 01       	movw	r22, r16
 b22:	86 56       	subi	r24, 0x66	; 102
 b24:	99 4f       	sbci	r25, 0xF9	; 249
 b26:	80 db       	rcall	.-2304   	; 0x228 <vListInsertEnd>
 b28:	e0 91 be 06 	lds	r30, 0x06BE	; 0x8006be <pxCurrentTCB>
 b2c:	f0 91 bf 06 	lds	r31, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 b30:	9e 89       	ldd	r25, Y+22	; 0x16
 b32:	86 89       	ldd	r24, Z+22	; 0x16
 b34:	98 17       	cp	r25, r24
 b36:	68 f0       	brcs	.+26     	; 0xb52 <xTaskResumeAll+0xa2>
 b38:	d0 92 61 06 	sts	0x0661, r13	; 0x800661 <xYieldPending>
 b3c:	0a c0       	rjmp	.+20     	; 0xb52 <xTaskResumeAll+0xa2>
 b3e:	c0 e0       	ldi	r28, 0x00	; 0
 b40:	d0 e0       	ldi	r29, 0x00	; 0
 b42:	0f 2e       	mov	r0, r31
 b44:	fb e7       	ldi	r31, 0x7B	; 123
 b46:	ef 2e       	mov	r14, r31
 b48:	f6 e0       	ldi	r31, 0x06	; 6
 b4a:	ff 2e       	mov	r15, r31
 b4c:	f0 2d       	mov	r31, r0
 b4e:	dd 24       	eor	r13, r13
 b50:	d3 94       	inc	r13
 b52:	f7 01       	movw	r30, r14
 b54:	80 81       	ld	r24, Z
 b56:	81 11       	cpse	r24, r1
 b58:	c3 cf       	rjmp	.-122    	; 0xae0 <xTaskResumeAll+0x30>
 b5a:	cd 2b       	or	r28, r29
 b5c:	09 f0       	breq	.+2      	; 0xb60 <xTaskResumeAll+0xb0>
 b5e:	f9 dc       	rcall	.-1550   	; 0x552 <prvResetNextTaskUnblockTime>
 b60:	c0 91 62 06 	lds	r28, 0x0662	; 0x800662 <uxPendedTicks>
 b64:	cc 23       	and	r28, r28
 b66:	49 f0       	breq	.+18     	; 0xb7a <xTaskResumeAll+0xca>
 b68:	d1 e0       	ldi	r29, 0x01	; 1
 b6a:	06 df       	rcall	.-500    	; 0x978 <xTaskIncrementTick>
 b6c:	81 11       	cpse	r24, r1
 b6e:	d0 93 61 06 	sts	0x0661, r29	; 0x800661 <xYieldPending>
 b72:	c1 50       	subi	r28, 0x01	; 1
 b74:	d1 f7       	brne	.-12     	; 0xb6a <xTaskResumeAll+0xba>
 b76:	10 92 62 06 	sts	0x0662, r1	; 0x800662 <uxPendedTicks>
 b7a:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <xYieldPending>
 b7e:	0f 90       	pop	r0
 b80:	0f be       	out	0x3f, r0	; 63
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	df 91       	pop	r29
 b86:	cf 91       	pop	r28
 b88:	1f 91       	pop	r17
 b8a:	0f 91       	pop	r16
 b8c:	ff 90       	pop	r15
 b8e:	ef 90       	pop	r14
 b90:	df 90       	pop	r13
 b92:	08 95       	ret

00000b94 <vTaskDelay>:
 b94:	cf 93       	push	r28
 b96:	df 93       	push	r29
 b98:	ec 01       	movw	r28, r24
 b9a:	89 2b       	or	r24, r25
 b9c:	39 f0       	breq	.+14     	; 0xbac <vTaskDelay+0x18>
 b9e:	e6 de       	rcall	.-564    	; 0x96c <vTaskSuspendAll>
 ba0:	60 e0       	ldi	r22, 0x00	; 0
 ba2:	ce 01       	movw	r24, r28
 ba4:	1f dd       	rcall	.-1474   	; 0x5e4 <prvAddCurrentTaskToDelayedList>
 ba6:	84 df       	rcall	.-248    	; 0xab0 <xTaskResumeAll>
 ba8:	81 11       	cpse	r24, r1
 baa:	01 c0       	rjmp	.+2      	; 0xbae <vTaskDelay+0x1a>
 bac:	57 dc       	rcall	.-1874   	; 0x45c <vPortYield>
 bae:	df 91       	pop	r29
 bb0:	cf 91       	pop	r28
 bb2:	08 95       	ret

00000bb4 <vTaskSwitchContext>:
 bb4:	80 91 5a 06 	lds	r24, 0x065A	; 0x80065a <uxSchedulerSuspended>
 bb8:	88 23       	and	r24, r24
 bba:	21 f0       	breq	.+8      	; 0xbc4 <vTaskSwitchContext+0x10>
 bbc:	81 e0       	ldi	r24, 0x01	; 1
 bbe:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <xYieldPending>
 bc2:	08 95       	ret
 bc4:	10 92 61 06 	sts	0x0661, r1	; 0x800661 <xYieldPending>
 bc8:	20 91 64 06 	lds	r18, 0x0664	; 0x800664 <uxTopReadyPriority>
 bcc:	82 2f       	mov	r24, r18
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	fc 01       	movw	r30, r24
 bd2:	ee 0f       	add	r30, r30
 bd4:	ff 1f       	adc	r31, r31
 bd6:	ee 0f       	add	r30, r30
 bd8:	ff 1f       	adc	r31, r31
 bda:	ee 0f       	add	r30, r30
 bdc:	ff 1f       	adc	r31, r31
 bde:	e8 0f       	add	r30, r24
 be0:	f9 1f       	adc	r31, r25
 be2:	e6 56       	subi	r30, 0x66	; 102
 be4:	f9 4f       	sbci	r31, 0xF9	; 249
 be6:	30 81       	ld	r19, Z
 be8:	31 11       	cpse	r19, r1
 bea:	11 c0       	rjmp	.+34     	; 0xc0e <vTaskSwitchContext+0x5a>
 bec:	21 50       	subi	r18, 0x01	; 1
 bee:	82 2f       	mov	r24, r18
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	fc 01       	movw	r30, r24
 bf4:	ee 0f       	add	r30, r30
 bf6:	ff 1f       	adc	r31, r31
 bf8:	ee 0f       	add	r30, r30
 bfa:	ff 1f       	adc	r31, r31
 bfc:	ee 0f       	add	r30, r30
 bfe:	ff 1f       	adc	r31, r31
 c00:	e8 0f       	add	r30, r24
 c02:	f9 1f       	adc	r31, r25
 c04:	e6 56       	subi	r30, 0x66	; 102
 c06:	f9 4f       	sbci	r31, 0xF9	; 249
 c08:	30 81       	ld	r19, Z
 c0a:	33 23       	and	r19, r19
 c0c:	79 f3       	breq	.-34     	; 0xbec <vTaskSwitchContext+0x38>
 c0e:	ac 01       	movw	r20, r24
 c10:	44 0f       	add	r20, r20
 c12:	55 1f       	adc	r21, r21
 c14:	44 0f       	add	r20, r20
 c16:	55 1f       	adc	r21, r21
 c18:	44 0f       	add	r20, r20
 c1a:	55 1f       	adc	r21, r21
 c1c:	48 0f       	add	r20, r24
 c1e:	59 1f       	adc	r21, r25
 c20:	da 01       	movw	r26, r20
 c22:	a6 56       	subi	r26, 0x66	; 102
 c24:	b9 4f       	sbci	r27, 0xF9	; 249
 c26:	11 96       	adiw	r26, 0x01	; 1
 c28:	ed 91       	ld	r30, X+
 c2a:	fc 91       	ld	r31, X
 c2c:	12 97       	sbiw	r26, 0x02	; 2
 c2e:	02 80       	ldd	r0, Z+2	; 0x02
 c30:	f3 81       	ldd	r31, Z+3	; 0x03
 c32:	e0 2d       	mov	r30, r0
 c34:	12 96       	adiw	r26, 0x02	; 2
 c36:	fc 93       	st	X, r31
 c38:	ee 93       	st	-X, r30
 c3a:	11 97       	sbiw	r26, 0x01	; 1
 c3c:	43 56       	subi	r20, 0x63	; 99
 c3e:	59 4f       	sbci	r21, 0xF9	; 249
 c40:	e4 17       	cp	r30, r20
 c42:	f5 07       	cpc	r31, r21
 c44:	29 f4       	brne	.+10     	; 0xc50 <vTaskSwitchContext+0x9c>
 c46:	42 81       	ldd	r20, Z+2	; 0x02
 c48:	53 81       	ldd	r21, Z+3	; 0x03
 c4a:	fd 01       	movw	r30, r26
 c4c:	52 83       	std	Z+2, r21	; 0x02
 c4e:	41 83       	std	Z+1, r20	; 0x01
 c50:	fc 01       	movw	r30, r24
 c52:	ee 0f       	add	r30, r30
 c54:	ff 1f       	adc	r31, r31
 c56:	ee 0f       	add	r30, r30
 c58:	ff 1f       	adc	r31, r31
 c5a:	ee 0f       	add	r30, r30
 c5c:	ff 1f       	adc	r31, r31
 c5e:	8e 0f       	add	r24, r30
 c60:	9f 1f       	adc	r25, r31
 c62:	fc 01       	movw	r30, r24
 c64:	e6 56       	subi	r30, 0x66	; 102
 c66:	f9 4f       	sbci	r31, 0xF9	; 249
 c68:	01 80       	ldd	r0, Z+1	; 0x01
 c6a:	f2 81       	ldd	r31, Z+2	; 0x02
 c6c:	e0 2d       	mov	r30, r0
 c6e:	86 81       	ldd	r24, Z+6	; 0x06
 c70:	97 81       	ldd	r25, Z+7	; 0x07
 c72:	90 93 bf 06 	sts	0x06BF, r25	; 0x8006bf <pxCurrentTCB+0x1>
 c76:	80 93 be 06 	sts	0x06BE, r24	; 0x8006be <pxCurrentTCB>
 c7a:	20 93 64 06 	sts	0x0664, r18	; 0x800664 <uxTopReadyPriority>
 c7e:	08 95       	ret

00000c80 <xTaskGetCurrentTaskHandle>:
 c80:	80 91 be 06 	lds	r24, 0x06BE	; 0x8006be <pxCurrentTCB>
 c84:	90 91 bf 06 	lds	r25, 0x06BF	; 0x8006bf <pxCurrentTCB+0x1>
 c88:	08 95       	ret

00000c8a <Led_Init>:
 c8a:	cf 93       	push	r28
 c8c:	df 93       	push	r29
 c8e:	00 d0       	rcall	.+0      	; 0xc90 <Led_Init+0x6>
 c90:	1f 92       	push	r1
 c92:	cd b7       	in	r28, 0x3d	; 61
 c94:	de b7       	in	r29, 0x3e	; 62
 c96:	81 30       	cpi	r24, 0x01	; 1
 c98:	69 f0       	breq	.+26     	; 0xcb4 <Led_Init+0x2a>
 c9a:	28 f0       	brcs	.+10     	; 0xca6 <Led_Init+0x1c>
 c9c:	82 30       	cpi	r24, 0x02	; 2
 c9e:	89 f0       	breq	.+34     	; 0xcc2 <Led_Init+0x38>
 ca0:	83 30       	cpi	r24, 0x03	; 3
 ca2:	b1 f0       	breq	.+44     	; 0xcd0 <Led_Init+0x46>
 ca4:	1b c0       	rjmp	.+54     	; 0xcdc <Led_Init+0x52>
 ca6:	81 e0       	ldi	r24, 0x01	; 1
 ca8:	89 83       	std	Y+1, r24	; 0x01
 caa:	80 e1       	ldi	r24, 0x10	; 16
 cac:	8a 83       	std	Y+2, r24	; 0x02
 cae:	8f ef       	ldi	r24, 0xFF	; 255
 cb0:	8b 83       	std	Y+3, r24	; 0x03
 cb2:	14 c0       	rjmp	.+40     	; 0xcdc <Led_Init+0x52>
 cb4:	81 e0       	ldi	r24, 0x01	; 1
 cb6:	89 83       	std	Y+1, r24	; 0x01
 cb8:	80 e2       	ldi	r24, 0x20	; 32
 cba:	8a 83       	std	Y+2, r24	; 0x02
 cbc:	8f ef       	ldi	r24, 0xFF	; 255
 cbe:	8b 83       	std	Y+3, r24	; 0x03
 cc0:	0d c0       	rjmp	.+26     	; 0xcdc <Led_Init+0x52>
 cc2:	81 e0       	ldi	r24, 0x01	; 1
 cc4:	89 83       	std	Y+1, r24	; 0x01
 cc6:	80 e4       	ldi	r24, 0x40	; 64
 cc8:	8a 83       	std	Y+2, r24	; 0x02
 cca:	8f ef       	ldi	r24, 0xFF	; 255
 ccc:	8b 83       	std	Y+3, r24	; 0x03
 cce:	06 c0       	rjmp	.+12     	; 0xcdc <Led_Init+0x52>
 cd0:	81 e0       	ldi	r24, 0x01	; 1
 cd2:	89 83       	std	Y+1, r24	; 0x01
 cd4:	80 e8       	ldi	r24, 0x80	; 128
 cd6:	8a 83       	std	Y+2, r24	; 0x02
 cd8:	8f ef       	ldi	r24, 0xFF	; 255
 cda:	8b 83       	std	Y+3, r24	; 0x03
 cdc:	ce 01       	movw	r24, r28
 cde:	01 96       	adiw	r24, 0x01	; 1
 ce0:	a1 d0       	rcall	.+322    	; 0xe24 <DIO_init>
 ce2:	0f 90       	pop	r0
 ce4:	0f 90       	pop	r0
 ce6:	0f 90       	pop	r0
 ce8:	df 91       	pop	r29
 cea:	cf 91       	pop	r28
 cec:	08 95       	ret

00000cee <Led_Off>:
 cee:	81 30       	cpi	r24, 0x01	; 1
 cf0:	59 f0       	breq	.+22     	; 0xd08 <Led_Off+0x1a>
 cf2:	28 f0       	brcs	.+10     	; 0xcfe <Led_Off+0x10>
 cf4:	82 30       	cpi	r24, 0x02	; 2
 cf6:	69 f0       	breq	.+26     	; 0xd12 <Led_Off+0x24>
 cf8:	83 30       	cpi	r24, 0x03	; 3
 cfa:	81 f0       	breq	.+32     	; 0xd1c <Led_Off+0x2e>
 cfc:	08 95       	ret
 cfe:	40 e0       	ldi	r20, 0x00	; 0
 d00:	60 e1       	ldi	r22, 0x10	; 16
 d02:	81 e0       	ldi	r24, 0x01	; 1
 d04:	f0 c0       	rjmp	.+480    	; 0xee6 <DIO_Write>
 d06:	08 95       	ret
 d08:	40 e0       	ldi	r20, 0x00	; 0
 d0a:	60 e2       	ldi	r22, 0x20	; 32
 d0c:	81 e0       	ldi	r24, 0x01	; 1
 d0e:	eb c0       	rjmp	.+470    	; 0xee6 <DIO_Write>
 d10:	08 95       	ret
 d12:	40 e0       	ldi	r20, 0x00	; 0
 d14:	60 e4       	ldi	r22, 0x40	; 64
 d16:	81 e0       	ldi	r24, 0x01	; 1
 d18:	e6 c0       	rjmp	.+460    	; 0xee6 <DIO_Write>
 d1a:	08 95       	ret
 d1c:	40 e0       	ldi	r20, 0x00	; 0
 d1e:	60 e8       	ldi	r22, 0x80	; 128
 d20:	81 e0       	ldi	r24, 0x01	; 1
 d22:	e1 c0       	rjmp	.+450    	; 0xee6 <DIO_Write>
 d24:	08 95       	ret

00000d26 <Led_Toggle>:
 d26:	81 30       	cpi	r24, 0x01	; 1
 d28:	51 f0       	breq	.+20     	; 0xd3e <Led_Toggle+0x18>
 d2a:	28 f0       	brcs	.+10     	; 0xd36 <Led_Toggle+0x10>
 d2c:	82 30       	cpi	r24, 0x02	; 2
 d2e:	59 f0       	breq	.+22     	; 0xd46 <Led_Toggle+0x20>
 d30:	83 30       	cpi	r24, 0x03	; 3
 d32:	69 f0       	breq	.+26     	; 0xd4e <Led_Toggle+0x28>
 d34:	08 95       	ret
 d36:	60 e1       	ldi	r22, 0x10	; 16
 d38:	81 e0       	ldi	r24, 0x01	; 1
 d3a:	40 c1       	rjmp	.+640    	; 0xfbc <DIO_Toggle>
 d3c:	08 95       	ret
 d3e:	60 e2       	ldi	r22, 0x20	; 32
 d40:	81 e0       	ldi	r24, 0x01	; 1
 d42:	3c c1       	rjmp	.+632    	; 0xfbc <DIO_Toggle>
 d44:	08 95       	ret
 d46:	60 e4       	ldi	r22, 0x40	; 64
 d48:	81 e0       	ldi	r24, 0x01	; 1
 d4a:	38 c1       	rjmp	.+624    	; 0xfbc <DIO_Toggle>
 d4c:	08 95       	ret
 d4e:	60 e8       	ldi	r22, 0x80	; 128
 d50:	81 e0       	ldi	r24, 0x01	; 1
 d52:	34 c1       	rjmp	.+616    	; 0xfbc <DIO_Toggle>
 d54:	08 95       	ret

00000d56 <pushButtonInit>:
#include "pushButton.h"
ERROR_STATUS pushButtonInit(uint8_t en_butotn_id)
{
 d56:	cf 93       	push	r28
 d58:	df 93       	push	r29
 d5a:	00 d0       	rcall	.+0      	; 0xd5c <pushButtonInit+0x6>
 d5c:	1f 92       	push	r1
 d5e:	cd b7       	in	r28, 0x3d	; 61
 d60:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATUS ERR = E_OK;
	DIO_Cfg_s btn;

	switch(en_butotn_id){
 d62:	88 23       	and	r24, r24
 d64:	19 f0       	breq	.+6      	; 0xd6c <pushButtonInit+0x16>
 d66:	81 30       	cpi	r24, 0x01	; 1
 d68:	51 f0       	breq	.+20     	; 0xd7e <pushButtonInit+0x28>
 d6a:	11 c0       	rjmp	.+34     	; 0xd8e <pushButtonInit+0x38>
		case BTN_0:
		btn.GPIO = BTN_0_GPIO;
 d6c:	82 e0       	ldi	r24, 0x02	; 2
 d6e:	89 83       	std	Y+1, r24	; 0x01
		btn.pins = BTN_0_BIT;
 d70:	80 e1       	ldi	r24, 0x10	; 16
 d72:	8a 83       	std	Y+2, r24	; 0x02
		btn.dir = INPUT;
 d74:	1b 82       	std	Y+3, r1	; 0x03
		DIO_init (&btn);
 d76:	ce 01       	movw	r24, r28
 d78:	01 96       	adiw	r24, 0x01	; 1
 d7a:	54 d0       	rcall	.+168    	; 0xe24 <DIO_init>
		break;
 d7c:	08 c0       	rjmp	.+16     	; 0xd8e <pushButtonInit+0x38>
		case BTN_1:
		btn.GPIO = BTN_1_GPIO;
 d7e:	81 e0       	ldi	r24, 0x01	; 1
 d80:	89 83       	std	Y+1, r24	; 0x01
		btn.pins = BTN_1_BIT;
 d82:	84 e0       	ldi	r24, 0x04	; 4
 d84:	8a 83       	std	Y+2, r24	; 0x02
		btn.dir = INPUT;
 d86:	1b 82       	std	Y+3, r1	; 0x03
		DIO_init (&btn);
 d88:	ce 01       	movw	r24, r28
 d8a:	01 96       	adiw	r24, 0x01	; 1
 d8c:	4b d0       	rcall	.+150    	; 0xe24 <DIO_init>
		break;
		default:
		break;
	}
	return ERR;
}
 d8e:	80 e0       	ldi	r24, 0x00	; 0
 d90:	0f 90       	pop	r0
 d92:	0f 90       	pop	r0
 d94:	0f 90       	pop	r0
 d96:	df 91       	pop	r29
 d98:	cf 91       	pop	r28
 d9a:	08 95       	ret

00000d9c <pushButtonGetStatus>:


ERROR_STATUS pushButtonGetStatus(uint8_t BTN , uint8_t * au8_button_status)
{
	uint8_t status = Released;
	switch(BTN){
 d9c:	88 23       	and	r24, r24
 d9e:	19 f0       	breq	.+6      	; 0xda6 <pushButtonGetStatus+0xa>
 da0:	81 30       	cpi	r24, 0x01	; 1
 da2:	31 f0       	breq	.+12     	; 0xdb0 <pushButtonGetStatus+0x14>
 da4:	09 c0       	rjmp	.+18     	; 0xdb8 <pushButtonGetStatus+0x1c>
		case BTN_0:
		DIO_Read( BTN_0_GPIO, BTN_0_BIT, au8_button_status);
 da6:	ab 01       	movw	r20, r22
 da8:	60 e1       	ldi	r22, 0x10	; 16
 daa:	82 e0       	ldi	r24, 0x02	; 2
 dac:	ea d0       	rcall	.+468    	; 0xf82 <DIO_Read>
		break;
 dae:	04 c0       	rjmp	.+8      	; 0xdb8 <pushButtonGetStatus+0x1c>
		case BTN_1:
		DIO_Read( BTN_1_GPIO, BTN_1_BIT, au8_button_status);
 db0:	ab 01       	movw	r20, r22
 db2:	64 e0       	ldi	r22, 0x04	; 4
 db4:	81 e0       	ldi	r24, 0x01	; 1
 db6:	e5 d0       	rcall	.+458    	; 0xf82 <DIO_Read>
	 		au8_button_status = Pressed;
	 	}else{
			au8_button_status = Released;
	 	}
	return status;
 db8:	81 e0       	ldi	r24, 0x01	; 1
 dba:	08 95       	ret

00000dbc <vOtherFunction>:



/* Function that creates a task. */
void vOtherFunction( void )
{
 dbc:	ef 92       	push	r14
 dbe:	ff 92       	push	r15
 dc0:	0f 93       	push	r16
 dc2:	cf 93       	push	r28
 dc4:	df 93       	push	r29
 dc6:	00 d0       	rcall	.+0      	; 0xdc8 <vOtherFunction+0xc>
 dc8:	cd b7       	in	r28, 0x3d	; 61
 dca:	de b7       	in	r29, 0x3e	; 62

TaskHandle_t xHandle = NULL;
 dcc:	1a 82       	std	Y+2, r1	; 0x02
 dce:	19 82       	std	Y+1, r1	; 0x01

    /* Create the task, storing the handle. */
    xTaskCreate(
 dd0:	ce 01       	movw	r24, r28
 dd2:	01 96       	adiw	r24, 0x01	; 1
 dd4:	7c 01       	movw	r14, r24
 dd6:	00 e0       	ldi	r16, 0x00	; 0
 dd8:	21 e0       	ldi	r18, 0x01	; 1
 dda:	30 e0       	ldi	r19, 0x00	; 0
 ddc:	44 e6       	ldi	r20, 0x64	; 100
 dde:	50 e0       	ldi	r21, 0x00	; 0
 de0:	65 e6       	ldi	r22, 0x65	; 101
 de2:	70 e0       	ldi	r23, 0x00	; 0
 de4:	86 e4       	ldi	r24, 0x46	; 70
 de6:	90 e0       	ldi	r25, 0x00	; 0
 de8:	51 dc       	rcall	.-1886   	; 0x68c <xTaskCreate>
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    ( void * ) 1,    /* Parameter passed into the task. */
                    tskIDLE_PRIORITY,/* Priority at which the task is created. */
                    &xHandle );      /* Used to pass out the created task's handle. */

 xTaskCreate(
 dea:	21 e0       	ldi	r18, 0x01	; 1
 dec:	30 e0       	ldi	r19, 0x00	; 0
 dee:	44 e6       	ldi	r20, 0x64	; 100
 df0:	50 e0       	ldi	r21, 0x00	; 0
 df2:	6a e6       	ldi	r22, 0x6A	; 106
 df4:	70 e0       	ldi	r23, 0x00	; 0
 df6:	8d e4       	ldi	r24, 0x4D	; 77
 df8:	90 e0       	ldi	r25, 0x00	; 0
 dfa:	48 dc       	rcall	.-1904   	; 0x68c <xTaskCreate>
 STACK_SIZE,      /* Stack size in words, not bytes. */
 ( void * ) 1,    /* Parameter passed into the task. */
 tskIDLE_PRIORITY,/* Priority at which the task is created. */
 &xHandle );      /* Used to pass out the created task's handle. */

xTaskCreate(
 dfc:	21 e0       	ldi	r18, 0x01	; 1
 dfe:	30 e0       	ldi	r19, 0x00	; 0
 e00:	44 e6       	ldi	r20, 0x64	; 100
 e02:	50 e0       	ldi	r21, 0x00	; 0
 e04:	60 e7       	ldi	r22, 0x70	; 112
 e06:	70 e0       	ldi	r23, 0x00	; 0
 e08:	83 e9       	ldi	r24, 0x93	; 147
 e0a:	90 e0       	ldi	r25, 0x00	; 0
 e0c:	3f dc       	rcall	.-1922   	; 0x68c <xTaskCreate>
"toggelled",          /* Text name for the task. */
STACK_SIZE,      /* Stack size in words, not bytes. */
( void * ) 1,    /* Parameter passed into the task. */
tskIDLE_PRIORITY,/* Priority at which the task is created. */
&xHandle );
}
 e0e:	0f 90       	pop	r0
 e10:	0f 90       	pop	r0
 e12:	df 91       	pop	r29
 e14:	cf 91       	pop	r28
 e16:	0f 91       	pop	r16
 e18:	ff 90       	pop	r15
 e1a:	ef 90       	pop	r14
 e1c:	08 95       	ret

00000e1e <main>:
void vOtherFunction(void);
void vTaskCode( void * pvParameters );
int main(void)
{

	 vOtherFunction();
 e1e:	ce df       	rcall	.-100    	; 0xdbc <vOtherFunction>
	/*start scheduler*/
	vTaskStartScheduler();
 e20:	7d dd       	rcall	.-1286   	; 0x91c <vTaskStartScheduler>
 e22:	ff cf       	rjmp	.-2      	; 0xe22 <main+0x4>

00000e24 <DIO_init>:
 e24:	fc 01       	movw	r30, r24
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 /*check if the pointer is not null*/  
   if(DIO_info!=NULL)
 e26:	89 2b       	or	r24, r25
 e28:	09 f4       	brne	.+2      	; 0xe2c <DIO_init+0x8>
 e2a:	51 c0       	rjmp	.+162    	; 0xece <DIO_init+0xaa>
   {
 /*choose any PORT*/ 
      switch(DIO_info->GPIO)
 e2c:	80 81       	ld	r24, Z
 e2e:	81 30       	cpi	r24, 0x01	; 1
 e30:	c1 f0       	breq	.+48     	; 0xe62 <DIO_init+0x3e>
 e32:	28 f0       	brcs	.+10     	; 0xe3e <DIO_init+0x1a>
 e34:	82 30       	cpi	r24, 0x02	; 2
 e36:	39 f1       	breq	.+78     	; 0xe86 <DIO_init+0x62>
 e38:	83 30       	cpi	r24, 0x03	; 3
 e3a:	b9 f1       	breq	.+110    	; 0xeaa <DIO_init+0x86>
 e3c:	4a c0       	rjmp	.+148    	; 0xed2 <DIO_init+0xae>
      {
         case GPIOA:
               if(DIO_info->dir==OUTPUT)
 e3e:	82 81       	ldd	r24, Z+2	; 0x02
 e40:	8f 3f       	cpi	r24, 0xFF	; 255
 e42:	31 f4       	brne	.+12     	; 0xe50 <DIO_init+0x2c>
               PORTA_DIR|=(DIO_info->pins);
 e44:	9a b3       	in	r25, 0x1a	; 26
 e46:	81 81       	ldd	r24, Z+1	; 0x01
 e48:	89 2b       	or	r24, r25
 e4a:	8a bb       	out	0x1a, r24	; 26
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 e4c:	80 e0       	ldi	r24, 0x00	; 0
 e4e:	08 95       	ret
      switch(DIO_info->GPIO)
      {
         case GPIOA:
               if(DIO_info->dir==OUTPUT)
               PORTA_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
 e50:	81 11       	cpse	r24, r1
 e52:	41 c0       	rjmp	.+130    	; 0xed6 <DIO_init+0xb2>
               PORTA_DIR&=~(DIO_info->pins);
 e54:	9a b3       	in	r25, 0x1a	; 26
 e56:	81 81       	ldd	r24, Z+1	; 0x01
 e58:	80 95       	com	r24
 e5a:	89 23       	and	r24, r25
 e5c:	8a bb       	out	0x1a, r24	; 26
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 e5e:	80 e0       	ldi	r24, 0x00	; 0
 e60:	08 95       	ret
               PORTA_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
               break;
         case GPIOB:
               if(DIO_info->dir==OUTPUT)
 e62:	82 81       	ldd	r24, Z+2	; 0x02
 e64:	8f 3f       	cpi	r24, 0xFF	; 255
 e66:	31 f4       	brne	.+12     	; 0xe74 <DIO_init+0x50>
               PORTB_DIR|=(DIO_info->pins);
 e68:	97 b3       	in	r25, 0x17	; 23
 e6a:	81 81       	ldd	r24, Z+1	; 0x01
 e6c:	89 2b       	or	r24, r25
 e6e:	87 bb       	out	0x17, r24	; 23
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 e70:	80 e0       	ldi	r24, 0x00	; 0
 e72:	08 95       	ret
               EROR=E_NOK;
               break;
         case GPIOB:
               if(DIO_info->dir==OUTPUT)
               PORTB_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
 e74:	81 11       	cpse	r24, r1
 e76:	31 c0       	rjmp	.+98     	; 0xeda <DIO_init+0xb6>
               PORTB_DIR&=~(DIO_info->pins);
 e78:	97 b3       	in	r25, 0x17	; 23
 e7a:	81 81       	ldd	r24, Z+1	; 0x01
 e7c:	80 95       	com	r24
 e7e:	89 23       	and	r24, r25
 e80:	87 bb       	out	0x17, r24	; 23
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 e82:	80 e0       	ldi	r24, 0x00	; 0
 e84:	08 95       	ret
               PORTB_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
               break;
         case GPIOC:
               if(DIO_info->dir==OUTPUT)
 e86:	82 81       	ldd	r24, Z+2	; 0x02
 e88:	8f 3f       	cpi	r24, 0xFF	; 255
 e8a:	31 f4       	brne	.+12     	; 0xe98 <DIO_init+0x74>
               PORTC_DIR|=(DIO_info->pins);
 e8c:	94 b3       	in	r25, 0x14	; 20
 e8e:	81 81       	ldd	r24, Z+1	; 0x01
 e90:	89 2b       	or	r24, r25
 e92:	84 bb       	out	0x14, r24	; 20
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 e94:	80 e0       	ldi	r24, 0x00	; 0
 e96:	08 95       	ret
               EROR=E_NOK;
               break;
         case GPIOC:
               if(DIO_info->dir==OUTPUT)
               PORTC_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
 e98:	81 11       	cpse	r24, r1
 e9a:	21 c0       	rjmp	.+66     	; 0xede <DIO_init+0xba>
               PORTC_DIR&=~(DIO_info->pins);
 e9c:	94 b3       	in	r25, 0x14	; 20
 e9e:	81 81       	ldd	r24, Z+1	; 0x01
 ea0:	80 95       	com	r24
 ea2:	89 23       	and	r24, r25
 ea4:	84 bb       	out	0x14, r24	; 20
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 ea6:	80 e0       	ldi	r24, 0x00	; 0
 ea8:	08 95       	ret
               PORTC_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
               break;
         case GPIOD:
               if(DIO_info->dir==OUTPUT)
 eaa:	82 81       	ldd	r24, Z+2	; 0x02
 eac:	8f 3f       	cpi	r24, 0xFF	; 255
 eae:	31 f4       	brne	.+12     	; 0xebc <DIO_init+0x98>
               PORTD_DIR|=(DIO_info->pins);
 eb0:	91 b3       	in	r25, 0x11	; 17
 eb2:	81 81       	ldd	r24, Z+1	; 0x01
 eb4:	89 2b       	or	r24, r25
 eb6:	81 bb       	out	0x11, r24	; 17
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 eb8:	80 e0       	ldi	r24, 0x00	; 0
 eba:	08 95       	ret
               EROR=E_NOK;
               break;
         case GPIOD:
               if(DIO_info->dir==OUTPUT)
               PORTD_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
 ebc:	81 11       	cpse	r24, r1
 ebe:	11 c0       	rjmp	.+34     	; 0xee2 <DIO_init+0xbe>
               PORTD_DIR&=~(DIO_info->pins);
 ec0:	91 b3       	in	r25, 0x11	; 17
 ec2:	81 81       	ldd	r24, Z+1	; 0x01
 ec4:	80 95       	com	r24
 ec6:	89 23       	and	r24, r25
 ec8:	81 bb       	out	0x11, r24	; 17
/*Return:Error status*/
/*Description: This function can set the direction of a full port, a nibble or even one pin.*/
/******************************************************************************************/
ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info)
{/*ERROR RET VARIBALE*/ 
   ERROR_STATUS  EROR=E_OK;
 eca:	80 e0       	ldi	r24, 0x00	; 0
 ecc:	08 95       	ret
         
      }   
   }
   else
   {
      EROR=E_NOK;
 ece:	81 e0       	ldi	r24, 0x01	; 1
 ed0:	08 95       	ret
               PORTD_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
               break;
         default:
               EROR=E_NOK;
 ed2:	81 e0       	ldi	r24, 0x01	; 1
 ed4:	08 95       	ret
               if(DIO_info->dir==OUTPUT)
               PORTA_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
               PORTA_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
 ed6:	81 e0       	ldi	r24, 0x01	; 1
 ed8:	08 95       	ret
               if(DIO_info->dir==OUTPUT)
               PORTB_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
               PORTB_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
 eda:	81 e0       	ldi	r24, 0x01	; 1
 edc:	08 95       	ret
               if(DIO_info->dir==OUTPUT)
               PORTC_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
               PORTC_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
 ede:	81 e0       	ldi	r24, 0x01	; 1
 ee0:	08 95       	ret
               if(DIO_info->dir==OUTPUT)
               PORTD_DIR|=(DIO_info->pins);
               else if(DIO_info->dir==INPUT)
               PORTD_DIR&=~(DIO_info->pins);
               else
               EROR=E_NOK;
 ee2:	81 e0       	ldi	r24, 0x01	; 1
      EROR=E_NOK;
   }
   
   
   return EROR;
}
 ee4:	08 95       	ret

00000ee6 <DIO_Write>:
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
  /*choose any PORT*/  
   switch (GPIO)
 ee6:	81 30       	cpi	r24, 0x01	; 1
 ee8:	a9 f0       	breq	.+42     	; 0xf14 <DIO_Write+0x2e>
 eea:	28 f0       	brcs	.+10     	; 0xef6 <DIO_Write+0x10>
 eec:	82 30       	cpi	r24, 0x02	; 2
 eee:	09 f1       	breq	.+66     	; 0xf32 <DIO_Write+0x4c>
 ef0:	83 30       	cpi	r24, 0x03	; 3
 ef2:	71 f1       	breq	.+92     	; 0xf50 <DIO_Write+0x6a>
 ef4:	3c c0       	rjmp	.+120    	; 0xf6e <DIO_Write+0x88>
   {
      case GPIOA:
            if(value==HIGH)
 ef6:	4f 3f       	cpi	r20, 0xFF	; 255
 ef8:	29 f4       	brne	.+10     	; 0xf04 <DIO_Write+0x1e>
            PORTA_DATA|=pins;
 efa:	8b b3       	in	r24, 0x1b	; 27
 efc:	68 2b       	or	r22, r24
 efe:	6b bb       	out	0x1b, r22	; 27
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 f00:	80 e0       	ldi	r24, 0x00	; 0
 f02:	08 95       	ret
   switch (GPIO)
   {
      case GPIOA:
            if(value==HIGH)
            PORTA_DATA|=pins;
            else if(value==LOW)
 f04:	41 11       	cpse	r20, r1
 f06:	35 c0       	rjmp	.+106    	; 0xf72 <DIO_Write+0x8c>
            PORTA_DATA&=~(pins);
 f08:	8b b3       	in	r24, 0x1b	; 27
 f0a:	60 95       	com	r22
 f0c:	68 23       	and	r22, r24
 f0e:	6b bb       	out	0x1b, r22	; 27
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 f10:	80 e0       	ldi	r24, 0x00	; 0
 f12:	08 95       	ret
            PORTA_DATA&=~(pins);
            else
            EROR=E_NOK;
            break;
      case GPIOB:
            if(value==HIGH)
 f14:	4f 3f       	cpi	r20, 0xFF	; 255
 f16:	29 f4       	brne	.+10     	; 0xf22 <DIO_Write+0x3c>
            PORTB_DATA|=pins;
 f18:	88 b3       	in	r24, 0x18	; 24
 f1a:	68 2b       	or	r22, r24
 f1c:	68 bb       	out	0x18, r22	; 24
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 f1e:	80 e0       	ldi	r24, 0x00	; 0
 f20:	08 95       	ret
            EROR=E_NOK;
            break;
      case GPIOB:
            if(value==HIGH)
            PORTB_DATA|=pins;
            else if(value==LOW)
 f22:	41 11       	cpse	r20, r1
 f24:	28 c0       	rjmp	.+80     	; 0xf76 <DIO_Write+0x90>
            PORTB_DATA&=~(pins);
 f26:	88 b3       	in	r24, 0x18	; 24
 f28:	60 95       	com	r22
 f2a:	68 23       	and	r22, r24
 f2c:	68 bb       	out	0x18, r22	; 24
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 f2e:	80 e0       	ldi	r24, 0x00	; 0
 f30:	08 95       	ret
            PORTB_DATA&=~(pins);
            else
            EROR=E_NOK;
            break;
      case GPIOC:
            if(value==HIGH)
 f32:	4f 3f       	cpi	r20, 0xFF	; 255
 f34:	29 f4       	brne	.+10     	; 0xf40 <DIO_Write+0x5a>
            PORTC_DATA|=pins;
 f36:	85 b3       	in	r24, 0x15	; 21
 f38:	68 2b       	or	r22, r24
 f3a:	65 bb       	out	0x15, r22	; 21
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 f3c:	80 e0       	ldi	r24, 0x00	; 0
 f3e:	08 95       	ret
            EROR=E_NOK;
            break;
      case GPIOC:
            if(value==HIGH)
            PORTC_DATA|=pins;
            else if(value==LOW)
 f40:	41 11       	cpse	r20, r1
 f42:	1b c0       	rjmp	.+54     	; 0xf7a <DIO_Write+0x94>
            PORTC_DATA&=~(pins);
 f44:	85 b3       	in	r24, 0x15	; 21
 f46:	60 95       	com	r22
 f48:	68 23       	and	r22, r24
 f4a:	65 bb       	out	0x15, r22	; 21
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 f4c:	80 e0       	ldi	r24, 0x00	; 0
 f4e:	08 95       	ret
            PORTC_DATA&=~(pins);
            else
            EROR=E_NOK;
            break;
      case GPIOD:
            if(value==HIGH)
 f50:	4f 3f       	cpi	r20, 0xFF	; 255
 f52:	29 f4       	brne	.+10     	; 0xf5e <DIO_Write+0x78>
            PORTD_DATA|=pins;
 f54:	82 b3       	in	r24, 0x12	; 18
 f56:	68 2b       	or	r22, r24
 f58:	62 bb       	out	0x12, r22	; 18
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 f5a:	80 e0       	ldi	r24, 0x00	; 0
 f5c:	08 95       	ret
            EROR=E_NOK;
            break;
      case GPIOD:
            if(value==HIGH)
            PORTD_DATA|=pins;
            else if(value==LOW)
 f5e:	41 11       	cpse	r20, r1
 f60:	0e c0       	rjmp	.+28     	; 0xf7e <DIO_Write+0x98>
            PORTD_DATA&=~(pins);
 f62:	82 b3       	in	r24, 0x12	; 18
 f64:	60 95       	com	r22
 f66:	68 23       	and	r22, r24
 f68:	62 bb       	out	0x12, r22	; 18
* 			  or even one pin.
*/
ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value)
{ 
/*ERROR RET VARIBALE*/  
   ERROR_STATUS EROR=E_OK;
 f6a:	80 e0       	ldi	r24, 0x00	; 0
 f6c:	08 95       	ret
            else
            EROR=E_NOK;
            break;
     /*if the channel is wrong */          
      default:
            EROR=E_NOK;
 f6e:	81 e0       	ldi	r24, 0x01	; 1
 f70:	08 95       	ret
            if(value==HIGH)
            PORTA_DATA|=pins;
            else if(value==LOW)
            PORTA_DATA&=~(pins);
            else
            EROR=E_NOK;
 f72:	81 e0       	ldi	r24, 0x01	; 1
 f74:	08 95       	ret
            if(value==HIGH)
            PORTB_DATA|=pins;
            else if(value==LOW)
            PORTB_DATA&=~(pins);
            else
            EROR=E_NOK;
 f76:	81 e0       	ldi	r24, 0x01	; 1
 f78:	08 95       	ret
            if(value==HIGH)
            PORTC_DATA|=pins;
            else if(value==LOW)
            PORTC_DATA&=~(pins);
            else
            EROR=E_NOK;
 f7a:	81 e0       	ldi	r24, 0x01	; 1
 f7c:	08 95       	ret
            if(value==HIGH)
            PORTD_DATA|=pins;
            else if(value==LOW)
            PORTD_DATA&=~(pins);
            else
            EROR=E_NOK;
 f7e:	81 e0       	ldi	r24, 0x01	; 1
            break;
   }


   return EROR;
}
 f80:	08 95       	ret

00000f82 <DIO_Read>:

ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data)
{  
	ERROR_STATUS aenum_status =   E_OK;
	
		switch(GPIO){
 f82:	81 30       	cpi	r24, 0x01	; 1
 f84:	59 f0       	breq	.+22     	; 0xf9c <DIO_Read+0x1a>
 f86:	28 f0       	brcs	.+10     	; 0xf92 <DIO_Read+0x10>
 f88:	82 30       	cpi	r24, 0x02	; 2
 f8a:	69 f0       	breq	.+26     	; 0xfa6 <DIO_Read+0x24>
 f8c:	83 30       	cpi	r24, 0x03	; 3
 f8e:	81 f0       	breq	.+32     	; 0xfb0 <DIO_Read+0x2e>
 f90:	13 c0       	rjmp	.+38     	; 0xfb8 <DIO_Read+0x36>
			case GPIOA:
			*data = PORTA_PIN & pins;
 f92:	89 b3       	in	r24, 0x19	; 25
 f94:	68 23       	and	r22, r24
 f96:	fa 01       	movw	r30, r20
 f98:	60 83       	st	Z, r22
			break;
 f9a:	0e c0       	rjmp	.+28     	; 0xfb8 <DIO_Read+0x36>
			case GPIOB:
			*data = PORTB_PIN & pins;
 f9c:	86 b3       	in	r24, 0x16	; 22
 f9e:	68 23       	and	r22, r24
 fa0:	fa 01       	movw	r30, r20
 fa2:	60 83       	st	Z, r22
			break;
 fa4:	09 c0       	rjmp	.+18     	; 0xfb8 <DIO_Read+0x36>
			case GPIOC:
			*data = PORTC_PIN & pins;
 fa6:	83 b3       	in	r24, 0x13	; 19
 fa8:	68 23       	and	r22, r24
 faa:	fa 01       	movw	r30, r20
 fac:	60 83       	st	Z, r22
			break;
 fae:	04 c0       	rjmp	.+8      	; 0xfb8 <DIO_Read+0x36>
			case GPIOD:
			*data = PORTD_PIN & pins;
 fb0:	80 b3       	in	r24, 0x10	; 16
 fb2:	68 23       	and	r22, r24
 fb4:	fa 01       	movw	r30, r20
 fb6:	60 83       	st	Z, r22
			default:
			break;
		}
	
	return aenum_status;
}
 fb8:	80 e0       	ldi	r24, 0x00	; 0
 fba:	08 95       	ret

00000fbc <DIO_Toggle>:
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
   
   switch (GPIO)
 fbc:	81 30       	cpi	r24, 0x01	; 1
 fbe:	59 f0       	breq	.+22     	; 0xfd6 <DIO_Toggle+0x1a>
 fc0:	28 f0       	brcs	.+10     	; 0xfcc <DIO_Toggle+0x10>
 fc2:	82 30       	cpi	r24, 0x02	; 2
 fc4:	69 f0       	breq	.+26     	; 0xfe0 <DIO_Toggle+0x24>
 fc6:	83 30       	cpi	r24, 0x03	; 3
 fc8:	81 f0       	breq	.+32     	; 0xfea <DIO_Toggle+0x2e>
 fca:	14 c0       	rjmp	.+40     	; 0xff4 <DIO_Toggle+0x38>
   {
      case GPIOA:
            PORTA_DATA^=pins;
 fcc:	8b b3       	in	r24, 0x1b	; 27
 fce:	68 27       	eor	r22, r24
 fd0:	6b bb       	out	0x1b, r22	; 27
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 fd2:	80 e0       	ldi	r24, 0x00	; 0
   
   switch (GPIO)
   {
      case GPIOA:
            PORTA_DATA^=pins;
            break;
 fd4:	08 95       	ret
      case GPIOB:
            PORTB_DATA^=pins;
 fd6:	88 b3       	in	r24, 0x18	; 24
 fd8:	68 27       	eor	r22, r24
 fda:	68 bb       	out	0x18, r22	; 24
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 fdc:	80 e0       	ldi	r24, 0x00	; 0
      case GPIOA:
            PORTA_DATA^=pins;
            break;
      case GPIOB:
            PORTB_DATA^=pins;
            break;
 fde:	08 95       	ret
      case GPIOC:
           PORTC_DATA^=pins;
 fe0:	85 b3       	in	r24, 0x15	; 21
 fe2:	68 27       	eor	r22, r24
 fe4:	65 bb       	out	0x15, r22	; 21
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 fe6:	80 e0       	ldi	r24, 0x00	; 0
      case GPIOB:
            PORTB_DATA^=pins;
            break;
      case GPIOC:
           PORTC_DATA^=pins;
           break;
 fe8:	08 95       	ret
      case GPIOD:
          PORTD_DATA^=pins;
 fea:	82 b3       	in	r24, 0x12	; 18
 fec:	68 27       	eor	r22, r24
 fee:	62 bb       	out	0x12, r22	; 18
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 ff0:	80 e0       	ldi	r24, 0x00	; 0
      case GPIOC:
           PORTC_DATA^=pins;
           break;
      case GPIOD:
          PORTD_DATA^=pins;
          break;
 ff2:	08 95       	ret
      default:
          EROR=E_NOK;
 ff4:	81 e0       	ldi	r24, 0x01	; 1
   }


   return EROR;
   
 ff6:	08 95       	ret

00000ff8 <_exit>:
 ff8:	f8 94       	cli

00000ffa <__stop_program>:
 ffa:	ff cf       	rjmp	.-2      	; 0xffa <__stop_program>
