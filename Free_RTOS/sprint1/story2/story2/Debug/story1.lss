
story1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000f20  00000fb4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000064e  0080008a  0080008a  00000fde  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000fde  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001010  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002e0  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000031bd  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fa9  00000000  00000000  000044e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002b30  00000000  00000000  00005492  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007c8  00000000  00000000  00007fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000cb5b  00000000  00000000  0000878c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027ae  00000000  00000000  000152e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002b0  00000000  00000000  00017a95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003924  00000000  00000000  00017d45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	42 c0       	rjmp	.+132    	; 0x8a <__bad_interrupt>
   6:	00 00       	nop
   8:	40 c0       	rjmp	.+128    	; 0x8a <__bad_interrupt>
   a:	00 00       	nop
   c:	3e c0       	rjmp	.+124    	; 0x8a <__bad_interrupt>
   e:	00 00       	nop
  10:	3c c0       	rjmp	.+120    	; 0x8a <__bad_interrupt>
  12:	00 00       	nop
  14:	3a c0       	rjmp	.+116    	; 0x8a <__bad_interrupt>
  16:	00 00       	nop
  18:	38 c0       	rjmp	.+112    	; 0x8a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6e c2       	rjmp	.+1244   	; 0x4fa <__vector_7>
  1e:	00 00       	nop
  20:	34 c0       	rjmp	.+104    	; 0x8a <__bad_interrupt>
  22:	00 00       	nop
  24:	32 c0       	rjmp	.+100    	; 0x8a <__bad_interrupt>
  26:	00 00       	nop
  28:	30 c0       	rjmp	.+96     	; 0x8a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	2e c0       	rjmp	.+92     	; 0x8a <__bad_interrupt>
  2e:	00 00       	nop
  30:	2c c0       	rjmp	.+88     	; 0x8a <__bad_interrupt>
  32:	00 00       	nop
  34:	2a c0       	rjmp	.+84     	; 0x8a <__bad_interrupt>
  36:	00 00       	nop
  38:	28 c0       	rjmp	.+80     	; 0x8a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	26 c0       	rjmp	.+76     	; 0x8a <__bad_interrupt>
  3e:	00 00       	nop
  40:	24 c0       	rjmp	.+72     	; 0x8a <__bad_interrupt>
  42:	00 00       	nop
  44:	22 c0       	rjmp	.+68     	; 0x8a <__bad_interrupt>
  46:	00 00       	nop
  48:	20 c0       	rjmp	.+64     	; 0x8a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c0       	rjmp	.+60     	; 0x8a <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c0       	rjmp	.+56     	; 0x8a <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e2       	ldi	r30, 0x20	; 32
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	26 e0       	ldi	r18, 0x06	; 6
  78:	aa e8       	ldi	r26, 0x8A	; 138
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 3d       	cpi	r26, 0xD8	; 216
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	47 d7       	rcall	.+3726   	; 0xf16 <main>
  88:	49 c7       	rjmp	.+3730   	; 0xf1c <_exit>

0000008a <__bad_interrupt>:
  8a:	ba cf       	rjmp	.-140    	; 0x0 <__vectors>

0000008c <UserStoryTwoInit>:
* used in this file
************************************************************************************/
void UserStoryTwoInit(void)
{
	TaskHandle_t xHandle = NULL;
	LCD_init();
  8c:	a6 d6       	rcall	.+3404   	; 0xdda <LCD_init>
	while(TRUE)
	{
		xHandle=xTaskGetCurrentTaskHandle();
  8e:	23 d6       	rcall	.+3142   	; 0xcd6 <xTaskGetCurrentTaskHandle>
		vTaskDelete(xHandle);
  90:	ee d3       	rcall	.+2012   	; 0x86e <vTaskDelete>
  92:	fd cf       	rjmp	.-6      	; 0x8e <UserStoryTwoInit+0x2>

00000094 <UserStoryTwo>:
  94:	cf 93       	push	r28
* Parameters (out): None
* Return value: None
* Description:
************************************************************************************/
void UserStoryTwo(void)
{
  96:	df 93       	push	r29
  98:	00 d0       	rcall	.+0      	; 0x9a <UserStoryTwo+0x6>
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	static uint8_t u8_waiting_flag=FLAG_LOW;
	static uint8_t u8_pass_match_flag=CLEAR;
	static uint8_t u8_counter=CLEAR;

    /* Initialize the xLastWakeTime variable with the current time */
	UserStoryOne_LastWakeTime = xTaskGetTickCount();
  9e:	63 d4       	rcall	.+2246   	; 0x966 <xTaskGetTickCount>
  a0:	9a 83       	std	Y+2, r25	; 0x02
  a2:	89 83       	std	Y+1, r24	; 0x01
				}

				else
				{
					/* raise a the flag if any mismatch happened */
					u8_pass_match_flag = MISMATCHED;
  a4:	04 e0       	ldi	r16, 0x04	; 4
				else if(au8_Key == arr_passcode[u8_counter])
				{
					/* check if the 6 digits entered correctly */
					if(u8_counter==FIVE && u8_pass_match_flag==CLEAR)
					{
						u8_pass_match_flag = MATCHED;
  a6:	0f 2e       	mov	r0, r31
  a8:	f3 e0       	ldi	r31, 0x03	; 3
  aa:	ff 2e       	mov	r15, r31
  ac:	f0 2d       	mov	r31, r0
					if(u8_counter >= SIX)
					{
						if(u8_pass_match_flag == MATCHED)
						{
							LCD_displayString("Correct Password");
							u8_waiting_flag = FLAG_HIGH;
  ae:	ee 24       	eor	r14, r14
  b0:	e3 94       	inc	r14

    /* Initialize the xLastWakeTime variable with the current time */
	UserStoryOne_LastWakeTime = xTaskGetTickCount();
	while(TRUE)
	{
		if(u8_waiting_flag == FLAG_HIGH)
  b2:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <u8_waiting_flag.1995>
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	71 f4       	brne	.+28     	; 0xd6 <UserStoryTwo+0x42>
		{
			u8_entry_counter++;
  ba:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <u8_entry_counter.1994>
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <u8_entry_counter.1994>
			if(u8_entry_counter==ENTRIES_FOR_2_SEC)
  c4:	84 31       	cpi	r24, 0x14	; 20
  c6:	09 f0       	breq	.+2      	; 0xca <UserStoryTwo+0x36>
  c8:	40 c0       	rjmp	.+128    	; 0x14a <UserStoryTwo+0xb6>
			{
				u8_entry_counter=CLEAR;
  ca:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <u8_entry_counter.1994>
				u8_waiting_flag=FLAG_LOW;
  ce:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <u8_waiting_flag.1995>
				LCD_clearScreen();
  d2:	f6 d6       	rcall	.+3564   	; 0xec0 <LCD_clearScreen>
			}
		}
		else
		{
			/* get the pressed key */
			au8_Key = KeyPad_getPressedKey();
  d4:	3a c0       	rjmp	.+116    	; 0x14a <UserStoryTwo+0xb6>
  d6:	04 d6       	rcall	.+3080   	; 0xce0 <KeyPad_getPressedKey>
  d8:	18 2f       	mov	r17, r24

			if(au8_Key != NO_KEY_PRESSED)
  da:	83 36       	cpi	r24, 0x63	; 99
			{
				/* switch on the key value and take the appropriate action */
				au8_temp_key = au8_Key+ASCII_ADDITION;
				LCD_displayCharacter(au8_temp_key);
  dc:	b1 f1       	breq	.+108    	; 0x14a <UserStoryTwo+0xb6>
  de:	80 e3       	ldi	r24, 0x30	; 48
  e0:	81 0f       	add	r24, r17

				/*erase button is pressed */
				if(au8_Key == '#')
  e2:	92 d6       	rcall	.+3364   	; 0xe08 <LCD_displayCharacter>
  e4:	13 32       	cpi	r17, 0x23	; 35
				{
					/* clear the LCD */
					LCD_clearScreen();
  e6:	11 f4       	brne	.+4      	; 0xec <UserStoryTwo+0x58>
  e8:	eb d6       	rcall	.+3542   	; 0xec0 <LCD_clearScreen>
				}

				  /* enter button is pressed */
				else if(au8_Key == ENTER)
  ea:	2f c0       	rjmp	.+94     	; 0x14a <UserStoryTwo+0xb6>
  ec:	11 11       	cpse	r17, r1
				{
					LCD_clearScreen();
  ee:	13 c0       	rjmp	.+38     	; 0x116 <UserStoryTwo+0x82>
  f0:	e7 d6       	rcall	.+3534   	; 0xec0 <LCD_clearScreen>
					/* check if 6 digites or more are pressed */
					if(u8_counter >= SIX)
  f2:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_counter.1997>
  f6:	86 30       	cpi	r24, 0x06	; 6
  f8:	48 f0       	brcs	.+18     	; 0x10c <UserStoryTwo+0x78>
					{
						if(u8_pass_match_flag == MATCHED)
  fa:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <__data_end>
  fe:	83 30       	cpi	r24, 0x03	; 3
						{
							LCD_displayString("Correct Password");
 100:	29 f4       	brne	.+10     	; 0x10c <UserStoryTwo+0x78>
 102:	80 e6       	ldi	r24, 0x60	; 96
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	c7 d6       	rcall	.+3470   	; 0xe96 <LCD_displayString>
							u8_waiting_flag = FLAG_HIGH;
 108:	e0 92 8d 00 	sts	0x008D, r14	; 0x80008d <u8_waiting_flag.1995>
						}

					}
					/* reset the matching flag and array counter */
					u8_pass_match_flag = CLEAR;
 10c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end>
					u8_counter=CLEAR;
 110:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <u8_counter.1997>
 114:	1a c0       	rjmp	.+52     	; 0x14a <UserStoryTwo+0xb6>
				}

				else if(au8_Key == arr_passcode[u8_counter])
 116:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <u8_counter.1997>
 11a:	e8 2f       	mov	r30, r24
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	ef 58       	subi	r30, 0x8F	; 143
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	90 81       	ld	r25, Z
 124:	19 13       	cpse	r17, r25
 126:	0c c0       	rjmp	.+24     	; 0x140 <UserStoryTwo+0xac>
				{
					/* check if the 6 digits entered correctly */
					if(u8_counter==FIVE && u8_pass_match_flag==CLEAR)
 128:	85 30       	cpi	r24, 0x05	; 5
 12a:	31 f4       	brne	.+12     	; 0x138 <UserStoryTwo+0xa4>
 12c:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <__data_end>
 130:	91 11       	cpse	r25, r1
 132:	02 c0       	rjmp	.+4      	; 0x138 <UserStoryTwo+0xa4>
					{
						u8_pass_match_flag = MATCHED;
 134:	f0 92 8a 00 	sts	0x008A, r15	; 0x80008a <__data_end>
					}
					 /* increment the array counter */
					u8_counter++;
 138:	8f 5f       	subi	r24, 0xFF	; 255
 13a:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <u8_counter.1997>
 13e:	05 c0       	rjmp	.+10     	; 0x14a <UserStoryTwo+0xb6>
				}

				else
				{
					/* raise a the flag if any mismatch happened */
					u8_pass_match_flag = MISMATCHED;
 140:	00 93 8a 00 	sts	0x008A, r16	; 0x80008a <__data_end>

					/* increment the array counter */
					u8_counter++;
 144:	8f 5f       	subi	r24, 0xFF	; 255
 146:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <u8_counter.1997>
			}

		}

		/* Wait for the next cycle */
		vTaskDelayUntil( &UserStoryOne_LastWakeTime, UserStoryOne_Frequency);
 14a:	64 e6       	ldi	r22, 0x64	; 100
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	ce 01       	movw	r24, r28
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	21 d5       	rcall	.+2626   	; 0xb96 <vTaskDelayUntil>
	}
 154:	ae cf       	rjmp	.-164    	; 0xb2 <UserStoryTwo+0x1e>

00000156 <softwareDelayUS>:
		}		
	}
}


void softwareDelayUS(uint32_t u32_delay_in_US){
 156:	ab 01       	movw	r20, r22
 158:	bc 01       	movw	r22, r24
	
	for (uint16_t counter=0;counter<u32_delay_in_US;counter++){
 15a:	41 15       	cp	r20, r1
 15c:	51 05       	cpc	r21, r1
 15e:	61 05       	cpc	r22, r1
 160:	71 05       	cpc	r23, r1
 162:	71 f4       	brne	.+28     	; 0x180 <softwareDelayUS+0x2a>
 164:	08 95       	ret
 166:	01 97       	sbiw	r24, 0x01	; 1
		for(uint16_t internalcounter=0;internalcounter<40;internalcounter++){
 168:	f1 f7       	brne	.-4      	; 0x166 <softwareDelayUS+0x10>
}


void softwareDelayUS(uint32_t u32_delay_in_US){
	
	for (uint16_t counter=0;counter<u32_delay_in_US;counter++){
 16a:	2f 5f       	subi	r18, 0xFF	; 255
 16c:	3f 4f       	sbci	r19, 0xFF	; 255
 16e:	c9 01       	movw	r24, r18
 170:	a0 e0       	ldi	r26, 0x00	; 0
 172:	b0 e0       	ldi	r27, 0x00	; 0
 174:	84 17       	cp	r24, r20
 176:	95 07       	cpc	r25, r21
 178:	a6 07       	cpc	r26, r22
 17a:	b7 07       	cpc	r27, r23
 17c:	18 f0       	brcs	.+6      	; 0x184 <softwareDelayUS+0x2e>
 17e:	08 95       	ret
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	30 e0       	ldi	r19, 0x00	; 0
		}		
	}
}


void softwareDelayUS(uint32_t u32_delay_in_US){
 184:	88 e2       	ldi	r24, 0x28	; 40
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	ee cf       	rjmp	.-36     	; 0x166 <softwareDelayUS+0x10>

0000018a <pvPortMalloc>:
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
 190:	e4 d3       	rcall	.+1992   	; 0x95a <vTaskSuspendAll>
 192:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <pucAlignedHeap.2084>
 196:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <pucAlignedHeap.2084+0x1>
 19a:	89 2b       	or	r24, r25
 19c:	31 f4       	brne	.+12     	; 0x1aa <pvPortMalloc+0x20>
 19e:	83 e9       	ldi	r24, 0x93	; 147
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	90 93 8f 00 	sts	0x008F, r25	; 0x80008f <pucAlignedHeap.2084+0x1>
 1a6:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <pucAlignedHeap.2084>
 1aa:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <xNextFreeByte>
 1ae:	30 91 91 00 	lds	r19, 0x0091	; 0x800091 <xNextFreeByte+0x1>
 1b2:	c9 01       	movw	r24, r18
 1b4:	8c 0f       	add	r24, r28
 1b6:	9d 1f       	adc	r25, r29
 1b8:	8b 3d       	cpi	r24, 0xDB	; 219
 1ba:	45 e0       	ldi	r20, 0x05	; 5
 1bc:	94 07       	cpc	r25, r20
 1be:	70 f4       	brcc	.+28     	; 0x1dc <pvPortMalloc+0x52>
 1c0:	28 17       	cp	r18, r24
 1c2:	39 07       	cpc	r19, r25
 1c4:	70 f4       	brcc	.+28     	; 0x1e2 <pvPortMalloc+0x58>
 1c6:	c0 91 8e 00 	lds	r28, 0x008E	; 0x80008e <pucAlignedHeap.2084>
 1ca:	d0 91 8f 00 	lds	r29, 0x008F	; 0x80008f <pucAlignedHeap.2084+0x1>
 1ce:	c2 0f       	add	r28, r18
 1d0:	d3 1f       	adc	r29, r19
 1d2:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <xNextFreeByte+0x1>
 1d6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <xNextFreeByte>
 1da:	05 c0       	rjmp	.+10     	; 0x1e6 <pvPortMalloc+0x5c>
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
 1de:	d0 e0       	ldi	r29, 0x00	; 0
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <pvPortMalloc+0x5c>
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
 1e4:	d0 e0       	ldi	r29, 0x00	; 0
 1e6:	65 d4       	rcall	.+2250   	; 0xab2 <xTaskResumeAll>
 1e8:	ce 01       	movw	r24, r28
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <vPortFree>:
 1f0:	08 95       	ret

000001f2 <vListInitialise>:
 1f2:	fc 01       	movw	r30, r24
 1f4:	03 96       	adiw	r24, 0x03	; 3
 1f6:	92 83       	std	Z+2, r25	; 0x02
 1f8:	81 83       	std	Z+1, r24	; 0x01
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	3f ef       	ldi	r19, 0xFF	; 255
 1fe:	34 83       	std	Z+4, r19	; 0x04
 200:	23 83       	std	Z+3, r18	; 0x03
 202:	96 83       	std	Z+6, r25	; 0x06
 204:	85 83       	std	Z+5, r24	; 0x05
 206:	90 87       	std	Z+8, r25	; 0x08
 208:	87 83       	std	Z+7, r24	; 0x07
 20a:	10 82       	st	Z, r1
 20c:	08 95       	ret

0000020e <vListInitialiseItem>:
 20e:	fc 01       	movw	r30, r24
 210:	11 86       	std	Z+9, r1	; 0x09
 212:	10 86       	std	Z+8, r1	; 0x08
 214:	08 95       	ret

00000216 <vListInsertEnd>:
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	9c 01       	movw	r18, r24
 21c:	fb 01       	movw	r30, r22
 21e:	dc 01       	movw	r26, r24
 220:	11 96       	adiw	r26, 0x01	; 1
 222:	cd 91       	ld	r28, X+
 224:	dc 91       	ld	r29, X
 226:	12 97       	sbiw	r26, 0x02	; 2
 228:	d3 83       	std	Z+3, r29	; 0x03
 22a:	c2 83       	std	Z+2, r28	; 0x02
 22c:	8c 81       	ldd	r24, Y+4	; 0x04
 22e:	9d 81       	ldd	r25, Y+5	; 0x05
 230:	95 83       	std	Z+5, r25	; 0x05
 232:	84 83       	std	Z+4, r24	; 0x04
 234:	8c 81       	ldd	r24, Y+4	; 0x04
 236:	9d 81       	ldd	r25, Y+5	; 0x05
 238:	dc 01       	movw	r26, r24
 23a:	13 96       	adiw	r26, 0x03	; 3
 23c:	7c 93       	st	X, r23
 23e:	6e 93       	st	-X, r22
 240:	12 97       	sbiw	r26, 0x02	; 2
 242:	7d 83       	std	Y+5, r23	; 0x05
 244:	6c 83       	std	Y+4, r22	; 0x04
 246:	31 87       	std	Z+9, r19	; 0x09
 248:	20 87       	std	Z+8, r18	; 0x08
 24a:	f9 01       	movw	r30, r18
 24c:	80 81       	ld	r24, Z
 24e:	8f 5f       	subi	r24, 0xFF	; 255
 250:	80 83       	st	Z, r24
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <vListInsert>:
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	eb 01       	movw	r28, r22
 25e:	48 81       	ld	r20, Y
 260:	59 81       	ldd	r21, Y+1	; 0x01
 262:	4f 3f       	cpi	r20, 0xFF	; 255
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	52 07       	cpc	r21, r18
 268:	21 f4       	brne	.+8      	; 0x272 <vListInsert+0x1a>
 26a:	fc 01       	movw	r30, r24
 26c:	a7 81       	ldd	r26, Z+7	; 0x07
 26e:	b0 85       	ldd	r27, Z+8	; 0x08
 270:	0d c0       	rjmp	.+26     	; 0x28c <vListInsert+0x34>
 272:	dc 01       	movw	r26, r24
 274:	13 96       	adiw	r26, 0x03	; 3
 276:	01 c0       	rjmp	.+2      	; 0x27a <vListInsert+0x22>
 278:	df 01       	movw	r26, r30
 27a:	12 96       	adiw	r26, 0x02	; 2
 27c:	ed 91       	ld	r30, X+
 27e:	fc 91       	ld	r31, X
 280:	13 97       	sbiw	r26, 0x03	; 3
 282:	20 81       	ld	r18, Z
 284:	31 81       	ldd	r19, Z+1	; 0x01
 286:	42 17       	cp	r20, r18
 288:	53 07       	cpc	r21, r19
 28a:	b0 f7       	brcc	.-20     	; 0x278 <vListInsert+0x20>
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	ed 91       	ld	r30, X+
 290:	fc 91       	ld	r31, X
 292:	13 97       	sbiw	r26, 0x03	; 3
 294:	fb 83       	std	Y+3, r31	; 0x03
 296:	ea 83       	std	Y+2, r30	; 0x02
 298:	d5 83       	std	Z+5, r29	; 0x05
 29a:	c4 83       	std	Z+4, r28	; 0x04
 29c:	bd 83       	std	Y+5, r27	; 0x05
 29e:	ac 83       	std	Y+4, r26	; 0x04
 2a0:	13 96       	adiw	r26, 0x03	; 3
 2a2:	dc 93       	st	X, r29
 2a4:	ce 93       	st	-X, r28
 2a6:	12 97       	sbiw	r26, 0x02	; 2
 2a8:	99 87       	std	Y+9, r25	; 0x09
 2aa:	88 87       	std	Y+8, r24	; 0x08
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 81       	ld	r18, Z
 2b0:	2f 5f       	subi	r18, 0xFF	; 255
 2b2:	20 83       	st	Z, r18
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <uxListRemove>:
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	fc 01       	movw	r30, r24
 2c0:	a0 85       	ldd	r26, Z+8	; 0x08
 2c2:	b1 85       	ldd	r27, Z+9	; 0x09
 2c4:	c2 81       	ldd	r28, Z+2	; 0x02
 2c6:	d3 81       	ldd	r29, Z+3	; 0x03
 2c8:	84 81       	ldd	r24, Z+4	; 0x04
 2ca:	95 81       	ldd	r25, Z+5	; 0x05
 2cc:	9d 83       	std	Y+5, r25	; 0x05
 2ce:	8c 83       	std	Y+4, r24	; 0x04
 2d0:	c4 81       	ldd	r28, Z+4	; 0x04
 2d2:	d5 81       	ldd	r29, Z+5	; 0x05
 2d4:	82 81       	ldd	r24, Z+2	; 0x02
 2d6:	93 81       	ldd	r25, Z+3	; 0x03
 2d8:	9b 83       	std	Y+3, r25	; 0x03
 2da:	8a 83       	std	Y+2, r24	; 0x02
 2dc:	11 96       	adiw	r26, 0x01	; 1
 2de:	8d 91       	ld	r24, X+
 2e0:	9c 91       	ld	r25, X
 2e2:	12 97       	sbiw	r26, 0x02	; 2
 2e4:	e8 17       	cp	r30, r24
 2e6:	f9 07       	cpc	r31, r25
 2e8:	31 f4       	brne	.+12     	; 0x2f6 <uxListRemove+0x3c>
 2ea:	84 81       	ldd	r24, Z+4	; 0x04
 2ec:	95 81       	ldd	r25, Z+5	; 0x05
 2ee:	12 96       	adiw	r26, 0x02	; 2
 2f0:	9c 93       	st	X, r25
 2f2:	8e 93       	st	-X, r24
 2f4:	11 97       	sbiw	r26, 0x01	; 1
 2f6:	11 86       	std	Z+9, r1	; 0x09
 2f8:	10 86       	std	Z+8, r1	; 0x08
 2fa:	8c 91       	ld	r24, X
 2fc:	81 50       	subi	r24, 0x01	; 1
 2fe:	8c 93       	st	X, r24
 300:	8c 91       	ld	r24, X
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <pxPortInitialiseStack>:
 308:	31 e1       	ldi	r19, 0x11	; 17
 30a:	fc 01       	movw	r30, r24
 30c:	30 83       	st	Z, r19
 30e:	31 97       	sbiw	r30, 0x01	; 1
 310:	22 e2       	ldi	r18, 0x22	; 34
 312:	20 83       	st	Z, r18
 314:	31 97       	sbiw	r30, 0x01	; 1
 316:	a3 e3       	ldi	r26, 0x33	; 51
 318:	a0 83       	st	Z, r26
 31a:	31 97       	sbiw	r30, 0x01	; 1
 31c:	60 83       	st	Z, r22
 31e:	31 97       	sbiw	r30, 0x01	; 1
 320:	70 83       	st	Z, r23
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	10 82       	st	Z, r1
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	60 e8       	ldi	r22, 0x80	; 128
 32a:	60 83       	st	Z, r22
 32c:	31 97       	sbiw	r30, 0x01	; 1
 32e:	10 82       	st	Z, r1
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	62 e0       	ldi	r22, 0x02	; 2
 334:	60 83       	st	Z, r22
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	63 e0       	ldi	r22, 0x03	; 3
 33a:	60 83       	st	Z, r22
 33c:	31 97       	sbiw	r30, 0x01	; 1
 33e:	64 e0       	ldi	r22, 0x04	; 4
 340:	60 83       	st	Z, r22
 342:	31 97       	sbiw	r30, 0x01	; 1
 344:	65 e0       	ldi	r22, 0x05	; 5
 346:	60 83       	st	Z, r22
 348:	31 97       	sbiw	r30, 0x01	; 1
 34a:	66 e0       	ldi	r22, 0x06	; 6
 34c:	60 83       	st	Z, r22
 34e:	31 97       	sbiw	r30, 0x01	; 1
 350:	67 e0       	ldi	r22, 0x07	; 7
 352:	60 83       	st	Z, r22
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	68 e0       	ldi	r22, 0x08	; 8
 358:	60 83       	st	Z, r22
 35a:	31 97       	sbiw	r30, 0x01	; 1
 35c:	69 e0       	ldi	r22, 0x09	; 9
 35e:	60 83       	st	Z, r22
 360:	31 97       	sbiw	r30, 0x01	; 1
 362:	60 e1       	ldi	r22, 0x10	; 16
 364:	60 83       	st	Z, r22
 366:	31 97       	sbiw	r30, 0x01	; 1
 368:	30 83       	st	Z, r19
 36a:	31 97       	sbiw	r30, 0x01	; 1
 36c:	32 e1       	ldi	r19, 0x12	; 18
 36e:	30 83       	st	Z, r19
 370:	31 97       	sbiw	r30, 0x01	; 1
 372:	33 e1       	ldi	r19, 0x13	; 19
 374:	30 83       	st	Z, r19
 376:	31 97       	sbiw	r30, 0x01	; 1
 378:	34 e1       	ldi	r19, 0x14	; 20
 37a:	30 83       	st	Z, r19
 37c:	31 97       	sbiw	r30, 0x01	; 1
 37e:	35 e1       	ldi	r19, 0x15	; 21
 380:	30 83       	st	Z, r19
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	36 e1       	ldi	r19, 0x16	; 22
 386:	30 83       	st	Z, r19
 388:	31 97       	sbiw	r30, 0x01	; 1
 38a:	37 e1       	ldi	r19, 0x17	; 23
 38c:	30 83       	st	Z, r19
 38e:	31 97       	sbiw	r30, 0x01	; 1
 390:	38 e1       	ldi	r19, 0x18	; 24
 392:	30 83       	st	Z, r19
 394:	31 97       	sbiw	r30, 0x01	; 1
 396:	39 e1       	ldi	r19, 0x19	; 25
 398:	30 83       	st	Z, r19
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	30 e2       	ldi	r19, 0x20	; 32
 39e:	30 83       	st	Z, r19
 3a0:	31 97       	sbiw	r30, 0x01	; 1
 3a2:	31 e2       	ldi	r19, 0x21	; 33
 3a4:	30 83       	st	Z, r19
 3a6:	31 97       	sbiw	r30, 0x01	; 1
 3a8:	20 83       	st	Z, r18
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	23 e2       	ldi	r18, 0x23	; 35
 3ae:	20 83       	st	Z, r18
 3b0:	31 97       	sbiw	r30, 0x01	; 1
 3b2:	40 83       	st	Z, r20
 3b4:	31 97       	sbiw	r30, 0x01	; 1
 3b6:	50 83       	st	Z, r21
 3b8:	31 97       	sbiw	r30, 0x01	; 1
 3ba:	26 e2       	ldi	r18, 0x26	; 38
 3bc:	20 83       	st	Z, r18
 3be:	31 97       	sbiw	r30, 0x01	; 1
 3c0:	27 e2       	ldi	r18, 0x27	; 39
 3c2:	20 83       	st	Z, r18
 3c4:	31 97       	sbiw	r30, 0x01	; 1
 3c6:	28 e2       	ldi	r18, 0x28	; 40
 3c8:	20 83       	st	Z, r18
 3ca:	31 97       	sbiw	r30, 0x01	; 1
 3cc:	29 e2       	ldi	r18, 0x29	; 41
 3ce:	20 83       	st	Z, r18
 3d0:	31 97       	sbiw	r30, 0x01	; 1
 3d2:	20 e3       	ldi	r18, 0x30	; 48
 3d4:	20 83       	st	Z, r18
 3d6:	31 97       	sbiw	r30, 0x01	; 1
 3d8:	21 e3       	ldi	r18, 0x31	; 49
 3da:	20 83       	st	Z, r18
 3dc:	86 97       	sbiw	r24, 0x26	; 38
 3de:	08 95       	ret

000003e0 <xPortStartScheduler>:
 3e0:	1b bc       	out	0x2b, r1	; 43
 3e2:	89 ef       	ldi	r24, 0xF9	; 249
 3e4:	8a bd       	out	0x2a, r24	; 42
 3e6:	8b e0       	ldi	r24, 0x0B	; 11
 3e8:	8e bd       	out	0x2e, r24	; 46
 3ea:	89 b7       	in	r24, 0x39	; 57
 3ec:	80 61       	ori	r24, 0x10	; 16
 3ee:	89 bf       	out	0x39, r24	; 57
 3f0:	a0 91 d2 06 	lds	r26, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 3f4:	b0 91 d3 06 	lds	r27, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 3f8:	cd 91       	ld	r28, X+
 3fa:	cd bf       	out	0x3d, r28	; 61
 3fc:	dd 91       	ld	r29, X+
 3fe:	de bf       	out	0x3e, r29	; 62
 400:	ff 91       	pop	r31
 402:	ef 91       	pop	r30
 404:	df 91       	pop	r29
 406:	cf 91       	pop	r28
 408:	bf 91       	pop	r27
 40a:	af 91       	pop	r26
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	7f 91       	pop	r23
 412:	6f 91       	pop	r22
 414:	5f 91       	pop	r21
 416:	4f 91       	pop	r20
 418:	3f 91       	pop	r19
 41a:	2f 91       	pop	r18
 41c:	1f 91       	pop	r17
 41e:	0f 91       	pop	r16
 420:	ff 90       	pop	r15
 422:	ef 90       	pop	r14
 424:	df 90       	pop	r13
 426:	cf 90       	pop	r12
 428:	bf 90       	pop	r11
 42a:	af 90       	pop	r10
 42c:	9f 90       	pop	r9
 42e:	8f 90       	pop	r8
 430:	7f 90       	pop	r7
 432:	6f 90       	pop	r6
 434:	5f 90       	pop	r5
 436:	4f 90       	pop	r4
 438:	3f 90       	pop	r3
 43a:	2f 90       	pop	r2
 43c:	1f 90       	pop	r1
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	08 95       	ret
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	08 95       	ret

0000044a <vPortYield>:
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	0f 92       	push	r0
 452:	1f 92       	push	r1
 454:	11 24       	eor	r1, r1
 456:	2f 92       	push	r2
 458:	3f 92       	push	r3
 45a:	4f 92       	push	r4
 45c:	5f 92       	push	r5
 45e:	6f 92       	push	r6
 460:	7f 92       	push	r7
 462:	8f 92       	push	r8
 464:	9f 92       	push	r9
 466:	af 92       	push	r10
 468:	bf 92       	push	r11
 46a:	cf 92       	push	r12
 46c:	df 92       	push	r13
 46e:	ef 92       	push	r14
 470:	ff 92       	push	r15
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	4f 93       	push	r20
 47c:	5f 93       	push	r21
 47e:	6f 93       	push	r22
 480:	7f 93       	push	r23
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
 492:	a0 91 d2 06 	lds	r26, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 496:	b0 91 d3 06 	lds	r27, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 49a:	0d b6       	in	r0, 0x3d	; 61
 49c:	0d 92       	st	X+, r0
 49e:	0e b6       	in	r0, 0x3e	; 62
 4a0:	0d 92       	st	X+, r0
 4a2:	b3 d3       	rcall	.+1894   	; 0xc0a <vTaskSwitchContext>
 4a4:	a0 91 d2 06 	lds	r26, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 4a8:	b0 91 d3 06 	lds	r27, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 4ac:	cd 91       	ld	r28, X+
 4ae:	cd bf       	out	0x3d, r28	; 61
 4b0:	dd 91       	ld	r29, X+
 4b2:	de bf       	out	0x3e, r29	; 62
 4b4:	ff 91       	pop	r31
 4b6:	ef 91       	pop	r30
 4b8:	df 91       	pop	r29
 4ba:	cf 91       	pop	r28
 4bc:	bf 91       	pop	r27
 4be:	af 91       	pop	r26
 4c0:	9f 91       	pop	r25
 4c2:	8f 91       	pop	r24
 4c4:	7f 91       	pop	r23
 4c6:	6f 91       	pop	r22
 4c8:	5f 91       	pop	r21
 4ca:	4f 91       	pop	r20
 4cc:	3f 91       	pop	r19
 4ce:	2f 91       	pop	r18
 4d0:	1f 91       	pop	r17
 4d2:	0f 91       	pop	r16
 4d4:	ff 90       	pop	r15
 4d6:	ef 90       	pop	r14
 4d8:	df 90       	pop	r13
 4da:	cf 90       	pop	r12
 4dc:	bf 90       	pop	r11
 4de:	af 90       	pop	r10
 4e0:	9f 90       	pop	r9
 4e2:	8f 90       	pop	r8
 4e4:	7f 90       	pop	r7
 4e6:	6f 90       	pop	r6
 4e8:	5f 90       	pop	r5
 4ea:	4f 90       	pop	r4
 4ec:	3f 90       	pop	r3
 4ee:	2f 90       	pop	r2
 4f0:	1f 90       	pop	r1
 4f2:	0f 90       	pop	r0
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	0f 90       	pop	r0
 4f8:	08 95       	ret

000004fa <__vector_7>:
 4fa:	1f 92       	push	r1
 4fc:	0f 92       	push	r0
 4fe:	0f b6       	in	r0, 0x3f	; 63
 500:	0f 92       	push	r0
 502:	11 24       	eor	r1, r1
 504:	2f 93       	push	r18
 506:	3f 93       	push	r19
 508:	4f 93       	push	r20
 50a:	5f 93       	push	r21
 50c:	6f 93       	push	r22
 50e:	7f 93       	push	r23
 510:	8f 93       	push	r24
 512:	9f 93       	push	r25
 514:	af 93       	push	r26
 516:	bf 93       	push	r27
 518:	ef 93       	push	r30
 51a:	ff 93       	push	r31
 51c:	2e d2       	rcall	.+1116   	; 0x97a <xTaskIncrementTick>
 51e:	ff 91       	pop	r31
 520:	ef 91       	pop	r30
 522:	bf 91       	pop	r27
 524:	af 91       	pop	r26
 526:	9f 91       	pop	r25
 528:	8f 91       	pop	r24
 52a:	7f 91       	pop	r23
 52c:	6f 91       	pop	r22
 52e:	5f 91       	pop	r21
 530:	4f 91       	pop	r20
 532:	3f 91       	pop	r19
 534:	2f 91       	pop	r18
 536:	0f 90       	pop	r0
 538:	0f be       	out	0x3f, r0	; 63
 53a:	0f 90       	pop	r0
 53c:	1f 90       	pop	r1
 53e:	18 95       	reti

00000540 <prvResetNextTaskUnblockTime>:
 540:	e0 91 9a 06 	lds	r30, 0x069A	; 0x80069a <pxDelayedTaskList>
 544:	f0 91 9b 06 	lds	r31, 0x069B	; 0x80069b <pxDelayedTaskList+0x1>
 548:	80 81       	ld	r24, Z
 54a:	81 11       	cpse	r24, r1
 54c:	07 c0       	rjmp	.+14     	; 0x55c <prvResetNextTaskUnblockTime+0x1c>
 54e:	8f ef       	ldi	r24, 0xFF	; 255
 550:	9f ef       	ldi	r25, 0xFF	; 255
 552:	90 93 72 06 	sts	0x0672, r25	; 0x800672 <xNextTaskUnblockTime+0x1>
 556:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <xNextTaskUnblockTime>
 55a:	08 95       	ret
 55c:	e0 91 9a 06 	lds	r30, 0x069A	; 0x80069a <pxDelayedTaskList>
 560:	f0 91 9b 06 	lds	r31, 0x069B	; 0x80069b <pxDelayedTaskList+0x1>
 564:	05 80       	ldd	r0, Z+5	; 0x05
 566:	f6 81       	ldd	r31, Z+6	; 0x06
 568:	e0 2d       	mov	r30, r0
 56a:	06 80       	ldd	r0, Z+6	; 0x06
 56c:	f7 81       	ldd	r31, Z+7	; 0x07
 56e:	e0 2d       	mov	r30, r0
 570:	82 81       	ldd	r24, Z+2	; 0x02
 572:	93 81       	ldd	r25, Z+3	; 0x03
 574:	90 93 72 06 	sts	0x0672, r25	; 0x800672 <xNextTaskUnblockTime+0x1>
 578:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <xNextTaskUnblockTime>
 57c:	08 95       	ret

0000057e <prvIdleTask>:
 57e:	06 e8       	ldi	r16, 0x86	; 134
 580:	16 e0       	ldi	r17, 0x06	; 6
 582:	80 91 85 06 	lds	r24, 0x0685	; 0x800685 <uxDeletedTasksWaitingCleanUp>
 586:	88 23       	and	r24, r24
 588:	11 f1       	breq	.+68     	; 0x5ce <prvIdleTask+0x50>
 58a:	0f b6       	in	r0, 0x3f	; 63
 58c:	f8 94       	cli
 58e:	0f 92       	push	r0
 590:	d8 01       	movw	r26, r16
 592:	15 96       	adiw	r26, 0x05	; 5
 594:	ed 91       	ld	r30, X+
 596:	fc 91       	ld	r31, X
 598:	16 97       	sbiw	r26, 0x06	; 6
 59a:	c6 81       	ldd	r28, Z+6	; 0x06
 59c:	d7 81       	ldd	r29, Z+7	; 0x07
 59e:	ce 01       	movw	r24, r28
 5a0:	02 96       	adiw	r24, 0x02	; 2
 5a2:	8b de       	rcall	.-746    	; 0x2ba <uxListRemove>
 5a4:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <uxCurrentNumberOfTasks>
 5a8:	81 50       	subi	r24, 0x01	; 1
 5aa:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <uxCurrentNumberOfTasks>
 5ae:	80 91 85 06 	lds	r24, 0x0685	; 0x800685 <uxDeletedTasksWaitingCleanUp>
 5b2:	81 50       	subi	r24, 0x01	; 1
 5b4:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <uxDeletedTasksWaitingCleanUp>
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	8f 89       	ldd	r24, Y+23	; 0x17
 5be:	98 8d       	ldd	r25, Y+24	; 0x18
 5c0:	17 de       	rcall	.-978    	; 0x1f0 <vPortFree>
 5c2:	ce 01       	movw	r24, r28
 5c4:	15 de       	rcall	.-982    	; 0x1f0 <vPortFree>
 5c6:	80 91 85 06 	lds	r24, 0x0685	; 0x800685 <uxDeletedTasksWaitingCleanUp>
 5ca:	81 11       	cpse	r24, r1
 5cc:	de cf       	rjmp	.-68     	; 0x58a <prvIdleTask+0xc>
 5ce:	3d df       	rcall	.-390    	; 0x44a <vPortYield>
 5d0:	d8 cf       	rjmp	.-80     	; 0x582 <prvIdleTask+0x4>

000005d2 <prvAddCurrentTaskToDelayedList>:
 5d2:	ff 92       	push	r15
 5d4:	0f 93       	push	r16
 5d6:	1f 93       	push	r17
 5d8:	cf 93       	push	r28
 5da:	df 93       	push	r29
 5dc:	ec 01       	movw	r28, r24
 5de:	f6 2e       	mov	r15, r22
 5e0:	00 91 79 06 	lds	r16, 0x0679	; 0x800679 <xTickCount>
 5e4:	10 91 7a 06 	lds	r17, 0x067A	; 0x80067a <xTickCount+0x1>
 5e8:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 5ec:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 5f0:	02 96       	adiw	r24, 0x02	; 2
 5f2:	63 de       	rcall	.-826    	; 0x2ba <uxListRemove>
 5f4:	cf 3f       	cpi	r28, 0xFF	; 255
 5f6:	8f ef       	ldi	r24, 0xFF	; 255
 5f8:	d8 07       	cpc	r29, r24
 5fa:	61 f4       	brne	.+24     	; 0x614 <prvAddCurrentTaskToDelayedList+0x42>
 5fc:	ff 20       	and	r15, r15
 5fe:	51 f0       	breq	.+20     	; 0x614 <prvAddCurrentTaskToDelayedList+0x42>
 600:	60 91 d2 06 	lds	r22, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 604:	70 91 d3 06 	lds	r23, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 608:	6e 5f       	subi	r22, 0xFE	; 254
 60a:	7f 4f       	sbci	r23, 0xFF	; 255
 60c:	8c e7       	ldi	r24, 0x7C	; 124
 60e:	96 e0       	ldi	r25, 0x06	; 6
 610:	02 de       	rcall	.-1020   	; 0x216 <vListInsertEnd>
 612:	2d c0       	rjmp	.+90     	; 0x66e <prvAddCurrentTaskToDelayedList+0x9c>
 614:	c0 0f       	add	r28, r16
 616:	d1 1f       	adc	r29, r17
 618:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 61c:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 620:	d3 83       	std	Z+3, r29	; 0x03
 622:	c2 83       	std	Z+2, r28	; 0x02
 624:	c0 17       	cp	r28, r16
 626:	d1 07       	cpc	r29, r17
 628:	60 f4       	brcc	.+24     	; 0x642 <prvAddCurrentTaskToDelayedList+0x70>
 62a:	60 91 d2 06 	lds	r22, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 62e:	70 91 d3 06 	lds	r23, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 632:	80 91 98 06 	lds	r24, 0x0698	; 0x800698 <pxOverflowDelayedTaskList>
 636:	90 91 99 06 	lds	r25, 0x0699	; 0x800699 <pxOverflowDelayedTaskList+0x1>
 63a:	6e 5f       	subi	r22, 0xFE	; 254
 63c:	7f 4f       	sbci	r23, 0xFF	; 255
 63e:	0c de       	rcall	.-1000   	; 0x258 <vListInsert>
 640:	16 c0       	rjmp	.+44     	; 0x66e <prvAddCurrentTaskToDelayedList+0x9c>
 642:	60 91 d2 06 	lds	r22, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 646:	70 91 d3 06 	lds	r23, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 64a:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <pxDelayedTaskList>
 64e:	90 91 9b 06 	lds	r25, 0x069B	; 0x80069b <pxDelayedTaskList+0x1>
 652:	6e 5f       	subi	r22, 0xFE	; 254
 654:	7f 4f       	sbci	r23, 0xFF	; 255
 656:	00 de       	rcall	.-1024   	; 0x258 <vListInsert>
 658:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <xNextTaskUnblockTime>
 65c:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <xNextTaskUnblockTime+0x1>
 660:	c8 17       	cp	r28, r24
 662:	d9 07       	cpc	r29, r25
 664:	20 f4       	brcc	.+8      	; 0x66e <prvAddCurrentTaskToDelayedList+0x9c>
 666:	d0 93 72 06 	sts	0x0672, r29	; 0x800672 <xNextTaskUnblockTime+0x1>
 66a:	c0 93 71 06 	sts	0x0671, r28	; 0x800671 <xNextTaskUnblockTime>
 66e:	df 91       	pop	r29
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	ff 90       	pop	r15
 678:	08 95       	ret

0000067a <xTaskCreate>:
 67a:	4f 92       	push	r4
 67c:	5f 92       	push	r5
 67e:	6f 92       	push	r6
 680:	7f 92       	push	r7
 682:	8f 92       	push	r8
 684:	9f 92       	push	r9
 686:	af 92       	push	r10
 688:	bf 92       	push	r11
 68a:	cf 92       	push	r12
 68c:	df 92       	push	r13
 68e:	ef 92       	push	r14
 690:	ff 92       	push	r15
 692:	0f 93       	push	r16
 694:	cf 93       	push	r28
 696:	df 93       	push	r29
 698:	4c 01       	movw	r8, r24
 69a:	6b 01       	movw	r12, r22
 69c:	5a 01       	movw	r10, r20
 69e:	29 01       	movw	r4, r18
 6a0:	ca 01       	movw	r24, r20
 6a2:	73 dd       	rcall	.-1306   	; 0x18a <pvPortMalloc>
 6a4:	3c 01       	movw	r6, r24
 6a6:	89 2b       	or	r24, r25
 6a8:	09 f4       	brne	.+2      	; 0x6ac <xTaskCreate+0x32>
 6aa:	d0 c0       	rjmp	.+416    	; 0x84c <xTaskCreate+0x1d2>
 6ac:	86 e2       	ldi	r24, 0x26	; 38
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	6c dd       	rcall	.-1320   	; 0x18a <pvPortMalloc>
 6b2:	ec 01       	movw	r28, r24
 6b4:	89 2b       	or	r24, r25
 6b6:	59 f0       	breq	.+22     	; 0x6ce <xTaskCreate+0x54>
 6b8:	78 8e       	std	Y+24, r7	; 0x18
 6ba:	6f 8a       	std	Y+23, r6	; 0x17
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	a8 1a       	sub	r10, r24
 6c0:	b1 08       	sbc	r11, r1
 6c2:	a6 0c       	add	r10, r6
 6c4:	b7 1c       	adc	r11, r7
 6c6:	c1 14       	cp	r12, r1
 6c8:	d1 04       	cpc	r13, r1
 6ca:	21 f4       	brne	.+8      	; 0x6d4 <xTaskCreate+0x5a>
 6cc:	1f c0       	rjmp	.+62     	; 0x70c <xTaskCreate+0x92>
 6ce:	c3 01       	movw	r24, r6
 6d0:	8f dd       	rcall	.-1250   	; 0x1f0 <vPortFree>
 6d2:	bc c0       	rjmp	.+376    	; 0x84c <xTaskCreate+0x1d2>
 6d4:	d6 01       	movw	r26, r12
 6d6:	8c 91       	ld	r24, X
 6d8:	89 8f       	std	Y+25, r24	; 0x19
 6da:	8c 91       	ld	r24, X
 6dc:	88 23       	and	r24, r24
 6de:	a1 f0       	breq	.+40     	; 0x708 <xTaskCreate+0x8e>
 6e0:	ae 01       	movw	r20, r28
 6e2:	46 5e       	subi	r20, 0xE6	; 230
 6e4:	5f 4f       	sbci	r21, 0xFF	; 255
 6e6:	f6 01       	movw	r30, r12
 6e8:	31 96       	adiw	r30, 0x01	; 1
 6ea:	b8 e0       	ldi	r27, 0x08	; 8
 6ec:	cb 0e       	add	r12, r27
 6ee:	d1 1c       	adc	r13, r1
 6f0:	cf 01       	movw	r24, r30
 6f2:	21 91       	ld	r18, Z+
 6f4:	da 01       	movw	r26, r20
 6f6:	2d 93       	st	X+, r18
 6f8:	ad 01       	movw	r20, r26
 6fa:	dc 01       	movw	r26, r24
 6fc:	8c 91       	ld	r24, X
 6fe:	88 23       	and	r24, r24
 700:	19 f0       	breq	.+6      	; 0x708 <xTaskCreate+0x8e>
 702:	ec 15       	cp	r30, r12
 704:	fd 05       	cpc	r31, r13
 706:	a1 f7       	brne	.-24     	; 0x6f0 <xTaskCreate+0x76>
 708:	18 a2       	std	Y+32, r1	; 0x20
 70a:	01 c0       	rjmp	.+2      	; 0x70e <xTaskCreate+0x94>
 70c:	19 8e       	std	Y+25, r1	; 0x19
 70e:	04 30       	cpi	r16, 0x04	; 4
 710:	08 f0       	brcs	.+2      	; 0x714 <xTaskCreate+0x9a>
 712:	03 e0       	ldi	r16, 0x03	; 3
 714:	0e 8b       	std	Y+22, r16	; 0x16
 716:	6e 01       	movw	r12, r28
 718:	b2 e0       	ldi	r27, 0x02	; 2
 71a:	cb 0e       	add	r12, r27
 71c:	d1 1c       	adc	r13, r1
 71e:	c6 01       	movw	r24, r12
 720:	76 dd       	rcall	.-1300   	; 0x20e <vListInitialiseItem>
 722:	ce 01       	movw	r24, r28
 724:	0c 96       	adiw	r24, 0x0c	; 12
 726:	73 dd       	rcall	.-1306   	; 0x20e <vListInitialiseItem>
 728:	d9 87       	std	Y+9, r29	; 0x09
 72a:	c8 87       	std	Y+8, r28	; 0x08
 72c:	84 e0       	ldi	r24, 0x04	; 4
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	80 1b       	sub	r24, r16
 732:	91 09       	sbc	r25, r1
 734:	9d 87       	std	Y+13, r25	; 0x0d
 736:	8c 87       	std	Y+12, r24	; 0x0c
 738:	db 8b       	std	Y+19, r29	; 0x13
 73a:	ca 8b       	std	Y+18, r28	; 0x12
 73c:	19 a2       	std	Y+33, r1	; 0x21
 73e:	1a a2       	std	Y+34, r1	; 0x22
 740:	1b a2       	std	Y+35, r1	; 0x23
 742:	1c a2       	std	Y+36, r1	; 0x24
 744:	1d a2       	std	Y+37, r1	; 0x25
 746:	a2 01       	movw	r20, r4
 748:	b4 01       	movw	r22, r8
 74a:	c5 01       	movw	r24, r10
 74c:	dd dd       	rcall	.-1094   	; 0x308 <pxPortInitialiseStack>
 74e:	99 83       	std	Y+1, r25	; 0x01
 750:	88 83       	st	Y, r24
 752:	e1 14       	cp	r14, r1
 754:	f1 04       	cpc	r15, r1
 756:	19 f0       	breq	.+6      	; 0x75e <xTaskCreate+0xe4>
 758:	f7 01       	movw	r30, r14
 75a:	d1 83       	std	Z+1, r29	; 0x01
 75c:	c0 83       	st	Z, r28
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	f8 94       	cli
 762:	0f 92       	push	r0
 764:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <uxCurrentNumberOfTasks>
 768:	8f 5f       	subi	r24, 0xFF	; 255
 76a:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <uxCurrentNumberOfTasks>
 76e:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 772:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 776:	89 2b       	or	r24, r25
 778:	89 f5       	brne	.+98     	; 0x7dc <xTaskCreate+0x162>
 77a:	d0 93 d3 06 	sts	0x06D3, r29	; 0x8006d3 <pxCurrentTCB+0x1>
 77e:	c0 93 d2 06 	sts	0x06D2, r28	; 0x8006d2 <pxCurrentTCB>
 782:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <uxCurrentNumberOfTasks>
 786:	81 30       	cpi	r24, 0x01	; 1
 788:	09 f0       	breq	.+2      	; 0x78c <xTaskCreate+0x112>
 78a:	38 c0       	rjmp	.+112    	; 0x7fc <xTaskCreate+0x182>
 78c:	8e ea       	ldi	r24, 0xAE	; 174
 78e:	96 e0       	ldi	r25, 0x06	; 6
 790:	30 dd       	rcall	.-1440   	; 0x1f2 <vListInitialise>
 792:	87 eb       	ldi	r24, 0xB7	; 183
 794:	96 e0       	ldi	r25, 0x06	; 6
 796:	2d dd       	rcall	.-1446   	; 0x1f2 <vListInitialise>
 798:	80 ec       	ldi	r24, 0xC0	; 192
 79a:	96 e0       	ldi	r25, 0x06	; 6
 79c:	2a dd       	rcall	.-1452   	; 0x1f2 <vListInitialise>
 79e:	89 ec       	ldi	r24, 0xC9	; 201
 7a0:	96 e0       	ldi	r25, 0x06	; 6
 7a2:	27 dd       	rcall	.-1458   	; 0x1f2 <vListInitialise>
 7a4:	85 ea       	ldi	r24, 0xA5	; 165
 7a6:	96 e0       	ldi	r25, 0x06	; 6
 7a8:	24 dd       	rcall	.-1464   	; 0x1f2 <vListInitialise>
 7aa:	8c e9       	ldi	r24, 0x9C	; 156
 7ac:	96 e0       	ldi	r25, 0x06	; 6
 7ae:	21 dd       	rcall	.-1470   	; 0x1f2 <vListInitialise>
 7b0:	8f e8       	ldi	r24, 0x8F	; 143
 7b2:	96 e0       	ldi	r25, 0x06	; 6
 7b4:	1e dd       	rcall	.-1476   	; 0x1f2 <vListInitialise>
 7b6:	86 e8       	ldi	r24, 0x86	; 134
 7b8:	96 e0       	ldi	r25, 0x06	; 6
 7ba:	1b dd       	rcall	.-1482   	; 0x1f2 <vListInitialise>
 7bc:	8c e7       	ldi	r24, 0x7C	; 124
 7be:	96 e0       	ldi	r25, 0x06	; 6
 7c0:	18 dd       	rcall	.-1488   	; 0x1f2 <vListInitialise>
 7c2:	85 ea       	ldi	r24, 0xA5	; 165
 7c4:	96 e0       	ldi	r25, 0x06	; 6
 7c6:	90 93 9b 06 	sts	0x069B, r25	; 0x80069b <pxDelayedTaskList+0x1>
 7ca:	80 93 9a 06 	sts	0x069A, r24	; 0x80069a <pxDelayedTaskList>
 7ce:	8c e9       	ldi	r24, 0x9C	; 156
 7d0:	96 e0       	ldi	r25, 0x06	; 6
 7d2:	90 93 99 06 	sts	0x0699, r25	; 0x800699 <pxOverflowDelayedTaskList+0x1>
 7d6:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pxOverflowDelayedTaskList>
 7da:	10 c0       	rjmp	.+32     	; 0x7fc <xTaskCreate+0x182>
 7dc:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <xSchedulerRunning>
 7e0:	81 11       	cpse	r24, r1
 7e2:	0c c0       	rjmp	.+24     	; 0x7fc <xTaskCreate+0x182>
 7e4:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 7e8:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 7ec:	96 89       	ldd	r25, Z+22	; 0x16
 7ee:	8e 89       	ldd	r24, Y+22	; 0x16
 7f0:	89 17       	cp	r24, r25
 7f2:	20 f0       	brcs	.+8      	; 0x7fc <xTaskCreate+0x182>
 7f4:	d0 93 d3 06 	sts	0x06D3, r29	; 0x8006d3 <pxCurrentTCB+0x1>
 7f8:	c0 93 d2 06 	sts	0x06D2, r28	; 0x8006d2 <pxCurrentTCB>
 7fc:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <uxTaskNumber>
 800:	8f 5f       	subi	r24, 0xFF	; 255
 802:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <uxTaskNumber>
 806:	8e 89       	ldd	r24, Y+22	; 0x16
 808:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <uxTopReadyPriority>
 80c:	98 17       	cp	r25, r24
 80e:	10 f4       	brcc	.+4      	; 0x814 <xTaskCreate+0x19a>
 810:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	9c 01       	movw	r18, r24
 818:	22 0f       	add	r18, r18
 81a:	33 1f       	adc	r19, r19
 81c:	22 0f       	add	r18, r18
 81e:	33 1f       	adc	r19, r19
 820:	22 0f       	add	r18, r18
 822:	33 1f       	adc	r19, r19
 824:	82 0f       	add	r24, r18
 826:	93 1f       	adc	r25, r19
 828:	b6 01       	movw	r22, r12
 82a:	82 55       	subi	r24, 0x52	; 82
 82c:	99 4f       	sbci	r25, 0xF9	; 249
 82e:	f3 dc       	rcall	.-1562   	; 0x216 <vListInsertEnd>
 830:	0f 90       	pop	r0
 832:	0f be       	out	0x3f, r0	; 63
 834:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <xSchedulerRunning>
 838:	88 23       	and	r24, r24
 83a:	31 f0       	breq	.+12     	; 0x848 <xTaskCreate+0x1ce>
 83c:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 840:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 844:	81 e0       	ldi	r24, 0x01	; 1
 846:	03 c0       	rjmp	.+6      	; 0x84e <xTaskCreate+0x1d4>
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	01 c0       	rjmp	.+2      	; 0x84e <xTaskCreate+0x1d4>
 84c:	8f ef       	ldi	r24, 0xFF	; 255
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	0f 91       	pop	r16
 854:	ff 90       	pop	r15
 856:	ef 90       	pop	r14
 858:	df 90       	pop	r13
 85a:	cf 90       	pop	r12
 85c:	bf 90       	pop	r11
 85e:	af 90       	pop	r10
 860:	9f 90       	pop	r9
 862:	8f 90       	pop	r8
 864:	7f 90       	pop	r7
 866:	6f 90       	pop	r6
 868:	5f 90       	pop	r5
 86a:	4f 90       	pop	r4
 86c:	08 95       	ret

0000086e <vTaskDelete>:
 86e:	0f 93       	push	r16
 870:	1f 93       	push	r17
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	ec 01       	movw	r28, r24
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	f8 94       	cli
 87c:	0f 92       	push	r0
 87e:	89 2b       	or	r24, r25
 880:	21 f4       	brne	.+8      	; 0x88a <vTaskDelete+0x1c>
 882:	c0 91 d2 06 	lds	r28, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 886:	d0 91 d3 06 	lds	r29, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 88a:	8e 01       	movw	r16, r28
 88c:	0e 5f       	subi	r16, 0xFE	; 254
 88e:	1f 4f       	sbci	r17, 0xFF	; 255
 890:	c8 01       	movw	r24, r16
 892:	13 dd       	rcall	.-1498   	; 0x2ba <uxListRemove>
 894:	8c 89       	ldd	r24, Y+20	; 0x14
 896:	9d 89       	ldd	r25, Y+21	; 0x15
 898:	89 2b       	or	r24, r25
 89a:	19 f0       	breq	.+6      	; 0x8a2 <vTaskDelete+0x34>
 89c:	ce 01       	movw	r24, r28
 89e:	0c 96       	adiw	r24, 0x0c	; 12
 8a0:	0c dd       	rcall	.-1512   	; 0x2ba <uxListRemove>
 8a2:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <uxTaskNumber>
 8a6:	8f 5f       	subi	r24, 0xFF	; 255
 8a8:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <uxTaskNumber>
 8ac:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 8b0:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 8b4:	c8 17       	cp	r28, r24
 8b6:	d9 07       	cpc	r29, r25
 8b8:	51 f4       	brne	.+20     	; 0x8ce <vTaskDelete+0x60>
 8ba:	b8 01       	movw	r22, r16
 8bc:	86 e8       	ldi	r24, 0x86	; 134
 8be:	96 e0       	ldi	r25, 0x06	; 6
 8c0:	aa dc       	rcall	.-1708   	; 0x216 <vListInsertEnd>
 8c2:	80 91 85 06 	lds	r24, 0x0685	; 0x800685 <uxDeletedTasksWaitingCleanUp>
 8c6:	8f 5f       	subi	r24, 0xFF	; 255
 8c8:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <uxDeletedTasksWaitingCleanUp>
 8cc:	0b c0       	rjmp	.+22     	; 0x8e4 <vTaskDelete+0x76>
 8ce:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <uxCurrentNumberOfTasks>
 8d2:	81 50       	subi	r24, 0x01	; 1
 8d4:	80 93 7b 06 	sts	0x067B, r24	; 0x80067b <uxCurrentNumberOfTasks>
 8d8:	8f 89       	ldd	r24, Y+23	; 0x17
 8da:	98 8d       	ldd	r25, Y+24	; 0x18
 8dc:	89 dc       	rcall	.-1774   	; 0x1f0 <vPortFree>
 8de:	ce 01       	movw	r24, r28
 8e0:	87 dc       	rcall	.-1778   	; 0x1f0 <vPortFree>
 8e2:	2e de       	rcall	.-932    	; 0x540 <prvResetNextTaskUnblockTime>
 8e4:	0f 90       	pop	r0
 8e6:	0f be       	out	0x3f, r0	; 63
 8e8:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <xSchedulerRunning>
 8ec:	88 23       	and	r24, r24
 8ee:	41 f0       	breq	.+16     	; 0x900 <vTaskDelete+0x92>
 8f0:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 8f4:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 8f8:	c8 17       	cp	r28, r24
 8fa:	d9 07       	cpc	r29, r25
 8fc:	09 f4       	brne	.+2      	; 0x900 <vTaskDelete+0x92>
 8fe:	a5 dd       	rcall	.-1206   	; 0x44a <vPortYield>
 900:	df 91       	pop	r29
 902:	cf 91       	pop	r28
 904:	1f 91       	pop	r17
 906:	0f 91       	pop	r16
 908:	08 95       	ret

0000090a <vTaskStartScheduler>:
 90a:	ef 92       	push	r14
 90c:	ff 92       	push	r15
 90e:	0f 93       	push	r16
 910:	0f 2e       	mov	r0, r31
 912:	ff e6       	ldi	r31, 0x6F	; 111
 914:	ef 2e       	mov	r14, r31
 916:	f6 e0       	ldi	r31, 0x06	; 6
 918:	ff 2e       	mov	r15, r31
 91a:	f0 2d       	mov	r31, r0
 91c:	00 e0       	ldi	r16, 0x00	; 0
 91e:	20 e0       	ldi	r18, 0x00	; 0
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	45 e5       	ldi	r20, 0x55	; 85
 924:	50 e0       	ldi	r21, 0x00	; 0
 926:	67 e7       	ldi	r22, 0x77	; 119
 928:	70 e0       	ldi	r23, 0x00	; 0
 92a:	8f eb       	ldi	r24, 0xBF	; 191
 92c:	92 e0       	ldi	r25, 0x02	; 2
 92e:	a5 de       	rcall	.-694    	; 0x67a <xTaskCreate>
 930:	81 30       	cpi	r24, 0x01	; 1
 932:	79 f4       	brne	.+30     	; 0x952 <vTaskStartScheduler+0x48>
 934:	f8 94       	cli
 936:	8f ef       	ldi	r24, 0xFF	; 255
 938:	9f ef       	ldi	r25, 0xFF	; 255
 93a:	90 93 72 06 	sts	0x0672, r25	; 0x800672 <xNextTaskUnblockTime+0x1>
 93e:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <xNextTaskUnblockTime>
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <xSchedulerRunning>
 948:	10 92 7a 06 	sts	0x067A, r1	; 0x80067a <xTickCount+0x1>
 94c:	10 92 79 06 	sts	0x0679, r1	; 0x800679 <xTickCount>
 950:	47 dd       	rcall	.-1394   	; 0x3e0 <xPortStartScheduler>
 952:	0f 91       	pop	r16
 954:	ff 90       	pop	r15
 956:	ef 90       	pop	r14
 958:	08 95       	ret

0000095a <vTaskSuspendAll>:
 95a:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <uxSchedulerSuspended>
 95e:	8f 5f       	subi	r24, 0xFF	; 255
 960:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxSchedulerSuspended>
 964:	08 95       	ret

00000966 <xTaskGetTickCount>:
 966:	0f b6       	in	r0, 0x3f	; 63
 968:	f8 94       	cli
 96a:	0f 92       	push	r0
 96c:	80 91 79 06 	lds	r24, 0x0679	; 0x800679 <xTickCount>
 970:	90 91 7a 06 	lds	r25, 0x067A	; 0x80067a <xTickCount+0x1>
 974:	0f 90       	pop	r0
 976:	0f be       	out	0x3f, r0	; 63
 978:	08 95       	ret

0000097a <xTaskIncrementTick>:
 97a:	ef 92       	push	r14
 97c:	ff 92       	push	r15
 97e:	0f 93       	push	r16
 980:	1f 93       	push	r17
 982:	cf 93       	push	r28
 984:	df 93       	push	r29
 986:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <uxSchedulerSuspended>
 98a:	81 11       	cpse	r24, r1
 98c:	85 c0       	rjmp	.+266    	; 0xa98 <xTaskIncrementTick+0x11e>
 98e:	e0 90 79 06 	lds	r14, 0x0679	; 0x800679 <xTickCount>
 992:	f0 90 7a 06 	lds	r15, 0x067A	; 0x80067a <xTickCount+0x1>
 996:	8f ef       	ldi	r24, 0xFF	; 255
 998:	e8 1a       	sub	r14, r24
 99a:	f8 0a       	sbc	r15, r24
 99c:	f0 92 7a 06 	sts	0x067A, r15	; 0x80067a <xTickCount+0x1>
 9a0:	e0 92 79 06 	sts	0x0679, r14	; 0x800679 <xTickCount>
 9a4:	e1 14       	cp	r14, r1
 9a6:	f1 04       	cpc	r15, r1
 9a8:	b1 f4       	brne	.+44     	; 0x9d6 <xTaskIncrementTick+0x5c>
 9aa:	80 91 9a 06 	lds	r24, 0x069A	; 0x80069a <pxDelayedTaskList>
 9ae:	90 91 9b 06 	lds	r25, 0x069B	; 0x80069b <pxDelayedTaskList+0x1>
 9b2:	20 91 98 06 	lds	r18, 0x0698	; 0x800698 <pxOverflowDelayedTaskList>
 9b6:	30 91 99 06 	lds	r19, 0x0699	; 0x800699 <pxOverflowDelayedTaskList+0x1>
 9ba:	30 93 9b 06 	sts	0x069B, r19	; 0x80069b <pxDelayedTaskList+0x1>
 9be:	20 93 9a 06 	sts	0x069A, r18	; 0x80069a <pxDelayedTaskList>
 9c2:	90 93 99 06 	sts	0x0699, r25	; 0x800699 <pxOverflowDelayedTaskList+0x1>
 9c6:	80 93 98 06 	sts	0x0698, r24	; 0x800698 <pxOverflowDelayedTaskList>
 9ca:	80 91 74 06 	lds	r24, 0x0674	; 0x800674 <xNumOfOverflows>
 9ce:	8f 5f       	subi	r24, 0xFF	; 255
 9d0:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <xNumOfOverflows>
 9d4:	b5 dd       	rcall	.-1174   	; 0x540 <prvResetNextTaskUnblockTime>
 9d6:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <xNextTaskUnblockTime>
 9da:	90 91 72 06 	lds	r25, 0x0672	; 0x800672 <xNextTaskUnblockTime+0x1>
 9de:	e8 16       	cp	r14, r24
 9e0:	f9 06       	cpc	r15, r25
 9e2:	08 f4       	brcc	.+2      	; 0x9e6 <xTaskIncrementTick+0x6c>
 9e4:	5e c0       	rjmp	.+188    	; 0xaa2 <xTaskIncrementTick+0x128>
 9e6:	e0 91 9a 06 	lds	r30, 0x069A	; 0x80069a <pxDelayedTaskList>
 9ea:	f0 91 9b 06 	lds	r31, 0x069B	; 0x80069b <pxDelayedTaskList+0x1>
 9ee:	80 81       	ld	r24, Z
 9f0:	88 23       	and	r24, r24
 9f2:	79 f0       	breq	.+30     	; 0xa12 <xTaskIncrementTick+0x98>
 9f4:	e0 91 9a 06 	lds	r30, 0x069A	; 0x80069a <pxDelayedTaskList>
 9f8:	f0 91 9b 06 	lds	r31, 0x069B	; 0x80069b <pxDelayedTaskList+0x1>
 9fc:	05 80       	ldd	r0, Z+5	; 0x05
 9fe:	f6 81       	ldd	r31, Z+6	; 0x06
 a00:	e0 2d       	mov	r30, r0
 a02:	c6 81       	ldd	r28, Z+6	; 0x06
 a04:	d7 81       	ldd	r29, Z+7	; 0x07
 a06:	8a 81       	ldd	r24, Y+2	; 0x02
 a08:	9b 81       	ldd	r25, Y+3	; 0x03
 a0a:	e8 16       	cp	r14, r24
 a0c:	f9 06       	cpc	r15, r25
 a0e:	d8 f4       	brcc	.+54     	; 0xa46 <xTaskIncrementTick+0xcc>
 a10:	15 c0       	rjmp	.+42     	; 0xa3c <xTaskIncrementTick+0xc2>
 a12:	8f ef       	ldi	r24, 0xFF	; 255
 a14:	9f ef       	ldi	r25, 0xFF	; 255
 a16:	90 93 72 06 	sts	0x0672, r25	; 0x800672 <xNextTaskUnblockTime+0x1>
 a1a:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <xNextTaskUnblockTime>
 a1e:	41 c0       	rjmp	.+130    	; 0xaa2 <xTaskIncrementTick+0x128>
 a20:	e0 91 9a 06 	lds	r30, 0x069A	; 0x80069a <pxDelayedTaskList>
 a24:	f0 91 9b 06 	lds	r31, 0x069B	; 0x80069b <pxDelayedTaskList+0x1>
 a28:	05 80       	ldd	r0, Z+5	; 0x05
 a2a:	f6 81       	ldd	r31, Z+6	; 0x06
 a2c:	e0 2d       	mov	r30, r0
 a2e:	c6 81       	ldd	r28, Z+6	; 0x06
 a30:	d7 81       	ldd	r29, Z+7	; 0x07
 a32:	8a 81       	ldd	r24, Y+2	; 0x02
 a34:	9b 81       	ldd	r25, Y+3	; 0x03
 a36:	e8 16       	cp	r14, r24
 a38:	f9 06       	cpc	r15, r25
 a3a:	28 f4       	brcc	.+10     	; 0xa46 <xTaskIncrementTick+0xcc>
 a3c:	90 93 72 06 	sts	0x0672, r25	; 0x800672 <xNextTaskUnblockTime+0x1>
 a40:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <xNextTaskUnblockTime>
 a44:	2e c0       	rjmp	.+92     	; 0xaa2 <xTaskIncrementTick+0x128>
 a46:	8e 01       	movw	r16, r28
 a48:	0e 5f       	subi	r16, 0xFE	; 254
 a4a:	1f 4f       	sbci	r17, 0xFF	; 255
 a4c:	c8 01       	movw	r24, r16
 a4e:	35 dc       	rcall	.-1942   	; 0x2ba <uxListRemove>
 a50:	8c 89       	ldd	r24, Y+20	; 0x14
 a52:	9d 89       	ldd	r25, Y+21	; 0x15
 a54:	89 2b       	or	r24, r25
 a56:	19 f0       	breq	.+6      	; 0xa5e <xTaskIncrementTick+0xe4>
 a58:	ce 01       	movw	r24, r28
 a5a:	0c 96       	adiw	r24, 0x0c	; 12
 a5c:	2e dc       	rcall	.-1956   	; 0x2ba <uxListRemove>
 a5e:	8e 89       	ldd	r24, Y+22	; 0x16
 a60:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <uxTopReadyPriority>
 a64:	98 17       	cp	r25, r24
 a66:	10 f4       	brcc	.+4      	; 0xa6c <xTaskIncrementTick+0xf2>
 a68:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	9c 01       	movw	r18, r24
 a70:	22 0f       	add	r18, r18
 a72:	33 1f       	adc	r19, r19
 a74:	22 0f       	add	r18, r18
 a76:	33 1f       	adc	r19, r19
 a78:	22 0f       	add	r18, r18
 a7a:	33 1f       	adc	r19, r19
 a7c:	82 0f       	add	r24, r18
 a7e:	93 1f       	adc	r25, r19
 a80:	b8 01       	movw	r22, r16
 a82:	82 55       	subi	r24, 0x52	; 82
 a84:	99 4f       	sbci	r25, 0xF9	; 249
 a86:	c7 db       	rcall	.-2162   	; 0x216 <vListInsertEnd>
 a88:	e0 91 9a 06 	lds	r30, 0x069A	; 0x80069a <pxDelayedTaskList>
 a8c:	f0 91 9b 06 	lds	r31, 0x069B	; 0x80069b <pxDelayedTaskList+0x1>
 a90:	80 81       	ld	r24, Z
 a92:	81 11       	cpse	r24, r1
 a94:	c5 cf       	rjmp	.-118    	; 0xa20 <xTaskIncrementTick+0xa6>
 a96:	bd cf       	rjmp	.-134    	; 0xa12 <xTaskIncrementTick+0x98>
 a98:	80 91 76 06 	lds	r24, 0x0676	; 0x800676 <uxPendedTicks>
 a9c:	8f 5f       	subi	r24, 0xFF	; 255
 a9e:	80 93 76 06 	sts	0x0676, r24	; 0x800676 <uxPendedTicks>
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	df 91       	pop	r29
 aa6:	cf 91       	pop	r28
 aa8:	1f 91       	pop	r17
 aaa:	0f 91       	pop	r16
 aac:	ff 90       	pop	r15
 aae:	ef 90       	pop	r14
 ab0:	08 95       	ret

00000ab2 <xTaskResumeAll>:
 ab2:	df 92       	push	r13
 ab4:	ef 92       	push	r14
 ab6:	ff 92       	push	r15
 ab8:	0f 93       	push	r16
 aba:	1f 93       	push	r17
 abc:	cf 93       	push	r28
 abe:	df 93       	push	r29
 ac0:	0f b6       	in	r0, 0x3f	; 63
 ac2:	f8 94       	cli
 ac4:	0f 92       	push	r0
 ac6:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <uxSchedulerSuspended>
 aca:	81 50       	subi	r24, 0x01	; 1
 acc:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <uxSchedulerSuspended>
 ad0:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <uxSchedulerSuspended>
 ad4:	81 11       	cpse	r24, r1
 ad6:	54 c0       	rjmp	.+168    	; 0xb80 <xTaskResumeAll+0xce>
 ad8:	80 91 7b 06 	lds	r24, 0x067B	; 0x80067b <uxCurrentNumberOfTasks>
 adc:	81 11       	cpse	r24, r1
 ade:	30 c0       	rjmp	.+96     	; 0xb40 <xTaskResumeAll+0x8e>
 ae0:	4f c0       	rjmp	.+158    	; 0xb80 <xTaskResumeAll+0xce>
 ae2:	d7 01       	movw	r26, r14
 ae4:	15 96       	adiw	r26, 0x05	; 5
 ae6:	ed 91       	ld	r30, X+
 ae8:	fc 91       	ld	r31, X
 aea:	16 97       	sbiw	r26, 0x06	; 6
 aec:	c6 81       	ldd	r28, Z+6	; 0x06
 aee:	d7 81       	ldd	r29, Z+7	; 0x07
 af0:	ce 01       	movw	r24, r28
 af2:	0c 96       	adiw	r24, 0x0c	; 12
 af4:	e2 db       	rcall	.-2108   	; 0x2ba <uxListRemove>
 af6:	8e 01       	movw	r16, r28
 af8:	0e 5f       	subi	r16, 0xFE	; 254
 afa:	1f 4f       	sbci	r17, 0xFF	; 255
 afc:	c8 01       	movw	r24, r16
 afe:	dd db       	rcall	.-2118   	; 0x2ba <uxListRemove>
 b00:	8e 89       	ldd	r24, Y+22	; 0x16
 b02:	90 91 78 06 	lds	r25, 0x0678	; 0x800678 <uxTopReadyPriority>
 b06:	98 17       	cp	r25, r24
 b08:	10 f4       	brcc	.+4      	; 0xb0e <xTaskResumeAll+0x5c>
 b0a:	80 93 78 06 	sts	0x0678, r24	; 0x800678 <uxTopReadyPriority>
 b0e:	90 e0       	ldi	r25, 0x00	; 0
 b10:	9c 01       	movw	r18, r24
 b12:	22 0f       	add	r18, r18
 b14:	33 1f       	adc	r19, r19
 b16:	22 0f       	add	r18, r18
 b18:	33 1f       	adc	r19, r19
 b1a:	22 0f       	add	r18, r18
 b1c:	33 1f       	adc	r19, r19
 b1e:	82 0f       	add	r24, r18
 b20:	93 1f       	adc	r25, r19
 b22:	b8 01       	movw	r22, r16
 b24:	82 55       	subi	r24, 0x52	; 82
 b26:	99 4f       	sbci	r25, 0xF9	; 249
 b28:	76 db       	rcall	.-2324   	; 0x216 <vListInsertEnd>
 b2a:	e0 91 d2 06 	lds	r30, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 b2e:	f0 91 d3 06 	lds	r31, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 b32:	9e 89       	ldd	r25, Y+22	; 0x16
 b34:	86 89       	ldd	r24, Z+22	; 0x16
 b36:	98 17       	cp	r25, r24
 b38:	68 f0       	brcs	.+26     	; 0xb54 <xTaskResumeAll+0xa2>
 b3a:	d0 92 75 06 	sts	0x0675, r13	; 0x800675 <xYieldPending>
 b3e:	0a c0       	rjmp	.+20     	; 0xb54 <xTaskResumeAll+0xa2>
 b40:	c0 e0       	ldi	r28, 0x00	; 0
 b42:	d0 e0       	ldi	r29, 0x00	; 0
 b44:	0f 2e       	mov	r0, r31
 b46:	ff e8       	ldi	r31, 0x8F	; 143
 b48:	ef 2e       	mov	r14, r31
 b4a:	f6 e0       	ldi	r31, 0x06	; 6
 b4c:	ff 2e       	mov	r15, r31
 b4e:	f0 2d       	mov	r31, r0
 b50:	dd 24       	eor	r13, r13
 b52:	d3 94       	inc	r13
 b54:	f7 01       	movw	r30, r14
 b56:	80 81       	ld	r24, Z
 b58:	81 11       	cpse	r24, r1
 b5a:	c3 cf       	rjmp	.-122    	; 0xae2 <xTaskResumeAll+0x30>
 b5c:	cd 2b       	or	r28, r29
 b5e:	09 f0       	breq	.+2      	; 0xb62 <xTaskResumeAll+0xb0>
 b60:	ef dc       	rcall	.-1570   	; 0x540 <prvResetNextTaskUnblockTime>
 b62:	c0 91 76 06 	lds	r28, 0x0676	; 0x800676 <uxPendedTicks>
 b66:	cc 23       	and	r28, r28
 b68:	49 f0       	breq	.+18     	; 0xb7c <xTaskResumeAll+0xca>
 b6a:	d1 e0       	ldi	r29, 0x01	; 1
 b6c:	06 df       	rcall	.-500    	; 0x97a <xTaskIncrementTick>
 b6e:	81 11       	cpse	r24, r1
 b70:	d0 93 75 06 	sts	0x0675, r29	; 0x800675 <xYieldPending>
 b74:	c1 50       	subi	r28, 0x01	; 1
 b76:	d1 f7       	brne	.-12     	; 0xb6c <xTaskResumeAll+0xba>
 b78:	10 92 76 06 	sts	0x0676, r1	; 0x800676 <uxPendedTicks>
 b7c:	80 91 75 06 	lds	r24, 0x0675	; 0x800675 <xYieldPending>
 b80:	0f 90       	pop	r0
 b82:	0f be       	out	0x3f, r0	; 63
 b84:	80 e0       	ldi	r24, 0x00	; 0
 b86:	df 91       	pop	r29
 b88:	cf 91       	pop	r28
 b8a:	1f 91       	pop	r17
 b8c:	0f 91       	pop	r16
 b8e:	ff 90       	pop	r15
 b90:	ef 90       	pop	r14
 b92:	df 90       	pop	r13
 b94:	08 95       	ret

00000b96 <vTaskDelayUntil>:
 b96:	0f 93       	push	r16
 b98:	1f 93       	push	r17
 b9a:	cf 93       	push	r28
 b9c:	df 93       	push	r29
 b9e:	8c 01       	movw	r16, r24
 ba0:	eb 01       	movw	r28, r22
 ba2:	db de       	rcall	.-586    	; 0x95a <vTaskSuspendAll>
 ba4:	40 91 79 06 	lds	r20, 0x0679	; 0x800679 <xTickCount>
 ba8:	50 91 7a 06 	lds	r21, 0x067A	; 0x80067a <xTickCount+0x1>
 bac:	f8 01       	movw	r30, r16
 bae:	20 81       	ld	r18, Z
 bb0:	31 81       	ldd	r19, Z+1	; 0x01
 bb2:	c9 01       	movw	r24, r18
 bb4:	8c 0f       	add	r24, r28
 bb6:	9d 1f       	adc	r25, r29
 bb8:	42 17       	cp	r20, r18
 bba:	53 07       	cpc	r21, r19
 bbc:	48 f4       	brcc	.+18     	; 0xbd0 <vTaskDelayUntil+0x3a>
 bbe:	82 17       	cp	r24, r18
 bc0:	93 07       	cpc	r25, r19
 bc2:	d0 f4       	brcc	.+52     	; 0xbf8 <vTaskDelayUntil+0x62>
 bc4:	91 83       	std	Z+1, r25	; 0x01
 bc6:	80 83       	st	Z, r24
 bc8:	48 17       	cp	r20, r24
 bca:	59 07       	cpc	r21, r25
 bcc:	60 f4       	brcc	.+24     	; 0xbe6 <vTaskDelayUntil+0x50>
 bce:	07 c0       	rjmp	.+14     	; 0xbde <vTaskDelayUntil+0x48>
 bd0:	82 17       	cp	r24, r18
 bd2:	93 07       	cpc	r25, r19
 bd4:	68 f0       	brcs	.+26     	; 0xbf0 <vTaskDelayUntil+0x5a>
 bd6:	48 17       	cp	r20, r24
 bd8:	59 07       	cpc	r21, r25
 bda:	50 f0       	brcs	.+20     	; 0xbf0 <vTaskDelayUntil+0x5a>
 bdc:	0d c0       	rjmp	.+26     	; 0xbf8 <vTaskDelayUntil+0x62>
 bde:	60 e0       	ldi	r22, 0x00	; 0
 be0:	84 1b       	sub	r24, r20
 be2:	95 0b       	sbc	r25, r21
 be4:	f6 dc       	rcall	.-1556   	; 0x5d2 <prvAddCurrentTaskToDelayedList>
 be6:	65 df       	rcall	.-310    	; 0xab2 <xTaskResumeAll>
 be8:	81 11       	cpse	r24, r1
 bea:	0a c0       	rjmp	.+20     	; 0xc00 <vTaskDelayUntil+0x6a>
 bec:	2e dc       	rcall	.-1956   	; 0x44a <vPortYield>
 bee:	08 c0       	rjmp	.+16     	; 0xc00 <vTaskDelayUntil+0x6a>
 bf0:	f8 01       	movw	r30, r16
 bf2:	91 83       	std	Z+1, r25	; 0x01
 bf4:	80 83       	st	Z, r24
 bf6:	f3 cf       	rjmp	.-26     	; 0xbde <vTaskDelayUntil+0x48>
 bf8:	f8 01       	movw	r30, r16
 bfa:	91 83       	std	Z+1, r25	; 0x01
 bfc:	80 83       	st	Z, r24
 bfe:	f3 cf       	rjmp	.-26     	; 0xbe6 <vTaskDelayUntil+0x50>
 c00:	df 91       	pop	r29
 c02:	cf 91       	pop	r28
 c04:	1f 91       	pop	r17
 c06:	0f 91       	pop	r16
 c08:	08 95       	ret

00000c0a <vTaskSwitchContext>:
 c0a:	80 91 6e 06 	lds	r24, 0x066E	; 0x80066e <uxSchedulerSuspended>
 c0e:	88 23       	and	r24, r24
 c10:	21 f0       	breq	.+8      	; 0xc1a <vTaskSwitchContext+0x10>
 c12:	81 e0       	ldi	r24, 0x01	; 1
 c14:	80 93 75 06 	sts	0x0675, r24	; 0x800675 <xYieldPending>
 c18:	08 95       	ret
 c1a:	10 92 75 06 	sts	0x0675, r1	; 0x800675 <xYieldPending>
 c1e:	20 91 78 06 	lds	r18, 0x0678	; 0x800678 <uxTopReadyPriority>
 c22:	82 2f       	mov	r24, r18
 c24:	90 e0       	ldi	r25, 0x00	; 0
 c26:	fc 01       	movw	r30, r24
 c28:	ee 0f       	add	r30, r30
 c2a:	ff 1f       	adc	r31, r31
 c2c:	ee 0f       	add	r30, r30
 c2e:	ff 1f       	adc	r31, r31
 c30:	ee 0f       	add	r30, r30
 c32:	ff 1f       	adc	r31, r31
 c34:	e8 0f       	add	r30, r24
 c36:	f9 1f       	adc	r31, r25
 c38:	e2 55       	subi	r30, 0x52	; 82
 c3a:	f9 4f       	sbci	r31, 0xF9	; 249
 c3c:	30 81       	ld	r19, Z
 c3e:	31 11       	cpse	r19, r1
 c40:	11 c0       	rjmp	.+34     	; 0xc64 <vTaskSwitchContext+0x5a>
 c42:	21 50       	subi	r18, 0x01	; 1
 c44:	82 2f       	mov	r24, r18
 c46:	90 e0       	ldi	r25, 0x00	; 0
 c48:	fc 01       	movw	r30, r24
 c4a:	ee 0f       	add	r30, r30
 c4c:	ff 1f       	adc	r31, r31
 c4e:	ee 0f       	add	r30, r30
 c50:	ff 1f       	adc	r31, r31
 c52:	ee 0f       	add	r30, r30
 c54:	ff 1f       	adc	r31, r31
 c56:	e8 0f       	add	r30, r24
 c58:	f9 1f       	adc	r31, r25
 c5a:	e2 55       	subi	r30, 0x52	; 82
 c5c:	f9 4f       	sbci	r31, 0xF9	; 249
 c5e:	30 81       	ld	r19, Z
 c60:	33 23       	and	r19, r19
 c62:	79 f3       	breq	.-34     	; 0xc42 <vTaskSwitchContext+0x38>
 c64:	ac 01       	movw	r20, r24
 c66:	44 0f       	add	r20, r20
 c68:	55 1f       	adc	r21, r21
 c6a:	44 0f       	add	r20, r20
 c6c:	55 1f       	adc	r21, r21
 c6e:	44 0f       	add	r20, r20
 c70:	55 1f       	adc	r21, r21
 c72:	48 0f       	add	r20, r24
 c74:	59 1f       	adc	r21, r25
 c76:	da 01       	movw	r26, r20
 c78:	a2 55       	subi	r26, 0x52	; 82
 c7a:	b9 4f       	sbci	r27, 0xF9	; 249
 c7c:	11 96       	adiw	r26, 0x01	; 1
 c7e:	ed 91       	ld	r30, X+
 c80:	fc 91       	ld	r31, X
 c82:	12 97       	sbiw	r26, 0x02	; 2
 c84:	02 80       	ldd	r0, Z+2	; 0x02
 c86:	f3 81       	ldd	r31, Z+3	; 0x03
 c88:	e0 2d       	mov	r30, r0
 c8a:	12 96       	adiw	r26, 0x02	; 2
 c8c:	fc 93       	st	X, r31
 c8e:	ee 93       	st	-X, r30
 c90:	11 97       	sbiw	r26, 0x01	; 1
 c92:	4f 54       	subi	r20, 0x4F	; 79
 c94:	59 4f       	sbci	r21, 0xF9	; 249
 c96:	e4 17       	cp	r30, r20
 c98:	f5 07       	cpc	r31, r21
 c9a:	29 f4       	brne	.+10     	; 0xca6 <vTaskSwitchContext+0x9c>
 c9c:	42 81       	ldd	r20, Z+2	; 0x02
 c9e:	53 81       	ldd	r21, Z+3	; 0x03
 ca0:	fd 01       	movw	r30, r26
 ca2:	52 83       	std	Z+2, r21	; 0x02
 ca4:	41 83       	std	Z+1, r20	; 0x01
 ca6:	fc 01       	movw	r30, r24
 ca8:	ee 0f       	add	r30, r30
 caa:	ff 1f       	adc	r31, r31
 cac:	ee 0f       	add	r30, r30
 cae:	ff 1f       	adc	r31, r31
 cb0:	ee 0f       	add	r30, r30
 cb2:	ff 1f       	adc	r31, r31
 cb4:	8e 0f       	add	r24, r30
 cb6:	9f 1f       	adc	r25, r31
 cb8:	fc 01       	movw	r30, r24
 cba:	e2 55       	subi	r30, 0x52	; 82
 cbc:	f9 4f       	sbci	r31, 0xF9	; 249
 cbe:	01 80       	ldd	r0, Z+1	; 0x01
 cc0:	f2 81       	ldd	r31, Z+2	; 0x02
 cc2:	e0 2d       	mov	r30, r0
 cc4:	86 81       	ldd	r24, Z+6	; 0x06
 cc6:	97 81       	ldd	r25, Z+7	; 0x07
 cc8:	90 93 d3 06 	sts	0x06D3, r25	; 0x8006d3 <pxCurrentTCB+0x1>
 ccc:	80 93 d2 06 	sts	0x06D2, r24	; 0x8006d2 <pxCurrentTCB>
 cd0:	20 93 78 06 	sts	0x0678, r18	; 0x800678 <uxTopReadyPriority>
 cd4:	08 95       	ret

00000cd6 <xTaskGetCurrentTaskHandle>:
 cd6:	80 91 d2 06 	lds	r24, 0x06D2	; 0x8006d2 <pxCurrentTCB>
 cda:	90 91 d3 06 	lds	r25, 0x06D3	; 0x8006d3 <pxCurrentTCB+0x1>
 cde:	08 95       	ret

00000ce0 <KeyPad_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8_t KeyPad_getPressedKey(void)
{
 ce0:	1f 93       	push	r17
 ce2:	cf 93       	push	r28
 ce4:	df 93       	push	r29
 ce6:	d1 e0       	ldi	r29, 0x01	; 1
 ce8:	60 e0       	ldi	r22, 0x00	; 0
 cea:	70 e0       	ldi	r23, 0x00	; 0
	uint8_t col,row;
	uint8_t key=NO_KEY_PRESSED;
 cec:	83 e6       	ldi	r24, 0x63	; 99
	{
		/*
		 * each time only one of the column pins will be output and
		 * the rest will be input pins include the row pins
		 */
		KEYPAD_PORT_DIR = (KEYPAD_MASK<<col);
 cee:	a0 e1       	ldi	r26, 0x10	; 16
 cf0:	b0 e0       	ldi	r27, 0x00	; 0
 cf2:	e1 e0       	ldi	r30, 0x01	; 1
 cf4:	f0 e0       	ldi	r31, 0x00	; 0
{
	switch(button_number)
	{
		case 10: return '*'; // ASCII Code of =
				 break;
		case 11: return 0;
 cf6:	10 e0       	ldi	r17, 0x00	; 0
	{
		/*
		 * each time only one of the column pins will be output and
		 * the rest will be input pins include the row pins
		 */
		KEYPAD_PORT_DIR = (KEYPAD_MASK<<col);
 cf8:	9d 01       	movw	r18, r26
 cfa:	06 2e       	mov	r0, r22
 cfc:	02 c0       	rjmp	.+4      	; 0xd02 <KeyPad_getPressedKey+0x22>
 cfe:	22 0f       	add	r18, r18
 d00:	33 1f       	adc	r19, r19
 d02:	0a 94       	dec	r0
 d04:	e2 f7       	brpl	.-8      	; 0xcfe <KeyPad_getPressedKey+0x1e>
 d06:	24 bb       	out	0x14, r18	; 20

		/*
		 * clear the output pin column in this trace and enable the internal
		 * pull up resistors for the rows pins
		 */
		KEYPAD_PORT_OUT = (~(KEYPAD_MASK<<col));
 d08:	20 95       	com	r18
 d0a:	25 bb       	out	0x15, r18	; 21
 d0c:	cd 2f       	mov	r28, r29
 d0e:	40 e0       	ldi	r20, 0x00	; 0
 d10:	50 e0       	ldi	r21, 0x00	; 0
		for(row=INITIAL_VALUE;row<N_row;row++) /* loop for rows */
		{
			if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
 d12:	23 b3       	in	r18, 0x13	; 19
 d14:	30 e0       	ldi	r19, 0x00	; 0
 d16:	04 2e       	mov	r0, r20
 d18:	02 c0       	rjmp	.+4      	; 0xd1e <KeyPad_getPressedKey+0x3e>
 d1a:	35 95       	asr	r19
 d1c:	27 95       	ror	r18
 d1e:	0a 94       	dec	r0
 d20:	e2 f7       	brpl	.-8      	; 0xd1a <KeyPad_getPressedKey+0x3a>
 d22:	20 fd       	sbrc	r18, 0
 d24:	1b c0       	rjmp	.+54     	; 0xd5c <KeyPad_getPressedKey+0x7c>
 d26:	9f 01       	movw	r18, r30
 d28:	04 2e       	mov	r0, r20
 d2a:	02 c0       	rjmp	.+4      	; 0xd30 <KeyPad_getPressedKey+0x50>
 d2c:	22 0f       	add	r18, r18
 d2e:	33 1f       	adc	r19, r19
 d30:	0a 94       	dec	r0
 d32:	e2 f7       	brpl	.-8      	; 0xd2c <KeyPad_getPressedKey+0x4c>
			{
				while(BIT_IS_CLEAR(KEYPAD_PORT_IN,row));  /* for button debouncing */
 d34:	83 b3       	in	r24, 0x13	; 19
 d36:	90 e0       	ldi	r25, 0x00	; 0
 d38:	82 23       	and	r24, r18
 d3a:	93 23       	and	r25, r19
 d3c:	89 2b       	or	r24, r25
 d3e:	d1 f3       	breq	.-12     	; 0xd34 <KeyPad_getPressedKey+0x54>



static uint8_t KeyPad_4x3_adjustKeyNumber(uint8_t button_number)
{
	switch(button_number)
 d40:	cb 30       	cpi	r28, 0x0B	; 11
 d42:	29 f0       	breq	.+10     	; 0xd4e <KeyPad_getPressedKey+0x6e>
 d44:	cc 30       	cpi	r28, 0x0C	; 12
 d46:	29 f0       	breq	.+10     	; 0xd52 <KeyPad_getPressedKey+0x72>
 d48:	ca 30       	cpi	r28, 0x0A	; 10
 d4a:	29 f4       	brne	.+10     	; 0xd56 <KeyPad_getPressedKey+0x76>
 d4c:	06 c0       	rjmp	.+12     	; 0xd5a <KeyPad_getPressedKey+0x7a>
	{
		case 10: return '*'; // ASCII Code of =
				 break;
		case 11: return 0;
 d4e:	81 2f       	mov	r24, r17
 d50:	05 c0       	rjmp	.+10     	; 0xd5c <KeyPad_getPressedKey+0x7c>
				 break;
		case 12: return '#'; // ASCII Code of +
 d52:	83 e2       	ldi	r24, 0x23	; 35
 d54:	03 c0       	rjmp	.+6      	; 0xd5c <KeyPad_getPressedKey+0x7c>
				 break;
		default: return button_number;
 d56:	8c 2f       	mov	r24, r28
 d58:	01 c0       	rjmp	.+2      	; 0xd5c <KeyPad_getPressedKey+0x7c>

static uint8_t KeyPad_4x3_adjustKeyNumber(uint8_t button_number)
{
	switch(button_number)
	{
		case 10: return '*'; // ASCII Code of =
 d5a:	8a e2       	ldi	r24, 0x2A	; 42
 d5c:	4f 5f       	subi	r20, 0xFF	; 255
 d5e:	5f 4f       	sbci	r21, 0xFF	; 255
 d60:	cd 5f       	subi	r28, 0xFD	; 253
		/*
		 * clear the output pin column in this trace and enable the internal
		 * pull up resistors for the rows pins
		 */
		KEYPAD_PORT_OUT = (~(KEYPAD_MASK<<col));
		for(row=INITIAL_VALUE;row<N_row;row++) /* loop for rows */
 d62:	44 30       	cpi	r20, 0x04	; 4
 d64:	51 05       	cpc	r21, r1
 d66:	a9 f6       	brne	.-86     	; 0xd12 <KeyPad_getPressedKey+0x32>
 d68:	6f 5f       	subi	r22, 0xFF	; 255
 d6a:	7f 4f       	sbci	r23, 0xFF	; 255
 d6c:	df 5f       	subi	r29, 0xFF	; 255
 *******************************************************************************/
uint8_t KeyPad_getPressedKey(void)
{
	uint8_t col,row;
	uint8_t key=NO_KEY_PRESSED;
	for(col=INITIAL_VALUE;col<N_col;col++) /* loop for columns */
 d6e:	d4 30       	cpi	r29, 0x04	; 4
 d70:	19 f6       	brne	.-122    	; 0xcf8 <KeyPad_getPressedKey+0x18>

			}
		}
	}
	return key;
}
 d72:	df 91       	pop	r29
 d74:	cf 91       	pop	r28
 d76:	1f 91       	pop	r17
 d78:	08 95       	ret

00000d7a <LCD_sendCommand>:

void LCD_displayStringRowColumn(uint8_t row,uint8_t col,const char *Str)
{
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
	LCD_displayString(Str); /* display the string */
}
 d7a:	cf 93       	push	r28
 d7c:	c8 2f       	mov	r28, r24
 d7e:	d9 98       	cbi	0x1b, 1	; 27
 d80:	da 98       	cbi	0x1b, 2	; 27
 d82:	db 9a       	sbi	0x1b, 3	; 27
 d84:	8b b3       	in	r24, 0x1b	; 27
 d86:	8f 70       	andi	r24, 0x0F	; 15
 d88:	9c 2f       	mov	r25, r28
 d8a:	90 7f       	andi	r25, 0xF0	; 240
 d8c:	89 2b       	or	r24, r25
 d8e:	8b bb       	out	0x1b, r24	; 27
 d90:	63 e0       	ldi	r22, 0x03	; 3
 d92:	70 e0       	ldi	r23, 0x00	; 0
 d94:	80 e0       	ldi	r24, 0x00	; 0
 d96:	90 e0       	ldi	r25, 0x00	; 0
 d98:	de d9       	rcall	.-3140   	; 0x156 <softwareDelayUS>
 d9a:	db 98       	cbi	0x1b, 3	; 27
 d9c:	63 e0       	ldi	r22, 0x03	; 3
 d9e:	70 e0       	ldi	r23, 0x00	; 0
 da0:	80 e0       	ldi	r24, 0x00	; 0
 da2:	90 e0       	ldi	r25, 0x00	; 0
 da4:	d8 d9       	rcall	.-3152   	; 0x156 <softwareDelayUS>
 da6:	db 9a       	sbi	0x1b, 3	; 27
 da8:	63 e0       	ldi	r22, 0x03	; 3
 daa:	70 e0       	ldi	r23, 0x00	; 0
 dac:	80 e0       	ldi	r24, 0x00	; 0
 dae:	90 e0       	ldi	r25, 0x00	; 0
 db0:	d2 d9       	rcall	.-3164   	; 0x156 <softwareDelayUS>
 db2:	8b b3       	in	r24, 0x1b	; 27
 db4:	28 2f       	mov	r18, r24
 db6:	2f 70       	andi	r18, 0x0F	; 15
 db8:	30 e1       	ldi	r19, 0x10	; 16
 dba:	c3 9f       	mul	r28, r19
 dbc:	c0 01       	movw	r24, r0
 dbe:	11 24       	eor	r1, r1
 dc0:	82 2b       	or	r24, r18
 dc2:	8b bb       	out	0x1b, r24	; 27
 dc4:	63 e0       	ldi	r22, 0x03	; 3
 dc6:	70 e0       	ldi	r23, 0x00	; 0
 dc8:	80 e0       	ldi	r24, 0x00	; 0
 dca:	90 e0       	ldi	r25, 0x00	; 0
 dcc:	c4 d9       	rcall	.-3192   	; 0x156 <softwareDelayUS>
 dce:	db 98       	cbi	0x1b, 3	; 27
 dd0:	81 e0       	ldi	r24, 0x01	; 1
 dd2:	80 93 d7 06 	sts	0x06D7, r24	; 0x8006d7 <gu8_SendCommand_CompleteFlag>
 dd6:	cf 91       	pop	r28
 dd8:	08 95       	ret

00000dda <LCD_init>:
 dda:	8a b3       	in	r24, 0x1a	; 26
 ddc:	8e 60       	ori	r24, 0x0E	; 14
 dde:	8a bb       	out	0x1a, r24	; 26
 de0:	8a b3       	in	r24, 0x1a	; 26
 de2:	80 6f       	ori	r24, 0xF0	; 240
 de4:	8a bb       	out	0x1a, r24	; 26
 de6:	82 e0       	ldi	r24, 0x02	; 2
 de8:	c8 df       	rcall	.-112    	; 0xd7a <LCD_sendCommand>
 dea:	88 e2       	ldi	r24, 0x28	; 40
 dec:	c6 df       	rcall	.-116    	; 0xd7a <LCD_sendCommand>
 dee:	8c e0       	ldi	r24, 0x0C	; 12
 df0:	c4 df       	rcall	.-120    	; 0xd7a <LCD_sendCommand>
 df2:	81 e0       	ldi	r24, 0x01	; 1
 df4:	c2 df       	rcall	.-124    	; 0xd7a <LCD_sendCommand>
 df6:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <gu8_LCDInit_CompleteFlag>
 dfa:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <gu8_SendCommand_CompleteFlag>
 dfe:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <gu8_SendChar_CompleteFlag>
 e02:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <gu8_String_CompleteFlag>
 e06:	08 95       	ret

00000e08 <LCD_displayCharacter>:
 e08:	cf 93       	push	r28
 e0a:	c8 2f       	mov	r28, r24
 e0c:	80 91 d7 06 	lds	r24, 0x06D7	; 0x8006d7 <gu8_SendCommand_CompleteFlag>
 e10:	81 30       	cpi	r24, 0x01	; 1
 e12:	39 f4       	brne	.+14     	; 0xe22 <LCD_displayCharacter+0x1a>
 e14:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <gu8_SendCommand_CompleteFlag>
 e18:	60 e2       	ldi	r22, 0x20	; 32
 e1a:	73 e0       	ldi	r23, 0x03	; 3
 e1c:	80 e0       	ldi	r24, 0x00	; 0
 e1e:	90 e0       	ldi	r25, 0x00	; 0
 e20:	9a d9       	rcall	.-3276   	; 0x156 <softwareDelayUS>
 e22:	d9 9a       	sbi	0x1b, 1	; 27
 e24:	da 98       	cbi	0x1b, 2	; 27
 e26:	61 e0       	ldi	r22, 0x01	; 1
 e28:	70 e0       	ldi	r23, 0x00	; 0
 e2a:	80 e0       	ldi	r24, 0x00	; 0
 e2c:	90 e0       	ldi	r25, 0x00	; 0
 e2e:	93 d9       	rcall	.-3290   	; 0x156 <softwareDelayUS>
 e30:	db 9a       	sbi	0x1b, 3	; 27
 e32:	61 e0       	ldi	r22, 0x01	; 1
 e34:	70 e0       	ldi	r23, 0x00	; 0
 e36:	80 e0       	ldi	r24, 0x00	; 0
 e38:	90 e0       	ldi	r25, 0x00	; 0
 e3a:	8d d9       	rcall	.-3302   	; 0x156 <softwareDelayUS>
 e3c:	8b b3       	in	r24, 0x1b	; 27
 e3e:	8f 70       	andi	r24, 0x0F	; 15
 e40:	9c 2f       	mov	r25, r28
 e42:	90 7f       	andi	r25, 0xF0	; 240
 e44:	89 2b       	or	r24, r25
 e46:	8b bb       	out	0x1b, r24	; 27
 e48:	63 e0       	ldi	r22, 0x03	; 3
 e4a:	70 e0       	ldi	r23, 0x00	; 0
 e4c:	80 e0       	ldi	r24, 0x00	; 0
 e4e:	90 e0       	ldi	r25, 0x00	; 0
 e50:	82 d9       	rcall	.-3324   	; 0x156 <softwareDelayUS>
 e52:	db 98       	cbi	0x1b, 3	; 27
 e54:	63 e0       	ldi	r22, 0x03	; 3
 e56:	70 e0       	ldi	r23, 0x00	; 0
 e58:	80 e0       	ldi	r24, 0x00	; 0
 e5a:	90 e0       	ldi	r25, 0x00	; 0
 e5c:	7c d9       	rcall	.-3336   	; 0x156 <softwareDelayUS>
 e5e:	db 9a       	sbi	0x1b, 3	; 27
 e60:	63 e0       	ldi	r22, 0x03	; 3
 e62:	70 e0       	ldi	r23, 0x00	; 0
 e64:	80 e0       	ldi	r24, 0x00	; 0
 e66:	90 e0       	ldi	r25, 0x00	; 0
 e68:	76 d9       	rcall	.-3348   	; 0x156 <softwareDelayUS>
 e6a:	8b b3       	in	r24, 0x1b	; 27
 e6c:	28 2f       	mov	r18, r24
 e6e:	2f 70       	andi	r18, 0x0F	; 15
 e70:	30 e1       	ldi	r19, 0x10	; 16
 e72:	c3 9f       	mul	r28, r19
 e74:	c0 01       	movw	r24, r0
 e76:	11 24       	eor	r1, r1
 e78:	82 2b       	or	r24, r18
 e7a:	8b bb       	out	0x1b, r24	; 27
 e7c:	63 e0       	ldi	r22, 0x03	; 3
 e7e:	70 e0       	ldi	r23, 0x00	; 0
 e80:	80 e0       	ldi	r24, 0x00	; 0
 e82:	90 e0       	ldi	r25, 0x00	; 0
 e84:	68 d9       	rcall	.-3376   	; 0x156 <softwareDelayUS>
 e86:	db 98       	cbi	0x1b, 3	; 27
 e88:	61 e0       	ldi	r22, 0x01	; 1
 e8a:	70 e0       	ldi	r23, 0x00	; 0
 e8c:	80 e0       	ldi	r24, 0x00	; 0
 e8e:	90 e0       	ldi	r25, 0x00	; 0
 e90:	62 d9       	rcall	.-3388   	; 0x156 <softwareDelayUS>
 e92:	cf 91       	pop	r28
 e94:	08 95       	ret

00000e96 <LCD_displayString>:
 e96:	0f 93       	push	r16
 e98:	1f 93       	push	r17
 e9a:	cf 93       	push	r28
 e9c:	fc 01       	movw	r30, r24
 e9e:	80 81       	ld	r24, Z
 ea0:	88 23       	and	r24, r24
 ea2:	51 f0       	breq	.+20     	; 0xeb8 <LCD_displayString+0x22>
 ea4:	8f 01       	movw	r16, r30
 ea6:	c0 e0       	ldi	r28, 0x00	; 0
 ea8:	af df       	rcall	.-162    	; 0xe08 <LCD_displayCharacter>
 eaa:	cf 5f       	subi	r28, 0xFF	; 255
 eac:	f8 01       	movw	r30, r16
 eae:	ec 0f       	add	r30, r28
 eb0:	f1 1d       	adc	r31, r1
 eb2:	80 81       	ld	r24, Z
 eb4:	81 11       	cpse	r24, r1
 eb6:	f8 cf       	rjmp	.-16     	; 0xea8 <LCD_displayString+0x12>
 eb8:	cf 91       	pop	r28
 eba:	1f 91       	pop	r17
 ebc:	0f 91       	pop	r16
 ebe:	08 95       	ret

00000ec0 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
	LCD_sendCommand(CLEAR_COMMAND); //clear display
 ec0:	81 e0       	ldi	r24, 0x01	; 1
 ec2:	5b cf       	rjmp	.-330    	; 0xd7a <LCD_sendCommand>
 ec4:	08 95       	ret

00000ec6 <vOtherFunction>:



/* Function that creates a task. */
void vOtherFunction( void )
{
 ec6:	ef 92       	push	r14
 ec8:	ff 92       	push	r15
 eca:	0f 93       	push	r16
 ecc:	cf 93       	push	r28
 ece:	df 93       	push	r29
 ed0:	00 d0       	rcall	.+0      	; 0xed2 <vOtherFunction+0xc>
 ed2:	cd b7       	in	r28, 0x3d	; 61
 ed4:	de b7       	in	r29, 0x3e	; 62

TaskHandle_t xHandle = NULL;
 ed6:	1a 82       	std	Y+2, r1	; 0x02
 ed8:	19 82       	std	Y+1, r1	; 0x01

    /* Create the task, storing the handle. */
    xTaskCreate(
 eda:	ce 01       	movw	r24, r28
 edc:	01 96       	adiw	r24, 0x01	; 1
 ede:	7c 01       	movw	r14, r24
 ee0:	00 e0       	ldi	r16, 0x00	; 0
 ee2:	21 e0       	ldi	r18, 0x01	; 1
 ee4:	30 e0       	ldi	r19, 0x00	; 0
 ee6:	44 e6       	ldi	r20, 0x64	; 100
 ee8:	50 e0       	ldi	r21, 0x00	; 0
 eea:	6c e7       	ldi	r22, 0x7C	; 124
 eec:	70 e0       	ldi	r23, 0x00	; 0
 eee:	86 e4       	ldi	r24, 0x46	; 70
 ef0:	90 e0       	ldi	r25, 0x00	; 0
 ef2:	c3 db       	rcall	.-2170   	; 0x67a <xTaskCreate>
                    STACK_SIZE,      /* Stack size in words, not bytes. */
                    ( void * ) 1,    /* Parameter passed into the task. */
                    tskIDLE_PRIORITY,/* Priority at which the task is created. */
                    &xHandle );      /* Used to pass out the created task's handle. */

 xTaskCreate(
 ef4:	21 e0       	ldi	r18, 0x01	; 1
 ef6:	30 e0       	ldi	r19, 0x00	; 0
 ef8:	44 e6       	ldi	r20, 0x64	; 100
 efa:	50 e0       	ldi	r21, 0x00	; 0
 efc:	61 e8       	ldi	r22, 0x81	; 129
 efe:	70 e0       	ldi	r23, 0x00	; 0
 f00:	8a e4       	ldi	r24, 0x4A	; 74
 f02:	90 e0       	ldi	r25, 0x00	; 0
 f04:	ba db       	rcall	.-2188   	; 0x67a <xTaskCreate>
 STACK_SIZE,      /* Stack size in words, not bytes. */
 ( void * ) 1,    /* Parameter passed into the task. */
 tskIDLE_PRIORITY,/* Priority at which the task is created. */
 &xHandle );      /* Used to pass out the created task's handle. */

}
 f06:	0f 90       	pop	r0
 f08:	0f 90       	pop	r0
 f0a:	df 91       	pop	r29
 f0c:	cf 91       	pop	r28
 f0e:	0f 91       	pop	r16
 f10:	ff 90       	pop	r15
 f12:	ef 90       	pop	r14
 f14:	08 95       	ret

00000f16 <main>:


int main(void)
{

	 vOtherFunction();
 f16:	d7 df       	rcall	.-82     	; 0xec6 <vOtherFunction>
	/*start scheduler*/
	vTaskStartScheduler();
 f18:	f8 dc       	rcall	.-1552   	; 0x90a <vTaskStartScheduler>
 f1a:	ff cf       	rjmp	.-2      	; 0xf1a <main+0x4>

00000f1c <_exit>:
 f1c:	f8 94       	cli

00000f1e <__stop_program>:
 f1e:	ff cf       	rjmp	.-2      	; 0xf1e <__stop_program>
